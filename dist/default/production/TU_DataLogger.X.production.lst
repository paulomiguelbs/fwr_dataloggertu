

HI-TECH Software PIC PRO Macro Assembler V9.83 build 10920 
                                                                                               Mon Nov 20 08:56:21 2023

HI-TECH Software Omniscient Code Generator (PRO mode) build 10920
     1                           	processor	16F690
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	config,global,class=CONFIG,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,delta=2
    18                           	psect	swtext1,local,class=CONST,delta=2
    19                           	psect	text1001,local,class=CODE,delta=2
    20                           	psect	text1005,local,class=CODE,delta=2
    21                           	psect	text1015,local,class=CODE,delta=2
    22                           	psect	text1016,local,class=CODE,delta=2
    23                           	psect	text1017,local,class=CODE,delta=2
    24                           	psect	text1018,local,class=CODE,delta=2
    25                           	psect	text1019,local,class=CODE,delta=2
    26                           	psect	text1025,local,class=CODE,delta=2
    27                           	psect	text1026,local,class=CODE,delta=2
    28                           	psect	text1027,local,class=CODE,delta=2
    29                           	psect	text1028,local,class=CODE,delta=2
    30                           	psect	text1030,local,class=CODE,delta=2
    31                           	psect	text1032,local,class=CODE,delta=2
    32                           	psect	text1034,local,class=CODE,delta=2
    33                           	psect	text1035,local,class=CODE,delta=2
    34                           	psect	intentry,global,class=CODE,delta=2
    35                           	psect	text1039,local,class=CODE,delta=2
    36                           	psect	pa_nodes,global,class=CODE,delta=2
    37                           	dabs	1,0x7E,2
    38  000A                     	;#
    39                           
    40                           	psect	config
    41  2007  FFD4               	dw	65492	;#
    42                           
    43                           	psect	idataBANK0
    44  0000                     __pidataBANK0:	
    45  0005                     _PORTA	set	5
    46  0006                     _PORTB	set	6
    47  0007                     _PORTC	set	7
    48  001A                     _RCREG	set	26
    49  0001                     _TMR0	set	1
    50  000F                     _TMR1H	set	15
    51  000E                     _TMR1L	set	14
    52  0019                     _TXREG	set	25
    53  00C4                     _CREN	set	196
    54  005F                     _GIE	set	95
    55  005C                     _INTE	set	92
    56  0059                     _INTF	set	89
    57  00C1                     _OERR	set	193
    58  005E                     _PEIE	set	94
    59  0034                     _RB4	set	52
    60  0036                     _RB6	set	54
    61  0038                     _RC0	set	56
    62  0039                     _RC1	set	57
    63  003C                     _RC4	set	60
    64  0065                     _RCIF	set	101
    65  00C6                     _RX9	set	198
    66  00C7                     _SPEN	set	199
    67  005D                     _T0IE	set	93
    68  005A                     _T0IF	set	90
    69  0084                     _T1CKPS0	set	132
    70  0085                     _T1CKPS1	set	133
    71  0083                     _T1OSCEN	set	131
    72  0081                     _TMR1CS	set	129
    73  0060                     _TMR1IF	set	96
    74  0080                     _TMR1ON	set	128
    75  0064                     _TXIF	set	100
    76  0082                     _nT1SYNC	set	130
    77  0099                     _SPBRG	set	153
    78  009A                     _SPBRGH	set	154
    79  0085                     _TRISA	set	133
    80  0086                     _TRISB	set	134
    81  0087                     _TRISC	set	135
    82  04DB                     _BRG16	set	1243
    83  04C2                     _BRGH	set	1218
    84  040E                     _INTEDG	set	1038
    85  0408                     _PS0	set	1032
    86  0409                     _PS1	set	1033
    87  040A                     _PS2	set	1034
    88  040B                     _PSA	set	1035
    89  0465                     _RCIE	set	1125
    90  04C4                     _SYNC	set	1220
    91  040D                     _T0CS	set	1037
    92  0460                     _TMR1IE	set	1120
    93  0434                     _TRISB4	set	1076
    94  0435                     _TRISB5	set	1077
    95  0436                     _TRISB6	set	1078
    96  0437                     _TRISB7	set	1079
    97  04C6                     _TX9	set	1222
    98  04C5                     _TXEN	set	1221
    99  011E                     _ANSEL	set	286
   100  011F                     _ANSELH	set	287
   101                           
   102                           	psect	strings
   103  0800                     __pstrings:	
   104  0800                     stringtab:	
   105                           ;	global	stringdir,stringtab,__stringbase
   106                           
   107                           
   108                           ;	String table - string pointers are 1 byte each
   109  0800  1BFF               	btfsc	btemp+1,7
   110  0801  280A               	ljmp	stringcode
   111  0802  1383               	bcf	3,7
   112  0803  187F               	btfsc	btemp+1,0
   113  0804  1783               	bsf	3,7
   114  0805  0800               	movf	0,w
   115  0806  0A84               	incf	4,f
   116  0807  1903               	skipnz
   117  0808  0AFF               	incf	btemp+1,f
   118  0809  0008               	return
   119  080A                     stringcode:	
   120  080A                     stringdir:	
   121  080A  3008               	movlw	high stringdir
   122  080B  008A               	movwf	10
   123  080C  0804               	movf	4,w
   124  080D  0A84               	incf	4,f
   125  080E  0782               	addwf	2,f
   126  080F                     __stringbase:	
   127  080F  3400               	retlw	0
   128  0810                     STR_3:	
   129  0810  3441               	retlw	65	;'A'
   130  0811  3454               	retlw	84	;'T'
   131  0812  342B               	retlw	43	;'+'
   132  0813  3453               	retlw	83	;'S'
   133  0814  3454               	retlw	84	;'T'
   134  0815  3441               	retlw	65	;'A'
   135  0816  3452               	retlw	82	;'R'
   136  0817  3454               	retlw	84	;'T'
   137  0818  3445               	retlw	69	;'E'
   138  0819  344E               	retlw	78	;'N'
   139  081A  3431               	retlw	49	;'1'
   140  081B  340D               	retlw	13
   141  081C  340A               	retlw	10
   142  081D  3400               	retlw	0
   143  081E                     STR_2:	
   144  081E  3441               	retlw	65	;'A'
   145  081F  3454               	retlw	84	;'T'
   146  0820  342B               	retlw	43	;'+'
   147  0821  3441               	retlw	65	;'A'
   148  0822  3444               	retlw	68	;'D'
   149  0823  3456               	retlw	86	;'V'
   150  0824  3449               	retlw	73	;'I'
   151  0825  344E               	retlw	78	;'N'
   152  0826  3431               	retlw	49	;'1'
   153  0827  340D               	retlw	13
   154  0828  340A               	retlw	10
   155  0829  3400               	retlw	0
   156  082A                     STR_1:	
   157  082A  3441               	retlw	65	;'A'
   158  082B  3454               	retlw	84	;'T'
   159  082C  342B               	retlw	43	;'+'
   160  082D  3453               	retlw	83	;'S'
   161  082E  344C               	retlw	76	;'L'
   162  082F  3445               	retlw	69	;'E'
   163  0830  3445               	retlw	69	;'E'
   164  0831  3450               	retlw	80	;'P'
   165  0832  3432               	retlw	50	;'2'
   166  0833  340D               	retlw	13
   167  0834  340A               	retlw	10
   168  0835  3400               	retlw	0
   169  0836                     STR_4:	
   170  0836  3441               	retlw	65	;'A'
   171  0837  3454               	retlw	84	;'T'
   172  0838  342B               	retlw	43	;'+'
   173  0839  3452               	retlw	82	;'R'
   174  083A  3453               	retlw	83	;'S'
   175  083B  3454               	retlw	84	;'T'
   176  083C  340D               	retlw	13
   177  083D  340A               	retlw	10
   178  083E  3400               	retlw	0
   179                           
   180                           	psect	cinit
   181  0D77                     start_initialization:	
   182  0D77  305C               	movlw	low __pbssBANK0
   183                           
   184                           ; Clear objects allocated to BITCOMMON
   185  0D78  01FA               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   186                           
   187                           ; Clear objects allocated to COMMON
   188  0D79  01FB               	clrf	__pbssCOMMON& (0+127)
   189  0D7A  01FC               	clrf	(__pbssCOMMON+1)& (0+127)
   190  0D7B  01FD               	clrf	(__pbssCOMMON+2)& (0+127)
   191                           
   192                           ; Clear objects allocated to BANK0
   193  0D7C  1383               	bcf	3,7	;select IRP bank0
   194  0D7D  0084               	movwf	4
   195  0D7E  3067               	movlw	low (__pbssBANK0+11)
   196  0D7F  158A  2477  158A   	fcall	clear_ram
   197                           
   198                           ; Clear objects allocated to BANK1
   199  0D82  30A0               	movlw	low __pbssBANK1
   200  0D83  0084               	movwf	4
   201  0D84  30E6               	movlw	low (__pbssBANK1+70)
   202  0D85  158A  2477  158A   	fcall	clear_ram
   203  0D88  3020               	movlw	low __pbssBANK2
   204                           
   205                           ; Clear objects allocated to BANK2
   206  0D89  1783               	bsf	3,7	;select IRP bank2
   207  0D8A  0084               	movwf	4
   208  0D8B  306F               	movlw	low (__pbssBANK2+79)
   209  0D8C  158A  2477         	fcall	clear_ram
   210                           
   211                           ;initializer for _startTime
   212  0D8E  30B0               	movlw	176
   213  0D8F  00D0               	movwf	__pdataBANK0& (0+127)
   214  0D90  30C3               	movlw	195
   215  0D91  00D1               	movwf	(__pdataBANK0+1)& (0+127)
   216  0D92  30CF               	movlw	207
   217  0D93  00D2               	movwf	(__pdataBANK0+2)& (0+127)
   218  0D94  3061               	movlw	97
   219  0D95  00D3               	movwf	(__pdataBANK0+3)& (0+127)
   220                           
   221                           ;initializer for _timeNow
   222  0D96  30B0               	movlw	176
   223  0D97  00D4               	movwf	(__pdataBANK0+4)& (0+127)
   224  0D98  30C3               	movlw	195
   225  0D99  00D5               	movwf	(__pdataBANK0+5)& (0+127)
   226  0D9A  30CF               	movlw	207
   227  0D9B  00D6               	movwf	(__pdataBANK0+6)& (0+127)
   228  0D9C  3061               	movlw	97
   229  0D9D  00D7               	movwf	(__pdataBANK0+7)& (0+127)
   230                           
   231                           ;initializer for _newTimer
   232  0D9E  3001               	movlw	1
   233  0D9F  00D8               	movwf	(__pdataBANK0+8)& (0+127)
   234  0DA0  01D9               	clrf	(__pdataBANK0+9)& (0+127)
   235                           
   236                           ;initializer for _timer
   237  0DA1  00DA               	movwf	(__pdataBANK0+10)& (0+127)
   238  0DA2  01DB               	clrf	(__pdataBANK0+11)& (0+127)
   239  0DA3                     end_of_initialization:	
   240                           ;End of C runtime variable initialization code
   241                           
   242  0DA3  0183               	clrf	3
   243  0DA4  158A  2F14         	ljmp	_main	;jump to C main() function
   244                           
   245                           	psect	bitbssCOMMON
   246  03D0                     __pbitbssCOMMON:	
   247  03D0                     _flagChangeName:	
   248  03D0                     	ds	1
   249  03D1                     _flagConection:	
   250  03D1                     	ds	1
   251  03D2                     _flagRespostaBLE:	
   252  03D2                     	ds	1
   253  03D3                     _flagRxBufferOk:	
   254  03D3                     	ds	1
   255  03D4                     _flagTryConnect:	
   256  03D4                     	ds	1
   257  03D5                     _logStatus:	
   258  03D5                     	ds	1
   259                           
   260                           	psect	bssCOMMON
   261  007B                     __pbssCOMMON:	
   262  007B                     _rxBufferLength:	
   263  007B                     	ds	1
   264  007C                     _rxBufferPos:	
   265  007C                     	ds	1
   266  007D                     _serialTimeOut:	
   267  007D                     	ds	1
   268                           
   269                           	psect	bssBANK0
   270  005C                     __pbssBANK0:	
   271  005C                     _contTimer:	
   272  005C                     	ds	2
   273  005E                     _numOfLogs:	
   274  005E                     	ds	2
   275  0060                     _bufferTxLen:	
   276  0060                     	ds	1
   277  0061                     _dataRX:	
   278  0061                     	ds	1
   279  0062                     _readTemperature:	
   280  0062                     	ds	1
   281  0063                     _readTemperatureDec:	
   282  0063                     	ds	1
   283  0064                     _readUmidity:	
   284  0064                     	ds	1
   285  0065                     _timeBlinkLed:	
   286  0065                     	ds	1
   287  0066                     _timeToConnect:	
   288  0066                     	ds	1
   289                           
   290                           	psect	dataBANK0
   291  0050                     __pdataBANK0:	
   292  0050                     _startTime:	
   293  0050                     	ds	4
   294  0054                     _timeNow:	
   295  0054                     	ds	4
   296  0058                     _newTimer:	
   297  0058                     	ds	2
   298  005A                     _timer:	
   299  005A                     	ds	2
   300                           
   301                           	psect	bssBANK1
   302  00A0                     __pbssBANK1:	
   303  00A0                     _bufferTx:	
   304  00A0                     	ds	40
   305  00C8                     _cmd:	
   306  00C8                     	ds	30
   307                           
   308                           	psect	bssBANK2
   309  0120                     __pbssBANK2:	
   310  0120                     _readDataBuffer:	
   311  0120                     	ds	30
   312  013E                     _rxBuffer:	
   313  013E                     	ds	30
   314  015C                     _deviceName:	
   315  015C                     	ds	19
   316                           
   317                           	psect	clrtext
   318  0C77                     clear_ram:	
   319                           ;	Called with FSR containing the base address, and
   320                           ;	W with the last address+1
   321                           
   322  0C77  0064               	clrwdt	;clear the watchdog before getting into this loop
   323  0C78                     clrloop:	
   324  0C78  0180               	clrf	0	;clear RAM location pointed to by FSR
   325  0C79  0A84               	incf	4,f	;increment pointer
   326  0C7A  0604               	xorwf	4,w	;XOR with final address
   327  0C7B  1903               	btfsc	3,2	;have we reached the end yet?
   328  0C7C  3400               	retlw	0	;all done for this memory range, return
   329  0C7D  0604               	xorwf	4,w	;XOR again to restore value
   330  0C7E  2C78               	goto	clrloop	;do the next byte
   331                           
   332                           	psect	cstackCOMMON
   333  0070                     __pcstackCOMMON:	
   334  0070                     ?_i2cStart:	
   335  0070                     ?_scl_out:	
   336                           ; 0 bytes @ 0x0
   337                           
   338  0070                     ?_sda_out:	
   339                           ; 0 bytes @ 0x0
   340                           
   341  0070                     ?_initGPIO:	
   342                           ; 0 bytes @ 0x0
   343                           
   344  0070                     ?_initInterrupt:	
   345                           ; 0 bytes @ 0x0
   346                           
   347  0070                     ?_initVars:	
   348                           ; 0 bytes @ 0x0
   349                           
   350  0070                     ?_jdyConfig:	
   351                           ; 0 bytes @ 0x0
   352                           
   353  0070                     ?_logSave:	
   354                           ; 0 bytes @ 0x0
   355                           
   356  0070                     ?_comandoRx:	
   357                           ; 0 bytes @ 0x0
   358                           
   359  0070                     ?_checksumVerify:	
   360                           ; 0 bytes @ 0x0
   361                           
   362  0070                     ?_resposta:	
   363                           ; 1 bit 
   364                           
   365  0070                     ?_initUART:	
   366                           ; 0 bytes @ 0x0
   367                           
   368  0070                     ?_UART_send_char:	
   369                           ; 0 bytes @ 0x0
   370                           
   371  0070                     ??_UART_get_char:	
   372                           ; 0 bytes @ 0x0
   373                           
   374  0070                     ?_bufferCreator2:	
   375                           ; 0 bytes @ 0x0
   376                           
   377  0070                     ?_getClockCmd:	
   378                           ; 0 bytes @ 0x0
   379                           
   380  0070                     ?_setTimerCmd:	
   381                           ; 0 bytes @ 0x0
   382                           
   383  0070                     ?_getTimerCmd:	
   384                           ; 0 bytes @ 0x0
   385                           
   386  0070                     ?_startLogCmd:	
   387                           ; 0 bytes @ 0x0
   388                           
   389  0070                     ?_stopLogCmd:	
   390                           ; 0 bytes @ 0x0
   391                           
   392  0070                     ?_readLogStatus:	
   393                           ; 0 bytes @ 0x0
   394                           
   395  0070                     ?_halfclockdelay:	
   396                           ; 0 bytes @ 0x0
   397                           
   398  0070                     ?_i2cRestart:	
   399                           ; 0 bytes @ 0x0
   400                           
   401  0070                     ?_i2cStop:	
   402                           ; 0 bytes @ 0x0
   403                           
   404  0070                     ?_i2cAck:	
   405                           ; 0 bytes @ 0x0
   406                           
   407  0070                     ?_i2cNack:	
   408                           ; 0 bytes @ 0x0
   409                           
   410  0070                     ?_initAht10:	
   411                           ; 0 bytes @ 0x0
   412                           
   413  0070                     ?_sendTriggerMeasurementCmd:	
   414                           ; 0 bytes @ 0x0
   415                           
   416  0070                     ?_isr:	
   417                           ; 0 bytes @ 0x0
   418                           
   419  0070                     ?_UART_get_char:	
   420                           ; 0 bytes @ 0x0
   421                           
   422  0070                     ?_i2cWrite:	
   423                           ; 1 bytes @ 0x0
   424                           
   425  0070                     ?_i2cRead:	
   426                           ; 1 bytes @ 0x0
   427                           
   428  0070                     ?_readTemp:	
   429                           ; 1 bytes @ 0x0
   430                           
   431  0070                     ?i1_memset:	
   432                           ; 1 bytes @ 0x0
   433                           
   434  0070                     i1memset@c:	
   435                           ; 1 bytes @ 0x0
   436                           
   437                           
   438                           ; 2 bytes @ 0x0
   439  0070                     	ds	2
   440  0072                     i1memset@n:	
   441                           
   442                           ; 2 bytes @ 0x2
   443  0072                     	ds	2
   444  0074                     ??i1_memset:	
   445  0074                     i1memset@p1:	
   446                           ; 0 bytes @ 0x4
   447                           
   448                           
   449                           ; 1 bytes @ 0x4
   450  0074                     	ds	1
   451  0075                     i1memset@p:	
   452                           
   453                           ; 1 bytes @ 0x5
   454  0075                     	ds	1
   455  0076                     ??_bufferCreator2:	
   456  0076                     bufferCreator2@ch:	
   457                           ; 0 bytes @ 0x6
   458                           
   459                           
   460                           ; 1 bytes @ 0x6
   461  0076                     	ds	1
   462  0077                     ??_isr:	
   463                           
   464                           ; 0 bytes @ 0x7
   465  0077                     	ds	3
   466                           
   467                           	psect	cstackBANK0
   468  0020                     __pcstackBANK0:	
   469  0020                     ??_initGPIO:	
   470  0020                     ??_initInterrupt:	
   471                           ; 0 bytes @ 0x0
   472                           
   473  0020                     ??_checksumVerify:	
   474                           ; 0 bytes @ 0x0
   475                           
   476  0020                     ??_initUART:	
   477                           ; 0 bytes @ 0x0
   478                           
   479  0020                     ??_UART_send_char:	
   480                           ; 0 bytes @ 0x0
   481                           
   482  0020                     ?_i2cInitialize:	
   483                           ; 0 bytes @ 0x0
   484                           
   485  0020                     ??_halfclockdelay:	
   486                           ; 0 bytes @ 0x0
   487                           
   488  0020                     ?_memset:	
   489                           ; 0 bytes @ 0x0
   490                           
   491  0020                     ?_checksumCalc:	
   492                           ; 1 bytes @ 0x0
   493                           
   494  0020                     ?_memcpy:	
   495                           ; 1 bytes @ 0x0
   496                           
   497  0020                     ?___wmul:	
   498                           ; 1 bytes @ 0x0
   499                           
   500  0020                     ?___lmul:	
   501                           ; 2 bytes @ 0x0
   502                           
   503  0020                     ?___lldiv:	
   504                           ; 4 bytes @ 0x0
   505                           
   506  0020                     UART_send_char@ch:	
   507                           ; 4 bytes @ 0x0
   508                           
   509  0020                     checksumCalc@len:	
   510                           ; 1 bytes @ 0x0
   511                           
   512  0020                     memcpy@s1:	
   513                           ; 1 bytes @ 0x0
   514                           
   515  0020                     memset@c:	
   516                           ; 1 bytes @ 0x0
   517                           
   518  0020                     ___wmul@multiplier:	
   519                           ; 2 bytes @ 0x0
   520                           
   521  0020                     i2cInitialize@feq_K:	
   522                           ; 2 bytes @ 0x0
   523                           
   524  0020                     ___lmul@multiplier:	
   525                           ; 4 bytes @ 0x0
   526                           
   527  0020                     ___lldiv@divisor:	
   528                           ; 4 bytes @ 0x0
   529                           
   530                           
   531                           ; 4 bytes @ 0x0
   532  0020                     	ds	1
   533  0021                     ??_checksumCalc:	
   534  0021                     ??_resposta:	
   535                           ; 0 bytes @ 0x1
   536                           
   537  0021                     ?_UART_send_String:	
   538                           ; 0 bytes @ 0x1
   539                           
   540  0021                     halfclockdelay@downcount:	
   541                           ; 0 bytes @ 0x1
   542                           
   543  0021                     resposta@i:	
   544                           ; 1 bytes @ 0x1
   545                           
   546  0021                     UART_send_String@ch:	
   547                           ; 1 bytes @ 0x1
   548                           
   549  0021                     memcpy@n:	
   550                           ; 2 bytes @ 0x1
   551                           
   552                           
   553                           ; 2 bytes @ 0x1
   554  0021                     	ds	1
   555  0022                     ??_scl_out:	
   556  0022                     ??_sda_out:	
   557                           ; 0 bytes @ 0x2
   558                           
   559  0022                     scl_out@value:	
   560                           ; 0 bytes @ 0x2
   561                           
   562  0022                     sda_out@value:	
   563                           ; 1 bytes @ 0x2
   564                           
   565  0022                     checksumVerify@checksum:	
   566                           ; 1 bytes @ 0x2
   567                           
   568  0022                     memset@n:	
   569                           ; 1 bytes @ 0x2
   570                           
   571  0022                     ___wmul@multiplicand:	
   572                           ; 2 bytes @ 0x2
   573                           
   574                           
   575                           ; 2 bytes @ 0x2
   576  0022                     	ds	1
   577  0023                     ??_i2cStart:	
   578  0023                     ??_memcpy:	
   579                           ; 0 bytes @ 0x3
   580                           
   581  0023                     ??_i2cRestart:	
   582                           ; 0 bytes @ 0x3
   583                           
   584  0023                     ??_i2cStop:	
   585                           ; 0 bytes @ 0x3
   586                           
   587  0023                     ??_i2cWrite:	
   588                           ; 0 bytes @ 0x3
   589                           
   590  0023                     ??_i2cRead:	
   591                           ; 0 bytes @ 0x3
   592                           
   593  0023                     ??_i2cAck:	
   594                           ; 0 bytes @ 0x3
   595                           
   596  0023                     ??_i2cNack:	
   597                           ; 0 bytes @ 0x3
   598                           
   599  0023                     UART_send_String@lenth:	
   600                           ; 0 bytes @ 0x3
   601                           
   602  0023                     i2cWrite@data:	
   603                           ; 1 bytes @ 0x3
   604                           
   605  0023                     i2cRead@read_data:	
   606                           ; 1 bytes @ 0x3
   607                           
   608  0023                     checksumVerify@len:	
   609                           ; 1 bytes @ 0x3
   610                           
   611  0023                     checksumCalc@buffer:	
   612                           ; 1 bytes @ 0x3
   613                           
   614                           
   615                           ; 1 bytes @ 0x3
   616  0023                     	ds	1
   617  0024                     ??_memset:	
   618  0024                     ??_UART_send_String:	
   619                           ; 0 bytes @ 0x4
   620                           
   621  0024                     ??_i2cInitialize:	
   622                           ; 0 bytes @ 0x4
   623                           
   624  0024                     ??___wmul:	
   625                           ; 0 bytes @ 0x4
   626                           
   627  0024                     UART_send_String@i:	
   628                           ; 0 bytes @ 0x4
   629                           
   630  0024                     i2cWrite@ack:	
   631                           ; 1 bytes @ 0x4
   632                           
   633  0024                     i2cRead@x:	
   634                           ; 1 bytes @ 0x4
   635                           
   636  0024                     checksumVerify@i:	
   637                           ; 1 bytes @ 0x4
   638                           
   639  0024                     checksumCalc@chk:	
   640                           ; 1 bytes @ 0x4
   641                           
   642  0024                     memcpy@d1:	
   643                           ; 1 bytes @ 0x4
   644                           
   645  0024                     memset@p1:	
   646                           ; 1 bytes @ 0x4
   647                           
   648  0024                     ___wmul@product:	
   649                           ; 1 bytes @ 0x4
   650                           
   651  0024                     ___lmul@multiplicand:	
   652                           ; 2 bytes @ 0x4
   653                           
   654  0024                     ___lldiv@dividend:	
   655                           ; 4 bytes @ 0x4
   656                           
   657                           
   658                           ; 4 bytes @ 0x4
   659  0024                     	ds	1
   660  0025                     ??_jdyConfig:	
   661  0025                     i2cWrite@x:	
   662                           ; 0 bytes @ 0x5
   663                           
   664  0025                     checksumCalc@i:	
   665                           ; 1 bytes @ 0x5
   666                           
   667  0025                     memcpy@d:	
   668                           ; 1 bytes @ 0x5
   669                           
   670  0025                     memset@p:	
   671                           ; 1 bytes @ 0x5
   672                           
   673                           
   674                           ; 1 bytes @ 0x5
   675  0025                     	ds	1
   676  0026                     ?_eepromWriteByte:	
   677  0026                     ?_eepromReadLog:	
   678                           ; 0 bytes @ 0x6
   679                           
   680  0026                     ??_getClockCmd:	
   681                           ; 0 bytes @ 0x6
   682                           
   683  0026                     ??_setTimerCmd:	
   684                           ; 0 bytes @ 0x6
   685                           
   686  0026                     ??_getTimerCmd:	
   687                           ; 0 bytes @ 0x6
   688                           
   689  0026                     ??_stopLogCmd:	
   690                           ; 0 bytes @ 0x6
   691                           
   692  0026                     ??_readLogStatus:	
   693                           ; 0 bytes @ 0x6
   694                           
   695  0026                     ?_eepromReadLogPage:	
   696                           ; 0 bytes @ 0x6
   697                           
   698  0026                     ??_initAht10:	
   699                           ; 0 bytes @ 0x6
   700                           
   701  0026                     ??_sendTriggerMeasurementCmd:	
   702                           ; 0 bytes @ 0x6
   703                           
   704  0026                     ?_eepromReadByte:	
   705                           ; 0 bytes @ 0x6
   706                           
   707  0026                     memcpy@s:	
   708                           ; 1 bytes @ 0x6
   709                           
   710  0026                     eepromReadByte@addr:	
   711                           ; 1 bytes @ 0x6
   712                           
   713  0026                     eepromWriteByte@addr:	
   714                           ; 2 bytes @ 0x6
   715                           
   716  0026                     eepromReadLog@addr:	
   717                           ; 2 bytes @ 0x6
   718                           
   719  0026                     eepromReadLogPage@addr:	
   720                           ; 2 bytes @ 0x6
   721                           
   722                           
   723                           ; 2 bytes @ 0x6
   724  0026                     	ds	2
   725  0028                     ??_eepromReadByte:	
   726  0028                     ??___lmul:	
   727                           ; 0 bytes @ 0x8
   728                           
   729  0028                     ??___lldiv:	
   730                           ; 0 bytes @ 0x8
   731                           
   732  0028                     eepromReadByte@buff:	
   733                           ; 0 bytes @ 0x8
   734                           
   735  0028                     eepromWriteByte@data:	
   736                           ; 1 bytes @ 0x8
   737                           
   738  0028                     eepromReadLog@buff:	
   739                           ; 1 bytes @ 0x8
   740                           
   741  0028                     eepromReadLogPage@buff:	
   742                           ; 1 bytes @ 0x8
   743                           
   744  0028                     ___lmul@product:	
   745                           ; 1 bytes @ 0x8
   746                           
   747  0028                     ___lldiv@quotient:	
   748                           ; 4 bytes @ 0x8
   749                           
   750                           
   751                           ; 4 bytes @ 0x8
   752  0028                     	ds	1
   753  0029                     ??_eepromWriteByte:	
   754  0029                     ??_eepromReadLog:	
   755                           ; 0 bytes @ 0x9
   756                           
   757  0029                     ??_initVars:	
   758                           ; 0 bytes @ 0x9
   759                           
   760  0029                     ??_startLogCmd:	
   761                           ; 0 bytes @ 0x9
   762                           
   763  0029                     ??_eepromReadLogPage:	
   764                           ; 0 bytes @ 0x9
   765                           
   766                           
   767                           ; 0 bytes @ 0x9
   768  0029                     	ds	1
   769  002A                     eepromReadLogPage@i:	
   770                           
   771                           ; 2 bytes @ 0xA
   772  002A                     	ds	2
   773  002C                     ??_comandoRx:	
   774  002C                     ___lldiv@counter:	
   775                           ; 0 bytes @ 0xC
   776                           
   777                           
   778                           ; 1 bytes @ 0xC
   779  002C                     	ds	1
   780  002D                     ?___llmod:	
   781  002D                     comandoRx@readData:	
   782                           ; 4 bytes @ 0xD
   783                           
   784  002D                     ___llmod@divisor:	
   785                           ; 3 bytes @ 0xD
   786                           
   787                           
   788                           ; 4 bytes @ 0xD
   789  002D                     	ds	3
   790  0030                     comandoRx@readData_6108:	
   791                           
   792                           ; 3 bytes @ 0x10
   793  0030                     	ds	1
   794  0031                     ___llmod@dividend:	
   795                           
   796                           ; 4 bytes @ 0x11
   797  0031                     	ds	2
   798  0033                     comandoRx@i_6106:	
   799                           
   800                           ; 2 bytes @ 0x13
   801  0033                     	ds	2
   802  0035                     ??___llmod:	
   803  0035                     ___llmod@counter:	
   804                           ; 0 bytes @ 0x15
   805                           
   806  0035                     comandoRx@numOfBytes:	
   807                           ; 1 bytes @ 0x15
   808                           
   809                           
   810                           ; 4 bytes @ 0x15
   811  0035                     	ds	1
   812  0036                     ??_readTemp:	
   813                           
   814                           ; 0 bytes @ 0x16
   815  0036                     	ds	3
   816  0039                     comandoRx@i_6109:	
   817                           
   818                           ; 2 bytes @ 0x19
   819  0039                     	ds	1
   820  003A                     readTemp@buff:	
   821                           
   822                           ; 6 bytes @ 0x1A
   823  003A                     	ds	1
   824  003B                     comandoRx@i:	
   825                           
   826                           ; 1 bytes @ 0x1B
   827  003B                     	ds	1
   828  003C                     comandoRx@chk:	
   829                           
   830                           ; 1 bytes @ 0x1C
   831  003C                     	ds	1
   832  003D                     comandoRx@logsToSend:	
   833                           
   834                           ; 2 bytes @ 0x1D
   835  003D                     	ds	3
   836  0040                     readTemp@aux2:	
   837                           
   838                           ; 1 bytes @ 0x20
   839  0040                     	ds	1
   840  0041                     readTemp@aux:	
   841                           
   842                           ; 4 bytes @ 0x21
   843  0041                     	ds	4
   844  0045                     ??_logSave:	
   845                           
   846                           ; 0 bytes @ 0x25
   847  0045                     	ds	2
   848  0047                     logSave@auxAddr:	
   849                           
   850                           ; 2 bytes @ 0x27
   851  0047                     	ds	2
   852  0049                     ?_main:	
   853  0049                     main@argc:	
   854                           ; 2 bytes @ 0x29
   855                           
   856                           
   857                           ; 2 bytes @ 0x29
   858  0049                     	ds	2
   859  004B                     main@argv:	
   860                           
   861                           ; 2 bytes @ 0x2B
   862  004B                     	ds	2
   863  004D                     ??_main:	
   864                           
   865                           ; 0 bytes @ 0x2D
   866  004D                     	ds	3
   867                           
   868                           	psect	maintext
   869  0F14                     __pmaintext:	
   870 ;;Data sizes: Strings 47, constant 0, data 12, bss 163, persistent 0 stack 0
   871 ;;Auto spaces:   Size  Autos    Used
   872 ;; COMMON          14     10      14
   873 ;; BANK0           80     48      71
   874 ;; BANK1           80      0      70
   875 ;; BANK2           80      0      79
   876 ;;
   877 ;; Pointer list with targets:
   878 ;; ?i1_memset	PTR void  size(1) Largest target is 30
   879 ;;		 -> rxBuffer(BANK2[30]), 
   880 ;;
   881 ;; i1memset@p1	PTR void  size(1) Largest target is 30
   882 ;;		 -> rxBuffer(BANK2[30]), 
   883 ;;
   884 ;; sp_i1_memset	PTR void  size(1) Largest target is 30
   885 ;;		 -> rxBuffer(BANK2[30]), 
   886 ;;
   887 ;; ?_memcpy	PTR void  size(1) Largest target is 30
   888 ;;		 -> cmd(BANK1[30]), 
   889 ;;
   890 ;; ?___llmod	unsigned long  size(1) Largest target is 0
   891 ;;
   892 ;; ?___lldiv	unsigned long  size(1) Largest target is 0
   893 ;;
   894 ;; ?___lmul	unsigned long  size(1) Largest target is 0
   895 ;;
   896 ;; ?___wmul	unsigned int  size(1) Largest target is 0
   897 ;;
   898 ;; ?_memset	PTR void  size(1) Largest target is 30
   899 ;;		 -> rxBuffer(BANK2[30]), 
   900 ;;
   901 ;; memset@p1	PTR void  size(1) Largest target is 30
   902 ;;		 -> rxBuffer(BANK2[30]), 
   903 ;;
   904 ;; memset@p	PTR unsigned char  size(1) Largest target is 30
   905 ;;		 -> rxBuffer(BANK2[30]), 
   906 ;;
   907 ;; memcpy@d1	PTR void  size(1) Largest target is 30
   908 ;;		 -> cmd(BANK1[30]), 
   909 ;;
   910 ;; memcpy@d	PTR unsigned char  size(1) Largest target is 30
   911 ;;		 -> cmd(BANK1[30]), 
   912 ;;
   913 ;; memcpy@s1	PTR const void  size(1) Largest target is 30
   914 ;;		 -> rxBuffer(BANK2[30]), 
   915 ;;
   916 ;; memcpy@s	PTR const unsigned char  size(1) Largest target is 30
   917 ;;		 -> rxBuffer(BANK2[30]), 
   918 ;;
   919 ;; checksumCalc@buffer	PTR unsigned char  size(1) Largest target is 40
   920 ;;		 -> bufferTx(BANK1[40]), 
   921 ;;
   922 ;; sp__memcpy	PTR void  size(1) Largest target is 30
   923 ;;		 -> cmd(BANK1[30]), 
   924 ;;
   925 ;; eepromReadLogPage@buff	PTR unsigned char  size(1) Largest target is 30
   926 ;;		 -> readDataBuffer(BANK2[30]), 
   927 ;;
   928 ;; eepromReadLog@buff	PTR unsigned char  size(1) Largest target is 3
   929 ;;		 -> comandoRx@readData_6108(BANK0[3]), comandoRx@readData(BANK0[3]), readLogData@readData(COMMON[3]), 
   930 ;;
   931 ;; sp__memset	PTR void  size(1) Largest target is 30
   932 ;;		 -> rxBuffer(BANK2[30]), 
   933 ;;
   934 ;; UART_send_String@ch	PTR unsigned char  size(2) Largest target is 19
   935 ;;		 -> STR_4(CODE[9]), STR_3(CODE[14]), STR_2(CODE[12]), STR_1(CODE[12]), 
   936 ;;		 -> deviceName(BANK2[19]), 
   937 ;;
   938 ;;
   939 ;; Critical Paths under _main in COMMON
   940 ;;
   941 ;;   None.
   942 ;;
   943 ;; Critical Paths under _isr in COMMON
   944 ;;
   945 ;;   _isr->_bufferCreator2
   946 ;;   _bufferCreator2->i1_memset
   947 ;;
   948 ;; Critical Paths under _main in BANK0
   949 ;;
   950 ;;   _main->_logSave
   951 ;;   _comandoRx->_eepromReadLogPage
   952 ;;   _initVars->_eepromReadByte
   953 ;;   _logSave->_readTemp
   954 ;;   _eepromReadLogPage->_i2cWrite
   955 ;;   _eepromReadByte->_i2cWrite
   956 ;;   _eepromReadLog->_i2cWrite
   957 ;;   _startLogCmd->_eepromWriteByte
   958 ;;   _readTemp->___llmod
   959 ;;   _sendTriggerMeasurementCmd->_i2cWrite
   960 ;;   _initAht10->_i2cWrite
   961 ;;   _eepromWriteByte->_i2cWrite
   962 ;;   _jdyConfig->_UART_send_String
   963 ;;   _i2cNack->_sda_out
   964 ;;   _i2cNack->_scl_out
   965 ;;   _i2cAck->_sda_out
   966 ;;   _i2cAck->_scl_out
   967 ;;   _i2cRead->_scl_out
   968 ;;   _i2cWrite->_sda_out
   969 ;;   _i2cWrite->_scl_out
   970 ;;   _i2cStop->_sda_out
   971 ;;   _i2cStop->_scl_out
   972 ;;   _i2cStart->_scl_out
   973 ;;   _i2cStart->_sda_out
   974 ;;   _resposta->_UART_send_char
   975 ;;   _sda_out->_halfclockdelay
   976 ;;   _scl_out->_halfclockdelay
   977 ;;   _readLogStatus->_checksumCalc
   978 ;;   _stopLogCmd->_checksumCalc
   979 ;;   _getTimerCmd->_checksumCalc
   980 ;;   _setTimerCmd->_checksumCalc
   981 ;;   _getClockCmd->_checksumCalc
   982 ;;   _UART_send_String->_UART_send_char
   983 ;;   ___llmod->___lldiv
   984 ;;
   985 ;; Critical Paths under _isr in BANK0
   986 ;;
   987 ;;   None.
   988 ;;
   989 ;; Critical Paths under _main in BANK1
   990 ;;
   991 ;;   None.
   992 ;;
   993 ;; Critical Paths under _isr in BANK1
   994 ;;
   995 ;;   None.
   996 ;;
   997 ;; Critical Paths under _main in BANK2
   998 ;;
   999 ;;   None.
  1000 ;;
  1001 ;; Critical Paths under _isr in BANK2
  1002 ;;
  1003 ;;   None.
  1004 ;;
  1005 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
  1006 ;;
  1007 ;;
  1008 ;;Call Graph Tables:
  1009 ;;
  1010 ;; ---------------------------------------------------------------------------------
  1011 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
  1012 ;; ---------------------------------------------------------------------------------
  1013 ;; (0) _main                                                 7     3      4   11363
  1014 ;;                                             41 BANK0      7     3      4
  1015 ;;                           _initGPIO
  1016 ;;                           _initUART
  1017 ;;                      _i2cInitialize
  1018 ;;                      _initInterrupt
  1019 ;;                           _initVars
  1020 ;;                          _initAht10
  1021 ;;                          _jdyConfig
  1022 ;;                             _memset
  1023 ;;                            _logSave
  1024 ;;                          _comandoRx
  1025 ;;                   _UART_send_String
  1026 ;; ---------------------------------------------------------------------------------
  1027 ;; (1) _comandoRx                                           19    19      0    5544
  1028 ;;                                             12 BANK0     19    19      0
  1029 ;;                     _checksumVerify
  1030 ;;                             _memcpy
  1031 ;;                       _checksumCalc
  1032 ;;                           _resposta
  1033 ;;                        _getClockCmd
  1034 ;;                        _setTimerCmd
  1035 ;;                        _getTimerCmd
  1036 ;;                        _startLogCmd
  1037 ;;                         _stopLogCmd
  1038 ;;                      _readLogStatus
  1039 ;;                             ___wmul
  1040 ;;                      _eepromReadLog
  1041 ;;                  _eepromReadLogPage
  1042 ;;                     _UART_send_char
  1043 ;; ---------------------------------------------------------------------------------
  1044 ;; (1) _initVars                                             2     2      0    1231
  1045 ;;                                              9 BANK0      2     2      0
  1046 ;;                     _eepromReadByte
  1047 ;; ---------------------------------------------------------------------------------
  1048 ;; (1) _logSave                                              4     4      0    3672
  1049 ;;                                             37 BANK0      4     4      0
  1050 ;;                             ___wmul
  1051 ;;          _sendTriggerMeasurementCmd
  1052 ;;                           _readTemp
  1053 ;;                    _eepromWriteByte
  1054 ;; ---------------------------------------------------------------------------------
  1055 ;; (2) _eepromReadLogPage                                    6     3      3    1502
  1056 ;;                                              6 BANK0      6     3      3
  1057 ;;                           _i2cStart
  1058 ;;                           _i2cWrite
  1059 ;;                         _i2cRestart
  1060 ;;                            _i2cRead
  1061 ;;                             _i2cAck
  1062 ;;                            _i2cNack
  1063 ;;                            _i2cStop
  1064 ;; ---------------------------------------------------------------------------------
  1065 ;; (2) _eepromReadByte                                       3     1      2    1231
  1066 ;;                                              6 BANK0      3     1      2
  1067 ;;                           _i2cStart
  1068 ;;                           _i2cWrite
  1069 ;;                         _i2cRestart
  1070 ;;                            _i2cRead
  1071 ;;                            _i2cNack
  1072 ;;                            _i2cStop
  1073 ;; ---------------------------------------------------------------------------------
  1074 ;; (2) _eepromReadLog                                        3     0      3    1456
  1075 ;;                                              6 BANK0      3     0      3
  1076 ;;                           _i2cStart
  1077 ;;                           _i2cWrite
  1078 ;;                         _i2cRestart
  1079 ;;                            _i2cRead
  1080 ;;                             _i2cAck
  1081 ;;                            _i2cNack
  1082 ;;                            _i2cStop
  1083 ;; ---------------------------------------------------------------------------------
  1084 ;; (2) _startLogCmd                                          2     2      0     818
  1085 ;;                                              9 BANK0      2     2      0
  1086 ;;                    _eepromWriteByte
  1087 ;;                       _checksumCalc
  1088 ;; ---------------------------------------------------------------------------------
  1089 ;; (2) _readTemp                                            15    15      0    2168
  1090 ;;                                             22 BANK0     15    15      0
  1091 ;;                           _i2cStart
  1092 ;;                           _i2cWrite
  1093 ;;                            _i2cRead
  1094 ;;                            _i2cNack
  1095 ;;                            _i2cStop
  1096 ;;                             _i2cAck
  1097 ;;                             ___lmul
  1098 ;;                            ___lldiv
  1099 ;;                            ___llmod
  1100 ;; ---------------------------------------------------------------------------------
  1101 ;; (2) _sendTriggerMeasurementCmd                            0     0      0     638
  1102 ;;                           _i2cStart
  1103 ;;                           _i2cWrite
  1104 ;;                            _i2cStop
  1105 ;; ---------------------------------------------------------------------------------
  1106 ;; (1) _initAht10                                            0     0      0     638
  1107 ;;                           _i2cStart
  1108 ;;                           _i2cWrite
  1109 ;;                            _i2cStop
  1110 ;; ---------------------------------------------------------------------------------
  1111 ;; (3) _i2cRestart                                           0     0      0     182
  1112 ;;                           _i2cStart
  1113 ;; ---------------------------------------------------------------------------------
  1114 ;; (3) _eepromWriteByte                                      3     0      3     704
  1115 ;;                                              6 BANK0      3     0      3
  1116 ;;                           _i2cStart
  1117 ;;                           _i2cWrite
  1118 ;;                            _i2cStop
  1119 ;; ---------------------------------------------------------------------------------
  1120 ;; (1) _jdyConfig                                            3     3      0      91
  1121 ;;                                              5 BANK0      3     3      0
  1122 ;;                   _UART_send_String
  1123 ;; ---------------------------------------------------------------------------------
  1124 ;; (3) _i2cNack                                              0     0      0     182
  1125 ;;                            _sda_out
  1126 ;;                            _scl_out
  1127 ;; ---------------------------------------------------------------------------------
  1128 ;; (3) _i2cAck                                               0     0      0     182
  1129 ;;                            _sda_out
  1130 ;;                            _scl_out
  1131 ;; ---------------------------------------------------------------------------------
  1132 ;; (3) _i2cRead                                              2     2      0     162
  1133 ;;                                              3 BANK0      2     2      0
  1134 ;;                            _scl_out
  1135 ;; ---------------------------------------------------------------------------------
  1136 ;; (3) _i2cWrite                                             3     3      0     274
  1137 ;;                                              3 BANK0      3     3      0
  1138 ;;                            _sda_out
  1139 ;;                            _scl_out
  1140 ;; ---------------------------------------------------------------------------------
  1141 ;; (3) _i2cStop                                              0     0      0     182
  1142 ;;                            _sda_out
  1143 ;;                            _scl_out
  1144 ;; ---------------------------------------------------------------------------------
  1145 ;; (4) _i2cStart                                             0     0      0     182
  1146 ;;                            _scl_out
  1147 ;;                            _sda_out
  1148 ;; ---------------------------------------------------------------------------------
  1149 ;; (2) _resposta                                             1     1      0      68
  1150 ;;                                              1 BANK0      1     1      0
  1151 ;;                     _UART_send_char
  1152 ;; ---------------------------------------------------------------------------------
  1153 ;; (4) _sda_out                                              1     1      0      91
  1154 ;;                                              2 BANK0      1     1      0
  1155 ;;                     _halfclockdelay
  1156 ;; ---------------------------------------------------------------------------------
  1157 ;; (4) _scl_out                                              1     1      0      91
  1158 ;;                                              2 BANK0      1     1      0
  1159 ;;                     _halfclockdelay
  1160 ;; ---------------------------------------------------------------------------------
  1161 ;; (2) _readLogStatus                                        0     0      0     114
  1162 ;;                       _checksumCalc
  1163 ;; ---------------------------------------------------------------------------------
  1164 ;; (2) _stopLogCmd                                           0     0      0     114
  1165 ;;                       _checksumCalc
  1166 ;; ---------------------------------------------------------------------------------
  1167 ;; (2) _getTimerCmd                                          0     0      0     114
  1168 ;;                       _checksumCalc
  1169 ;; ---------------------------------------------------------------------------------
  1170 ;; (2) _setTimerCmd                                          0     0      0     114
  1171 ;;                       _checksumCalc
  1172 ;; ---------------------------------------------------------------------------------
  1173 ;; (2) _getClockCmd                                          2     2      0     114
  1174 ;;                                              6 BANK0      2     2      0
  1175 ;;                       _checksumCalc
  1176 ;; ---------------------------------------------------------------------------------
  1177 ;; (1) _UART_send_String                                     4     1      3      91
  1178 ;;                                              1 BANK0      4     1      3
  1179 ;;                     _UART_send_char
  1180 ;; ---------------------------------------------------------------------------------
  1181 ;; (3) ___lldiv                                             13     5      8     162
  1182 ;;                                              0 BANK0     13     5      8
  1183 ;; ---------------------------------------------------------------------------------
  1184 ;; (3) ___llmod                                              9     1      8     159
  1185 ;;                                             13 BANK0      9     1      8
  1186 ;;                            ___lldiv (ARG)
  1187 ;; ---------------------------------------------------------------------------------
  1188 ;; (3) ___lmul                                              12     4      8      92
  1189 ;;                                              0 BANK0     12     4      8
  1190 ;; ---------------------------------------------------------------------------------
  1191 ;; (2) ___wmul                                               6     2      4      92
  1192 ;;                                              0 BANK0      6     2      4
  1193 ;; ---------------------------------------------------------------------------------
  1194 ;; (2) _memcpy                                               7     4      3     120
  1195 ;;                                              0 BANK0      7     4      3
  1196 ;; ---------------------------------------------------------------------------------
  1197 ;; (2) _checksumVerify                                       5     5      0     115
  1198 ;;                                              0 BANK0      5     5      0
  1199 ;; ---------------------------------------------------------------------------------
  1200 ;; (1) _initInterrupt                                        0     0      0       0
  1201 ;; ---------------------------------------------------------------------------------
  1202 ;; (1) _initGPIO                                             0     0      0       0
  1203 ;; ---------------------------------------------------------------------------------
  1204 ;; (5) _halfclockdelay                                       2     2      0      69
  1205 ;;                                              0 BANK0      2     2      0
  1206 ;; ---------------------------------------------------------------------------------
  1207 ;; (1) _i2cInitialize                                        4     0      4       0
  1208 ;;                                              0 BANK0      4     0      4
  1209 ;; ---------------------------------------------------------------------------------
  1210 ;; (3) _checksumCalc                                         6     5      1     114
  1211 ;;                                              0 BANK0      6     5      1
  1212 ;; ---------------------------------------------------------------------------------
  1213 ;; (1) _memset                                               6     2      4      96
  1214 ;;                                              0 BANK0      6     2      4
  1215 ;; ---------------------------------------------------------------------------------
  1216 ;; (2) _UART_send_char                                       1     1      0      22
  1217 ;;                                              0 BANK0      1     1      0
  1218 ;; ---------------------------------------------------------------------------------
  1219 ;; (1) _initUART                                             0     0      0       0
  1220 ;; ---------------------------------------------------------------------------------
  1221 ;; Estimated maximum stack depth 5
  1222 ;; ---------------------------------------------------------------------------------
  1223 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
  1224 ;; ---------------------------------------------------------------------------------
  1225 ;; (7) _isr                                                  3     3      0     658
  1226 ;;                                              7 COMMON     3     3      0
  1227 ;;                      _UART_get_char
  1228 ;;                     _bufferCreator2
  1229 ;;                           i1_memset
  1230 ;; ---------------------------------------------------------------------------------
  1231 ;; (8) _bufferCreator2                                       1     1      0     340
  1232 ;;                                              6 COMMON     1     1      0
  1233 ;;                           i1_memset
  1234 ;; ---------------------------------------------------------------------------------
  1235 ;; (8) i1_memset                                             6     2      4     318
  1236 ;;                                              0 COMMON     6     2      4
  1237 ;; ---------------------------------------------------------------------------------
  1238 ;; (8) _UART_get_char                                        0     0      0       0
  1239 ;; ---------------------------------------------------------------------------------
  1240 ;; Estimated maximum stack depth 8
  1241 ;; ---------------------------------------------------------------------------------
  1242 ;; Call Graph Graphs:
  1243 ;; _main (ROOT)
  1244 ;;   _initGPIO
  1245 ;;   _initUART
  1246 ;;   _i2cInitialize
  1247 ;;   _initInterrupt
  1248 ;;   _initVars
  1249 ;;     _eepromReadByte
  1250 ;;       _i2cStart
  1251 ;;         _scl_out
  1252 ;;           _halfclockdelay
  1253 ;;         _sda_out
  1254 ;;           _halfclockdelay
  1255 ;;       _i2cWrite
  1256 ;;         _sda_out
  1257 ;;           _halfclockdelay
  1258 ;;         _scl_out
  1259 ;;           _halfclockdelay
  1260 ;;       _i2cRestart
  1261 ;;         _i2cStart
  1262 ;;           _scl_out
  1263 ;;             _halfclockdelay
  1264 ;;           _sda_out
  1265 ;;             _halfclockdelay
  1266 ;;       _i2cRead
  1267 ;;         _scl_out
  1268 ;;           _halfclockdelay
  1269 ;;       _i2cNack
  1270 ;;         _sda_out
  1271 ;;           _halfclockdelay
  1272 ;;         _scl_out
  1273 ;;           _halfclockdelay
  1274 ;;       _i2cStop
  1275 ;;         _sda_out
  1276 ;;           _halfclockdelay
  1277 ;;         _scl_out
  1278 ;;           _halfclockdelay
  1279 ;;   _initAht10
  1280 ;;     _i2cStart
  1281 ;;       _scl_out
  1282 ;;         _halfclockdelay
  1283 ;;       _sda_out
  1284 ;;         _halfclockdelay
  1285 ;;     _i2cWrite
  1286 ;;       _sda_out
  1287 ;;         _halfclockdelay
  1288 ;;       _scl_out
  1289 ;;         _halfclockdelay
  1290 ;;     _i2cStop
  1291 ;;       _sda_out
  1292 ;;         _halfclockdelay
  1293 ;;       _scl_out
  1294 ;;         _halfclockdelay
  1295 ;;   _jdyConfig
  1296 ;;     _UART_send_String
  1297 ;;       _UART_send_char
  1298 ;;   _memset
  1299 ;;   _logSave
  1300 ;;     ___wmul
  1301 ;;     _sendTriggerMeasurementCmd
  1302 ;;       _i2cStart
  1303 ;;         _scl_out
  1304 ;;           _halfclockdelay
  1305 ;;         _sda_out
  1306 ;;           _halfclockdelay
  1307 ;;       _i2cWrite
  1308 ;;         _sda_out
  1309 ;;           _halfclockdelay
  1310 ;;         _scl_out
  1311 ;;           _halfclockdelay
  1312 ;;       _i2cStop
  1313 ;;         _sda_out
  1314 ;;           _halfclockdelay
  1315 ;;         _scl_out
  1316 ;;           _halfclockdelay
  1317 ;;     _readTemp
  1318 ;;       _i2cStart
  1319 ;;         _scl_out
  1320 ;;           _halfclockdelay
  1321 ;;         _sda_out
  1322 ;;           _halfclockdelay
  1323 ;;       _i2cWrite
  1324 ;;         _sda_out
  1325 ;;           _halfclockdelay
  1326 ;;         _scl_out
  1327 ;;           _halfclockdelay
  1328 ;;       _i2cRead
  1329 ;;         _scl_out
  1330 ;;           _halfclockdelay
  1331 ;;       _i2cNack
  1332 ;;         _sda_out
  1333 ;;           _halfclockdelay
  1334 ;;         _scl_out
  1335 ;;           _halfclockdelay
  1336 ;;       _i2cStop
  1337 ;;         _sda_out
  1338 ;;           _halfclockdelay
  1339 ;;         _scl_out
  1340 ;;           _halfclockdelay
  1341 ;;       _i2cAck
  1342 ;;         _sda_out
  1343 ;;           _halfclockdelay
  1344 ;;         _scl_out
  1345 ;;           _halfclockdelay
  1346 ;;       ___lmul
  1347 ;;       ___lldiv
  1348 ;;       ___llmod
  1349 ;;         ___lldiv (ARG)
  1350 ;;     _eepromWriteByte
  1351 ;;       _i2cStart
  1352 ;;         _scl_out
  1353 ;;           _halfclockdelay
  1354 ;;         _sda_out
  1355 ;;           _halfclockdelay
  1356 ;;       _i2cWrite
  1357 ;;         _sda_out
  1358 ;;           _halfclockdelay
  1359 ;;         _scl_out
  1360 ;;           _halfclockdelay
  1361 ;;       _i2cStop
  1362 ;;         _sda_out
  1363 ;;           _halfclockdelay
  1364 ;;         _scl_out
  1365 ;;           _halfclockdelay
  1366 ;;   _comandoRx
  1367 ;;     _checksumVerify
  1368 ;;     _memcpy
  1369 ;;     _checksumCalc
  1370 ;;     _resposta
  1371 ;;       _UART_send_char
  1372 ;;     _getClockCmd
  1373 ;;       _checksumCalc
  1374 ;;     _setTimerCmd
  1375 ;;       _checksumCalc
  1376 ;;     _getTimerCmd
  1377 ;;       _checksumCalc
  1378 ;;     _startLogCmd
  1379 ;;       _eepromWriteByte
  1380 ;;         _i2cStart
  1381 ;;           _scl_out
  1382 ;;             _halfclockdelay
  1383 ;;           _sda_out
  1384 ;;             _halfclockdelay
  1385 ;;         _i2cWrite
  1386 ;;           _sda_out
  1387 ;;             _halfclockdelay
  1388 ;;           _scl_out
  1389 ;;             _halfclockdelay
  1390 ;;         _i2cStop
  1391 ;;           _sda_out
  1392 ;;             _halfclockdelay
  1393 ;;           _scl_out
  1394 ;;             _halfclockdelay
  1395 ;;       _checksumCalc
  1396 ;;     _stopLogCmd
  1397 ;;       _checksumCalc
  1398 ;;     _readLogStatus
  1399 ;;       _checksumCalc
  1400 ;;     ___wmul
  1401 ;;     _eepromReadLog
  1402 ;;       _i2cStart
  1403 ;;         _scl_out
  1404 ;;           _halfclockdelay
  1405 ;;         _sda_out
  1406 ;;           _halfclockdelay
  1407 ;;       _i2cWrite
  1408 ;;         _sda_out
  1409 ;;           _halfclockdelay
  1410 ;;         _scl_out
  1411 ;;           _halfclockdelay
  1412 ;;       _i2cRestart
  1413 ;;         _i2cStart
  1414 ;;           _scl_out
  1415 ;;             _halfclockdelay
  1416 ;;           _sda_out
  1417 ;;             _halfclockdelay
  1418 ;;       _i2cRead
  1419 ;;         _scl_out
  1420 ;;           _halfclockdelay
  1421 ;;       _i2cAck
  1422 ;;         _sda_out
  1423 ;;           _halfclockdelay
  1424 ;;         _scl_out
  1425 ;;           _halfclockdelay
  1426 ;;       _i2cNack
  1427 ;;         _sda_out
  1428 ;;           _halfclockdelay
  1429 ;;         _scl_out
  1430 ;;           _halfclockdelay
  1431 ;;       _i2cStop
  1432 ;;         _sda_out
  1433 ;;           _halfclockdelay
  1434 ;;         _scl_out
  1435 ;;           _halfclockdelay
  1436 ;;     _eepromReadLogPage
  1437 ;;       _i2cStart
  1438 ;;         _scl_out
  1439 ;;           _halfclockdelay
  1440 ;;         _sda_out
  1441 ;;           _halfclockdelay
  1442 ;;       _i2cWrite
  1443 ;;         _sda_out
  1444 ;;           _halfclockdelay
  1445 ;;         _scl_out
  1446 ;;           _halfclockdelay
  1447 ;;       _i2cRestart
  1448 ;;         _i2cStart
  1449 ;;           _scl_out
  1450 ;;             _halfclockdelay
  1451 ;;           _sda_out
  1452 ;;             _halfclockdelay
  1453 ;;       _i2cRead
  1454 ;;         _scl_out
  1455 ;;           _halfclockdelay
  1456 ;;       _i2cAck
  1457 ;;         _sda_out
  1458 ;;           _halfclockdelay
  1459 ;;         _scl_out
  1460 ;;           _halfclockdelay
  1461 ;;       _i2cNack
  1462 ;;         _sda_out
  1463 ;;           _halfclockdelay
  1464 ;;         _scl_out
  1465 ;;           _halfclockdelay
  1466 ;;       _i2cStop
  1467 ;;         _sda_out
  1468 ;;           _halfclockdelay
  1469 ;;         _scl_out
  1470 ;;           _halfclockdelay
  1471 ;;     _UART_send_char
  1472 ;;   _UART_send_String
  1473 ;;     _UART_send_char
  1474 ;;
  1475 ;; _isr (ROOT)
  1476 ;;   _UART_get_char
  1477 ;;   _bufferCreator2
  1478 ;;     i1_memset
  1479 ;;   i1_memset
  1480 ;;
  1481 ;; Address spaces:
  1482 ;;Name               Size   Autos  Total    Cost      Usage
  1483 ;;SFR3                 0      0       0       4        0.0%
  1484 ;;BITSFR3              0      0       0       4        0.0%
  1485 ;;BANK2               50      0      4F       7       98.8%
  1486 ;;BITBANK2            50      0       0       6        0.0%
  1487 ;;SFR2                 0      0       0       5        0.0%
  1488 ;;BITSFR2              0      0       0       5        0.0%
  1489 ;;SFR1                 0      0       0       2        0.0%
  1490 ;;BITSFR1              0      0       0       2        0.0%
  1491 ;;BANK1               50      0      46       5       87.5%
  1492 ;;BITBANK1            50      0       0       4        0.0%
  1493 ;;CODE                 0      0       0       0        0.0%
  1494 ;;DATA                 0      0      F6      10        0.0%
  1495 ;;ABS                  0      0      EA       8        0.0%
  1496 ;;NULL                 0      0       0       0        0.0%
  1497 ;;STACK                0      0       C       2        0.0%
  1498 ;;BANK0               50     30      47       3       88.8%
  1499 ;;BITBANK0            50      0       0       9        0.0%
  1500 ;;SFR0                 0      0       0       1        0.0%
  1501 ;;BITSFR0              0      0       0       1        0.0%
  1502 ;;COMMON               E      A       E       1      100.0%
  1503 ;;BITCOMMON            E      0       1       0        7.1%
  1504 ;;EEDATA             100      0       0       0        0.0%
  1505                           
  1506                           
  1507 ;; *************** function _main *****************
  1508 ;; Defined at:
  1509 ;;		line 58 in file "Main.c"
  1510 ;; Parameters:    Size  Location     Type
  1511 ;;  argc            2   41[BANK0 ] int 
  1512 ;;  argv            2   43[BANK0 ] PTR PTR unsigned char 
  1513 ;; Auto vars:     Size  Location     Type
  1514 ;;		None
  1515 ;; Return value:  Size  Location     Type
  1516 ;;                  2   41[BANK0 ] int 
  1517 ;; Registers used:
  1518 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1519 ;; Tracked objects:
  1520 ;;		On entry : 17F/0
  1521 ;;		On exit  : 0/0
  1522 ;;		Unchanged: 0/0
  1523 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1524 ;;      Params:         0       4       0       0
  1525 ;;      Locals:         0       0       0       0
  1526 ;;      Temps:          0       3       0       0
  1527 ;;      Totals:         0       7       0       0
  1528 ;;Total ram usage:        7 bytes
  1529 ;; Hardware stack levels required when called:    9
  1530 ;; This function calls:
  1531 ;;		_initGPIO
  1532 ;;		_initUART
  1533 ;;		_i2cInitialize
  1534 ;;		_initInterrupt
  1535 ;;		_initVars
  1536 ;;		_initAht10
  1537 ;;		_jdyConfig
  1538 ;;		_memset
  1539 ;;		_logSave
  1540 ;;		_comandoRx
  1541 ;;		_UART_send_String
  1542 ;; This function is called by:
  1543 ;;		Startup code after reset
  1544 ;; This function uses a non-reentrant model
  1545 ;;
  1546  0F14                     _main:	
  1547                           
  1548                           ;Main.c: 59: initGPIO();
  1549                           
  1550 ;; hardware stack exceeded
  1551                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1552  0F14  158A  24BD  158A   	fcall	_initGPIO
  1553                           
  1554                           ;Main.c: 60: initUART();
  1555  0F17  158A  2493  158A   	fcall	_initUART
  1556                           
  1557                           ;Main.c: 61: i2cInitialize(1000);
  1558  0F1A  3000               	movlw	0
  1559  0F1B  00A3               	movwf	?_i2cInitialize+3
  1560  0F1C  00A2               	movwf	?_i2cInitialize+2
  1561  0F1D  3003               	movlw	3
  1562  0F1E  00A1               	movwf	?_i2cInitialize+1
  1563  0F1F  30E8               	movlw	232
  1564  0F20  00A0               	movwf	?_i2cInitialize
  1565  0F21  158A  2473  158A   	fcall	_i2cInitialize
  1566                           
  1567                           ;Main.c: 62: initInterrupt();
  1568  0F24  158A  24D3  158A   	fcall	_initInterrupt
  1569  0F27  3082               	movlw	130
  1570                           
  1571                           ;Main.c: 63: RC4 = 1;
  1572  0F28  1607               	bsf	7,4
  1573                           
  1574                           ;Main.c: 64: _delay((unsigned long)((100)*(4000000/4000.0)));
  1575  0F29  00CE               	movwf	??_main+1
  1576  0F2A  30DD               	movlw	221
  1577  0F2B  00CD               	movwf	??_main
  1578  0F2C                     u1547:	
  1579  0F2C  0BCD               	decfsz	??_main,f
  1580  0F2D  2F2C               	goto	u1547
  1581  0F2E  0BCE               	decfsz	??_main+1,f
  1582  0F2F  2F2C               	goto	u1547
  1583  0F30  2F31               	nop2
  1584                           
  1585                           ;Main.c: 65: initVars();
  1586  0F31  118A  23A3  158A   	fcall	_initVars
  1587                           
  1588                           ;Main.c: 66: initAht10();
  1589  0F34  118A  201E  158A   	fcall	_initAht10
  1590                           
  1591                           ;Main.c: 67: _delay((unsigned long)((5)*(4000000/4000.0)));
  1592  0F37  3007               	movlw	7
  1593  0F38  00CE               	movwf	??_main+1
  1594  0F39  307D               	movlw	125
  1595  0F3A  00CD               	movwf	??_main
  1596  0F3B                     u1557:	
  1597  0F3B  0BCD               	decfsz	??_main,f
  1598  0F3C  2F3B               	goto	u1557
  1599  0F3D  0BCE               	decfsz	??_main+1,f
  1600  0F3E  2F3B               	goto	u1557
  1601                           
  1602                           ;Main.c: 68: jdyConfig();
  1603  0F3F  158A  2619  158A   	fcall	_jdyConfig
  1604                           
  1605                           ;Main.c: 69: _delay((unsigned long)((250)*(4000000/4000.0)));
  1606  0F42  3002               	movlw	2
  1607  0F43  00CF               	movwf	??_main+2
  1608  0F44  3045               	movlw	69
  1609  0F45  00CE               	movwf	??_main+1
  1610  0F46  30A9               	movlw	169
  1611  0F47  00CD               	movwf	??_main
  1612  0F48                     u1567:	
  1613  0F48  0BCD               	decfsz	??_main,f
  1614  0F49  2F48               	goto	u1567
  1615  0F4A  0BCE               	decfsz	??_main+1,f
  1616  0F4B  2F48               	goto	u1567
  1617  0F4C  0BCF               	decfsz	??_main+2,f
  1618  0F4D  2F48               	goto	u1567
  1619  0F4E  2F4F               	nop2
  1620                           
  1621                           ;Main.c: 70: memset(rxBuffer,0,30);
  1622  0F4F  1283               	bcf	3,5	;RP0=0, select bank0
  1623  0F50  301E               	movlw	30
  1624  0F51  1303               	bcf	3,6	;RP1=0, select bank0
  1625  0F52  01A0               	clrf	?_memset
  1626  0F53  01A1               	clrf	?_memset+1
  1627  0F54  00A2               	movwf	?_memset+2
  1628  0F55  303E               	movlw	_rxBuffer& (0+255)
  1629  0F56  01A3               	clrf	?_memset+3
  1630  0F57  158A  247F  158A   	fcall	_memset
  1631  0F5A                     l8442:	
  1632                           
  1633                           ;Main.c: 73: if(logStatus == 1 && contTimer == 0){
  1634  0F5A  1EFA               	btfss	_logStatus/(0+8),_logStatus& (0+7)
  1635  0F5B  2F69               	goto	l8450
  1636  0F5C  1283               	bcf	3,5	;RP0=0, select bank0
  1637  0F5D  1303               	bcf	3,6	;RP1=0, select bank0
  1638  0F5E  085D               	movf	_contTimer+1,w
  1639  0F5F  045C               	iorwf	_contTimer,w
  1640  0F60  1D03               	skipz
  1641  0F61  2F69               	goto	l8450
  1642                           
  1643                           ;Main.c: 74: contTimer = timer;
  1644  0F62  085B               	movf	_timer+1,w
  1645  0F63  00DD               	movwf	_contTimer+1
  1646  0F64  085A               	movf	_timer,w
  1647  0F65  00DC               	movwf	_contTimer
  1648                           
  1649                           ;Main.c: 76: logSave();
  1650  0F66  118A  21FF  158A   	fcall	_logSave
  1651  0F69                     l8450:	
  1652                           
  1653                           ;Main.c: 77: }
  1654                           ;Main.c: 79: if (flagRxBufferOk){
  1655  0F69  1DFA               	btfss	_flagRxBufferOk/(0+8),_flagRxBufferOk& (0+7)
  1656  0F6A  2F9A               	goto	l8468
  1657  0F6B  3003               	movlw	3
  1658                           
  1659                           ;Main.c: 80: flagRxBufferOk = 0;
  1660  0F6C  11FA               	bcf	_flagRxBufferOk/(0+8),_flagRxBufferOk& (0+7)
  1661                           
  1662                           ;Main.c: 81: if (rxBufferLength >= 3){
  1663  0F6D  027B               	subwf	_rxBufferLength,w
  1664  0F6E  1C03               	skipc
  1665  0F6F  2F9A               	goto	l8468
  1666                           
  1667                           ;Main.c: 82: if (rxBuffer[2]+5 == rxBufferLength){
  1668  0F70  1283               	bcf	3,5	;RP0=0, select bank2
  1669  0F71  1703               	bsf	3,6	;RP1=1, select bank2
  1670  0F72  0840               	movf	(_rxBuffer^(0+256)+2),w
  1671  0F73  3E05               	addlw	5
  1672  0F74  1303               	bcf	3,6	;RP1=0, select bank0
  1673  0F75  00CD               	movwf	??_main
  1674  0F76  3000               	movlw	0
  1675  0F77  1803               	skipnc
  1676  0F78  3001               	movlw	1
  1677  0F79  00CE               	movwf	??_main+1
  1678  0F7A  087B               	movf	_rxBufferLength,w
  1679  0F7B  064D               	xorwf	??_main,w
  1680  0F7C  044E               	iorwf	??_main+1,w
  1681  0F7D  1D03               	skipz
  1682  0F7E  2F9A               	goto	l8468
  1683                           
  1684                           ;Main.c: 83: if (rxBuffer[0] == 0x55 && rxBuffer[rxBufferLength-1] == 0x0A){
  1685  0F7F  1703               	bsf	3,6	;RP1=1, select bank2
  1686  0F80  083E               	movf	_rxBuffer^(0+256),w
  1687  0F81  3A55               	xorlw	85
  1688  0F82  1D03               	skipz
  1689  0F83  2F9A               	goto	l8468
  1690  0F84  087B               	movf	_rxBufferLength,w
  1691  0F85  3E3D               	addlw	(_rxBuffer+-1)& (0+255)
  1692  0F86  0084               	movwf	4
  1693  0F87  1783               	bsf	3,7	;select IRP bank2
  1694  0F88  0800               	movf	0,w
  1695  0F89  3A0A               	xorlw	10
  1696  0F8A  1D03               	skipz
  1697  0F8B  2F9A               	goto	l8468
  1698                           
  1699                           ;Main.c: 84: comandoRx();
  1700  0F8C  118A  202D  158A   	fcall	_comandoRx
  1701                           
  1702                           ;Main.c: 85: rxBufferPos = 0;
  1703  0F8F  01FC               	clrf	_rxBufferPos
  1704                           
  1705                           ;Main.c: 86: memset(rxBuffer,0,rxBufferLength);
  1706  0F90  1283               	bcf	3,5	;RP0=0, select bank0
  1707  0F91  01A0               	clrf	?_memset
  1708  0F92  01A1               	clrf	?_memset+1
  1709  0F93  087B               	movf	_rxBufferLength,w
  1710  0F94  00A2               	movwf	?_memset+2
  1711  0F95  303E               	movlw	_rxBuffer& (0+255)
  1712  0F96  01A3               	clrf	?_memset+3
  1713  0F97  158A  247F  158A   	fcall	_memset
  1714  0F9A                     l8468:	
  1715                           
  1716                           ;Main.c: 87: }
  1717                           ;Main.c: 88: }
  1718                           ;Main.c: 89: }
  1719                           ;Main.c: 90: }
  1720                           ;Main.c: 92: if(RC0 == 1){
  1721  0F9A  1283               	bcf	3,5	;RP0=0, select bank0
  1722  0F9B  1303               	bcf	3,6	;RP1=0, select bank0
  1723  0F9C  1C07               	btfss	7,0
  1724  0F9D  2FA2               	goto	l8478
  1725                           
  1726                           ;Main.c: 93: flagConection = 1;
  1727  0F9E  14FA               	bsf	_flagConection/(0+8),_flagConection& (0+7)
  1728                           
  1729                           ;Main.c: 94: timeToConnect = 0;
  1730  0F9F  01E6               	clrf	_timeToConnect
  1731                           
  1732                           ;Main.c: 95: RC4 = 1;
  1733  0FA0  1607               	bsf	7,4
  1734                           
  1735                           ;Main.c: 96: RC1 = 0;
  1736  0FA1  1087               	bcf	7,1
  1737  0FA2                     l8478:	
  1738                           
  1739                           ;Main.c: 97: }
  1740                           ;Main.c: 98: if (RC0 == 0 && timeToConnect > 0){
  1741  0FA2  1807               	btfsc	7,0
  1742  0FA3  2FAE               	goto	l8486
  1743  0FA4  0866               	movf	_timeToConnect,w
  1744  0FA5  1903               	btfsc	3,2
  1745  0FA6  2FAE               	goto	l8486
  1746                           
  1747                           ;Main.c: 99: if (timeBlinkLed == 0){
  1748  0FA7  08E5               	movf	_timeBlinkLed,f
  1749  0FA8  1D03               	skipz
  1750  0FA9  2FAE               	goto	l8486
  1751                           
  1752                           ;Main.c: 100: timeBlinkLed = 5;
  1753  0FAA  3005               	movlw	5
  1754  0FAB  00E5               	movwf	_timeBlinkLed
  1755                           
  1756                           ;Main.c: 101: RC1 = !RC1;
  1757  0FAC  3002               	movlw	2
  1758  0FAD  0687               	xorwf	7,f
  1759  0FAE                     l8486:	
  1760                           
  1761                           ;Main.c: 103: }
  1762                           ;Main.c: 104: }
  1763                           ;Main.c: 107: if(RC0 == 0 && timeToConnect == 0){
  1764  0FAE  1807               	btfsc	7,0
  1765  0FAF  2F5A               	goto	l8442
  1766  0FB0  08E6               	movf	_timeToConnect,f
  1767  0FB1  1D03               	skipz
  1768  0FB2  2F5A               	goto	l8442
  1769                           
  1770                           ;Main.c: 108: RC1 = 1;
  1771  0FB3  1487               	bsf	7,1
  1772                           
  1773                           ;Main.c: 109: if (flagTryConnect == 1 || flagConection == 1){
  1774  0FB4  1A7A               	btfsc	_flagTryConnect/(0+8),_flagTryConnect& (0+7)
  1775  0FB5  2FB8               	goto	l4869
  1776  0FB6  1CFA               	btfss	_flagConection/(0+8),_flagConection& (0+7)
  1777  0FB7  2FFE               	goto	l8508
  1778  0FB8                     l4869:	
  1779  0FB8  3002               	movlw	2
  1780                           
  1781                           ;Main.c: 110: flagConection = 0;
  1782  0FB9  10FA               	bcf	_flagConection/(0+8),_flagConection& (0+7)
  1783                           
  1784                           ;Main.c: 111: flagTryConnect = 0;
  1785  0FBA  127A               	bcf	_flagTryConnect/(0+8),_flagTryConnect& (0+7)
  1786                           
  1787                           ;Main.c: 112: RC4 = 0;
  1788  0FBB  1207               	bcf	7,4
  1789                           
  1790                           ;Main.c: 113: _delay((unsigned long)((200)*(4000000/4000.0)));
  1791  0FBC  00CF               	movwf	??_main+2
  1792  0FBD  3004               	movlw	4
  1793  0FBE  00CE               	movwf	??_main+1
  1794  0FBF  30BA               	movlw	186
  1795  0FC0  00CD               	movwf	??_main
  1796  0FC1                     u1577:	
  1797  0FC1  0BCD               	decfsz	??_main,f
  1798  0FC2  2FC1               	goto	u1577
  1799  0FC3  0BCE               	decfsz	??_main+1,f
  1800  0FC4  2FC1               	goto	u1577
  1801  0FC5  0BCF               	decfsz	??_main+2,f
  1802  0FC6  2FC1               	goto	u1577
  1803  0FC7  0064               	clrwdt
  1804                           
  1805                           ;Main.c: 115: if (flagChangeName == 1){
  1806  0FC8  1C7A               	btfss	_flagChangeName/(0+8),_flagChangeName& (0+7)
  1807  0FC9  2FE3               	goto	l8504
  1808  0FCA  305C               	movlw	_deviceName& (0+255)
  1809                           
  1810                           ;Main.c: 116: flagChangeName = 0;
  1811  0FCB  107A               	bcf	_flagChangeName/(0+8),_flagChangeName& (0+7)
  1812                           
  1813                           ;Main.c: 117: UART_send_String(deviceName,19);
  1814  0FCC  1283               	bcf	3,5	;RP0=0, select bank0
  1815  0FCD  1303               	bcf	3,6	;RP1=0, select bank0
  1816  0FCE  00A1               	movwf	?_UART_send_String
  1817  0FCF  3001               	movlw	1
  1818  0FD0  00A2               	movwf	?_UART_send_String+1
  1819  0FD1  3013               	movlw	19
  1820  0FD2  00A3               	movwf	?_UART_send_String+2
  1821  0FD3  158A  2666  158A   	fcall	_UART_send_String
  1822                           
  1823                           ;Main.c: 118: _delay((unsigned long)((500)*(4000000/4000.0)));
  1824  0FD6  3003               	movlw	3
  1825  0FD7  00CF               	movwf	??_main+2
  1826  0FD8  308A               	movlw	138
  1827  0FD9  00CE               	movwf	??_main+1
  1828  0FDA  3056               	movlw	86
  1829  0FDB  00CD               	movwf	??_main
  1830  0FDC                     u1587:	
  1831  0FDC  0BCD               	decfsz	??_main,f
  1832  0FDD  2FDC               	goto	u1587
  1833  0FDE  0BCE               	decfsz	??_main+1,f
  1834  0FDF  2FDC               	goto	u1587
  1835  0FE0  0BCF               	decfsz	??_main+2,f
  1836  0FE1  2FDC               	goto	u1587
  1837  0FE2  2FE3               	nop2
  1838  0FE3                     l8504:	
  1839                           
  1840                           ;Main.c: 121: }
  1841                           ;Main.c: 122: UART_send_String("AT+SLEEP2\r\n",11);
  1842  0FE3  301B               	movlw	low (STR_1-__stringbase)
  1843  0FE4  1283               	bcf	3,5	;RP0=0, select bank0
  1844  0FE5  1303               	bcf	3,6	;RP1=0, select bank0
  1845  0FE6  00A1               	movwf	?_UART_send_String
  1846  0FE7  3080               	movlw	128
  1847  0FE8  00A2               	movwf	?_UART_send_String+1
  1848  0FE9  300B               	movlw	11
  1849  0FEA  00A3               	movwf	?_UART_send_String+2
  1850  0FEB  158A  2666  158A   	fcall	_UART_send_String
  1851                           
  1852                           ;Main.c: 123: _delay((unsigned long)((350)*(4000000/4000.0)));
  1853  0FEE  3002               	movlw	2
  1854  0FEF  00CF               	movwf	??_main+2
  1855  0FF0  30C7               	movlw	199
  1856  0FF1  00CE               	movwf	??_main+1
  1857  0FF2  3088               	movlw	136
  1858  0FF3  00CD               	movwf	??_main
  1859  0FF4                     u1597:	
  1860  0FF4  0BCD               	decfsz	??_main,f
  1861  0FF5  2FF4               	goto	u1597
  1862  0FF6  0BCE               	decfsz	??_main+1,f
  1863  0FF7  2FF4               	goto	u1597
  1864  0FF8  0BCF               	decfsz	??_main+2,f
  1865  0FF9  2FF4               	goto	u1597
  1866  0FFA  0064               	clrwdt
  1867                           
  1868                           ;Main.c: 124: RC4 = 1;
  1869  0FFB  1283               	bcf	3,5	;RP0=0, select bank0
  1870  0FFC  1303               	bcf	3,6	;RP1=0, select bank0
  1871  0FFD  1607               	bsf	7,4
  1872  0FFE                     l8508:	
  1873  0FFE  0063               	sleep	;#
  1874  0FFF  2F5A               	goto	l8442
  1875  1000                     __end_of_main:	
  1876                           
  1877                           	psect	swtext1
  1878  083F                     __pswtext1:	
  1879  083F                     S8542:	
  1880  083F  118A  283F         	ljmp	l8214
  1881  0841  118A  287E         	ljmp	l8240
  1882  0843  118A  2883         	ljmp	l8244
  1883  0845  118A  2887         	ljmp	l8248
  1884  0847  118A  288B         	ljmp	l8252
  1885  0849  118A  288E         	ljmp	l8256
  1886  084B  118A  2892         	ljmp	l8260
  1887  084D  118A  2896         	ljmp	l8264
  1888  084F  118A  2943         	ljmp	l8356
  1889  0851  118A  2984         	ljmp	l8376
  1890                           
  1891                           	psect	text1001
  1892  000F                     __ptext1001:	
  1893 ;; =============== function _readTemp ends ============
  1894                           
  1895                           
  1896 ;; *************** function _sendTriggerMeasurementCmd *****************
  1897 ;; Defined at:
  1898 ;;		line 33 in file "aht10.c"
  1899 ;; Parameters:    Size  Location     Type
  1900 ;;		None
  1901 ;; Auto vars:     Size  Location     Type
  1902 ;;		None
  1903 ;; Return value:  Size  Location     Type
  1904 ;;		None               void
  1905 ;; Registers used:
  1906 ;;		wreg, status,2, status,0, pclath, cstack
  1907 ;; Tracked objects:
  1908 ;;		On entry : 60/0
  1909 ;;		On exit  : 60/0
  1910 ;;		Unchanged: FFF9F/0
  1911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1912 ;;      Params:         0       0       0       0
  1913 ;;      Locals:         0       0       0       0
  1914 ;;      Temps:          0       0       0       0
  1915 ;;      Totals:         0       0       0       0
  1916 ;;Total ram usage:        0 bytes
  1917 ;; Hardware stack levels used:    1
  1918 ;; Hardware stack levels required when called:    6
  1919 ;; This function calls:
  1920 ;;		_i2cStart
  1921 ;;		_i2cWrite
  1922 ;;		_i2cStop
  1923 ;; This function is called by:
  1924 ;;		_logSave
  1925 ;; This function uses a non-reentrant model
  1926 ;;
  1927  000F                     _sendTriggerMeasurementCmd:	
  1928                           
  1929                           ;aht10.c: 34: i2cStart();
  1930                           
  1931                           ; Regs used in _sendTriggerMeasurementCmd: [wreg+status,2+status,0+pclath+cstack]
  1932  000F  273A  118A         	fcall	_i2cStart
  1933                           
  1934                           ;aht10.c: 35: i2cWrite(0x70);
  1935  0011  3070               	movlw	112
  1936  0012  26F3  118A         	fcall	_i2cWrite
  1937                           
  1938                           ;aht10.c: 36: i2cWrite(0xAC);
  1939  0014  30AC               	movlw	172
  1940  0015  26F3  118A         	fcall	_i2cWrite
  1941                           
  1942                           ;aht10.c: 37: i2cWrite(0x33);
  1943  0017  3033               	movlw	51
  1944  0018  26F3  118A         	fcall	_i2cWrite
  1945                           
  1946                           ;aht10.c: 38: i2cWrite(0x00);
  1947  001A  3000               	movlw	0
  1948  001B  26F3  118A         	fcall	_i2cWrite
  1949                           
  1950                           ;aht10.c: 39: i2cStop();
  1951  001D  2F45               	ljmp	l7888
  1952  001E                     __end_of_sendTriggerMeasurementCmd:	
  1953  001E                     __ptext1002:	
  1954 ;; =============== function _sendTriggerMeasurementCmd ends ============
  1955                           
  1956                           
  1957 ;; *************** function _initAht10 *****************
  1958 ;; Defined at:
  1959 ;;		line 12 in file "aht10.c"
  1960 ;; Parameters:    Size  Location     Type
  1961 ;;		None
  1962 ;; Auto vars:     Size  Location     Type
  1963 ;;		None
  1964 ;; Return value:  Size  Location     Type
  1965 ;;		None               void
  1966 ;; Registers used:
  1967 ;;		wreg, status,2, status,0, pclath, cstack
  1968 ;; Tracked objects:
  1969 ;;		On entry : 0/0
  1970 ;;		On exit  : 60/0
  1971 ;;		Unchanged: FFF9F/0
  1972 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1973 ;;      Params:         0       0       0       0
  1974 ;;      Locals:         0       0       0       0
  1975 ;;      Temps:          0       0       0       0
  1976 ;;      Totals:         0       0       0       0
  1977 ;;Total ram usage:        0 bytes
  1978 ;; Hardware stack levels used:    1
  1979 ;; Hardware stack levels required when called:    6
  1980 ;; This function calls:
  1981 ;;		_i2cStart
  1982 ;;		_i2cWrite
  1983 ;;		_i2cStop
  1984 ;; This function is called by:
  1985 ;;		_main
  1986 ;; This function uses a non-reentrant model
  1987 ;;
  1988  001E                     _initAht10:	
  1989                           
  1990                           ;aht10.c: 13: i2cStart();
  1991                           
  1992                           ; Regs used in _initAht10: [wreg+status,2+status,0+pclath+cstack]
  1993  001E  273A  118A         	fcall	_i2cStart
  1994                           
  1995                           ;aht10.c: 14: i2cWrite(0x70);
  1996  0020  3070               	movlw	112
  1997  0021  26F3  118A         	fcall	_i2cWrite
  1998                           
  1999                           ;aht10.c: 15: i2cWrite(0xE1);
  2000  0023  30E1               	movlw	225
  2001  0024  26F3  118A         	fcall	_i2cWrite
  2002                           
  2003                           ;aht10.c: 16: i2cWrite(0x08);
  2004  0026  3008               	movlw	8
  2005  0027  26F3  118A         	fcall	_i2cWrite
  2006                           
  2007                           ;aht10.c: 17: i2cWrite(0x00);
  2008  0029  3000               	movlw	0
  2009  002A  26F3  118A         	fcall	_i2cWrite
  2010                           
  2011                           ;aht10.c: 18: i2cStop();
  2012  002C  2F45               	ljmp	l7888
  2013  002D                     __end_of_initAht10:	
  2014  002D                     __ptext993:	
  2015 ;; =============== function _main ends ============
  2016                           
  2017                           
  2018 ;; *************** function _comandoRx *****************
  2019 ;; Defined at:
  2020 ;;		line 197 in file "Main.c"
  2021 ;; Parameters:    Size  Location     Type
  2022 ;;		None
  2023 ;; Auto vars:     Size  Location     Type
  2024 ;;  readData        3   13[BANK0 ] unsigned char [3]
  2025 ;;  i               2   25[BANK0 ] int 
  2026 ;;  i               2   19[BANK0 ] unsigned int 
  2027 ;;  i               1   27[BANK0 ] unsigned char 
  2028 ;;  readData        3   16[BANK0 ] unsigned char [3]
  2029 ;;  numOfBytes      4   21[BANK0 ] unsigned long 
  2030 ;;  logsToSend      2   29[BANK0 ] unsigned int 
  2031 ;;  chk             1   28[BANK0 ] unsigned char 
  2032 ;; Return value:  Size  Location     Type
  2033 ;;		None               void
  2034 ;; Registers used:
  2035 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2036 ;; Tracked objects:
  2037 ;;		On entry : 160/140
  2038 ;;		On exit  : 40/0
  2039 ;;		Unchanged: 0/0
  2040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2041 ;;      Params:         0       0       0       0
  2042 ;;      Locals:         0      18       0       0
  2043 ;;      Temps:          0       1       0       0
  2044 ;;      Totals:         0      19       0       0
  2045 ;;Total ram usage:       19 bytes
  2046 ;; Hardware stack levels used:    1
  2047 ;; Hardware stack levels required when called:    8
  2048 ;; This function calls:
  2049 ;;		_checksumVerify
  2050 ;;		_memcpy
  2051 ;;		_checksumCalc
  2052 ;;		_resposta
  2053 ;;		_getClockCmd
  2054 ;;		_setTimerCmd
  2055 ;;		_getTimerCmd
  2056 ;;		_startLogCmd
  2057 ;;		_stopLogCmd
  2058 ;;		_readLogStatus
  2059 ;;		___wmul
  2060 ;;		_eepromReadLog
  2061 ;;		_eepromReadLogPage
  2062 ;;		_UART_send_char
  2063 ;; This function is called by:
  2064 ;;		_main
  2065 ;; This function uses a non-reentrant model
  2066 ;;
  2067  002D                     _comandoRx:	
  2068                           
  2069                           ;Main.c: 200: unsigned int logsToSend = 0;
  2070                           
  2071 ;; hardware stack exceeded
  2072                           ; Regs used in _comandoRx: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2073  002D  1303               	bcf	3,6	;RP1=0, select bank0
  2074  002E  01BD               	clrf	comandoRx@logsToSend
  2075  002F  01BE               	clrf	comandoRx@logsToSend+1
  2076                           
  2077                           ;Main.c: 201: if (checksumVerify()){
  2078  0030  158A  254C  118A   	fcall	_checksumVerify
  2079  0033  1C03               	btfss	3,0
  2080  0034  29F1               	goto	l8416
  2081                           
  2082                           ;Main.c: 202: memcpy(cmd, rxBuffer, rxBufferLength);
  2083  0035  303E               	movlw	_rxBuffer& (0+255)
  2084  0036  00A0               	movwf	?_memcpy
  2085  0037  087B               	movf	_rxBufferLength,w
  2086  0038  00A1               	movwf	?_memcpy+1
  2087  0039  30C8               	movlw	_cmd& (0+255)
  2088  003A  01A2               	clrf	?_memcpy+2
  2089  003B  158A  24F0  118A   	fcall	_memcpy
  2090                           
  2091                           ;Main.c: 203: switch (cmd[1]){
  2092  003E  29DD               	goto	l8410
  2093  003F                     l8214:	
  2094                           
  2095                           ;Main.c: 205: deviceName[0]='A';
  2096  003F  3041               	movlw	65
  2097  0040  1283               	bcf	3,5	;RP0=0, select bank2
  2098  0041  1703               	bsf	3,6	;RP1=1, select bank2
  2099  0042  00DC               	movwf	_deviceName^(0+256)
  2100                           
  2101                           ;Main.c: 206: deviceName[1]='T';
  2102  0043  3054               	movlw	84
  2103  0044  00DD               	movwf	(_deviceName^(0+256)+1)
  2104                           
  2105                           ;Main.c: 207: deviceName[2]='+';
  2106  0045  302B               	movlw	43
  2107  0046  00DE               	movwf	(_deviceName^(0+256)+2)
  2108                           
  2109                           ;Main.c: 208: deviceName[3]='N';
  2110  0047  304E               	movlw	78
  2111  0048  00DF               	movwf	(_deviceName^(0+256)+3)
  2112                           
  2113                           ;Main.c: 209: deviceName[4]='A';
  2114  0049  3041               	movlw	65
  2115  004A  00E0               	movwf	(_deviceName^(0+256)+4)
  2116                           
  2117                           ;Main.c: 210: deviceName[5]='M';
  2118  004B  304D               	movlw	77
  2119  004C  00E1               	movwf	(_deviceName^(0+256)+5)
  2120                           
  2121                           ;Main.c: 211: deviceName[6]='E';
  2122  004D  3045               	movlw	69
  2123  004E  00E2               	movwf	(_deviceName^(0+256)+6)
  2124                           
  2125                           ;Main.c: 212: for(char i=0 ; i<10; i++){
  2126  004F  1303               	bcf	3,6	;RP1=0, select bank0
  2127  0050  01BB               	clrf	comandoRx@i
  2128  0051                     l8222:	
  2129                           
  2130                           ;Main.c: 213: deviceName[i+7] = cmd[i+3];
  2131  0051  083B               	movf	comandoRx@i,w
  2132  0052  3ECB               	addlw	(_cmd+3)& (0+255)
  2133  0053  0084               	movwf	4
  2134  0054  1383               	bcf	3,7	;select IRP bank1
  2135  0055  0800               	movf	0,w
  2136  0056  00AC               	movwf	??_comandoRx
  2137  0057  083B               	movf	comandoRx@i,w
  2138  0058  3E63               	addlw	(_deviceName+7)& (0+255)
  2139  0059  0084               	movwf	4
  2140  005A  082C               	movf	??_comandoRx,w
  2141  005B  1783               	bsf	3,7	;select IRP bank2
  2142  005C  0080               	movwf	0
  2143  005D  300A               	movlw	10
  2144  005E  0ABB               	incf	comandoRx@i,f
  2145  005F  023B               	subwf	comandoRx@i,w
  2146  0060  1C03               	skipc
  2147  0061  2851               	goto	l8222
  2148                           
  2149                           ;Main.c: 214: }
  2150                           ;Main.c: 215: deviceName[17]='\r';
  2151  0062  300D               	movlw	13
  2152  0063  1703               	bsf	3,6	;RP1=1, select bank2
  2153  0064  00ED               	movwf	(_deviceName^(0+256)+17)
  2154                           
  2155                           ;Main.c: 216: deviceName[18]='\n';
  2156  0065  300A               	movlw	10
  2157  0066  00EE               	movwf	(_deviceName^(0+256)+18)
  2158  0067  3005               	movlw	5
  2159                           
  2160                           ;Main.c: 217: flagChangeName = 1;
  2161  0068  147A               	bsf	_flagChangeName/(0+8),_flagChangeName& (0+7)
  2162                           
  2163                           ;Main.c: 218: bufferTxLen = 5;
  2164  0069  1303               	bcf	3,6	;RP1=0, select bank0
  2165  006A  00E0               	movwf	_bufferTxLen
  2166                           
  2167                           ;Main.c: 219: bufferTx[0] = 0x55;
  2168  006B  3055               	movlw	85
  2169  006C  1683               	bsf	3,5	;RP0=1, select bank1
  2170  006D  00A0               	movwf	_bufferTx^(0+128)
  2171                           
  2172                           ;Main.c: 220: bufferTx[1] = 0x30;
  2173  006E  3030               	movlw	48
  2174  006F  00A1               	movwf	(_bufferTx^(0+128)+1)
  2175  0070  3005               	movlw	5
  2176                           
  2177                           ;Main.c: 221: bufferTx[2] = 0x00;
  2178  0071  01A2               	clrf	(_bufferTx^(0+128)+2)
  2179                           
  2180                           ;Main.c: 222: bufferTx[3] = checksumCalc(bufferTx,5);
  2181  0072  1283               	bcf	3,5	;RP0=0, select bank0
  2182  0073  00A0               	movwf	?_checksumCalc
  2183  0074  30A0               	movlw	_bufferTx& (0+255)
  2184  0075  2757  118A         	fcall	_checksumCalc
  2185  0077  1683               	bsf	3,5	;RP0=1, select bank1
  2186  0078  00A3               	movwf	(_bufferTx^(0+128)+3)
  2187                           
  2188                           ;Main.c: 223: bufferTx[4] = 0x0A;
  2189  0079  300A               	movlw	10
  2190  007A  00A4               	movwf	(_bufferTx^(0+128)+4)
  2191  007B                     l8238:	
  2192                           
  2193                           ;Main.c: 224: resposta();
  2194  007B  27B6  118A         	fcall	_resposta
  2195                           
  2196                           ;Main.c: 225: break;
  2197  007D  29ED               	goto	l4894
  2198  007E                     l8240:	
  2199                           
  2200                           ;Main.c: 227: getClockCmd();
  2201  007E  158A  25A6  118A   	fcall	_getClockCmd
  2202  0081                     l8242:	
  2203                           
  2204                           ;Main.c: 228: flagRespostaBLE = 1;
  2205  0081  157A               	bsf	_flagRespostaBLE/(0+8),_flagRespostaBLE& (0+7)
  2206                           
  2207                           ;Main.c: 229: break;
  2208  0082  29ED               	goto	l4894
  2209  0083                     l8244:	
  2210                           
  2211                           ;Main.c: 232: setTimerCmd();
  2212  0083  158A  252B  118A   	fcall	_setTimerCmd
  2213  0086  2881               	goto	l8242
  2214  0087                     l8248:	
  2215                           
  2216                           ;Main.c: 237: getTimerCmd();
  2217  0087  158A  250D  118A   	fcall	_getTimerCmd
  2218  008A  2881               	goto	l8242
  2219  008B                     l8252:	
  2220                           
  2221                           ;Main.c: 242: startLogCmd();
  2222  008B  2284  118A         	fcall	_startLogCmd
  2223  008D  2881               	goto	l8242
  2224  008E                     l8256:	
  2225                           
  2226                           ;Main.c: 247: stopLogCmd();
  2227  008E  158A  24A8  118A   	fcall	_stopLogCmd
  2228  0091  2881               	goto	l8242
  2229  0092                     l8260:	
  2230                           
  2231                           ;Main.c: 252: readLogStatus();
  2232  0092  158A  25DB  118A   	fcall	_readLogStatus
  2233  0095  2881               	goto	l8242
  2234  0096                     l8264:	
  2235                           
  2236                           ;Main.c: 257: chk = 0;
  2237  0096  1283               	bcf	3,5	;RP0=0, select bank0
  2238  0097  300E               	movlw	14
  2239  0098  01BC               	clrf	comandoRx@chk
  2240                           
  2241                           ;Main.c: 258: bufferTxLen = 14;
  2242  0099  00E0               	movwf	_bufferTxLen
  2243                           
  2244                           ;Main.c: 259: bufferTx[0] = 0x55;
  2245  009A  3055               	movlw	85
  2246  009B  1683               	bsf	3,5	;RP0=1, select bank1
  2247  009C  00A0               	movwf	_bufferTx^(0+128)
  2248                           
  2249                           ;Main.c: 260: bufferTx[1] = 0x37;
  2250  009D  3037               	movlw	55
  2251  009E  00A1               	movwf	(_bufferTx^(0+128)+1)
  2252                           
  2253                           ;Main.c: 261: chk ^= bufferTx[1];
  2254  009F  1283               	bcf	3,5	;RP0=0, select bank0
  2255  00A0  06BC               	xorwf	comandoRx@chk,f
  2256                           
  2257                           ;Main.c: 262: logsToSend = numOfLogs;
  2258  00A1  085F               	movf	_numOfLogs+1,w
  2259  00A2  00BE               	movwf	comandoRx@logsToSend+1
  2260  00A3  085E               	movf	_numOfLogs,w
  2261  00A4  00BD               	movwf	comandoRx@logsToSend
  2262                           
  2263                           ;Main.c: 263: numOfBytes = logsToSend*3;
  2264  00A5  083E               	movf	comandoRx@logsToSend+1,w
  2265  00A6  00A1               	movwf	?___wmul+1
  2266  00A7  083D               	movf	comandoRx@logsToSend,w
  2267  00A8  00A0               	movwf	?___wmul
  2268  00A9  3003               	movlw	3
  2269  00AA  00A2               	movwf	?___wmul+2
  2270  00AB  01A3               	clrf	?___wmul+3
  2271  00AC  238A  118A         	fcall	___wmul
  2272  00AE  0820               	movf	?___wmul,w
  2273  00AF  00B5               	movwf	comandoRx@numOfBytes
  2274  00B0  0821               	movf	?___wmul+1,w
  2275  00B1  00B6               	movwf	comandoRx@numOfBytes+1
  2276  00B2  3009               	movlw	9
  2277  00B3  01B7               	clrf	comandoRx@numOfBytes+2
  2278  00B4  01B8               	clrf	comandoRx@numOfBytes+3
  2279                           
  2280                           ;Main.c: 264: numOfBytes+= 9;
  2281  00B5  07B5               	addwf	comandoRx@numOfBytes,f
  2282  00B6  3001               	movlw	1
  2283  00B7  1803               	skipnc
  2284  00B8  07B6               	addwf	comandoRx@numOfBytes+1,f
  2285  00B9  1803               	skipnc
  2286  00BA  07B7               	addwf	comandoRx@numOfBytes+2,f
  2287  00BB  1803               	skipnc
  2288  00BC  07B8               	addwf	comandoRx@numOfBytes+3,f
  2289                           
  2290                           ;Main.c: 265: bufferTx[2] = (numOfBytes>>16)&0xFF;
  2291  00BD  0837               	movf	comandoRx@numOfBytes+2,w
  2292  00BE  1683               	bsf	3,5	;RP0=1, select bank1
  2293  00BF  00A2               	movwf	(_bufferTx^(0+128)+2)
  2294                           
  2295                           ;Main.c: 266: chk ^= bufferTx[2];
  2296  00C0  1283               	bcf	3,5	;RP0=0, select bank0
  2297  00C1  06BC               	xorwf	comandoRx@chk,f
  2298                           
  2299                           ;Main.c: 267: bufferTx[3] = (numOfBytes>>8)&0xFF;
  2300  00C2  0836               	movf	comandoRx@numOfBytes+1,w
  2301  00C3  1683               	bsf	3,5	;RP0=1, select bank1
  2302  00C4  00A3               	movwf	(_bufferTx^(0+128)+3)
  2303                           
  2304                           ;Main.c: 268: chk ^= bufferTx[3];
  2305  00C5  1283               	bcf	3,5	;RP0=0, select bank0
  2306  00C6  06BC               	xorwf	comandoRx@chk,f
  2307                           
  2308                           ;Main.c: 269: bufferTx[4] = (numOfBytes&0xFF);
  2309  00C7  0835               	movf	comandoRx@numOfBytes,w
  2310  00C8  1683               	bsf	3,5	;RP0=1, select bank1
  2311  00C9  00A4               	movwf	(_bufferTx^(0+128)+4)
  2312                           
  2313                           ;Main.c: 270: chk ^= bufferTx[4];
  2314  00CA  1283               	bcf	3,5	;RP0=0, select bank0
  2315  00CB  06BC               	xorwf	comandoRx@chk,f
  2316                           
  2317                           ;Main.c: 272: bufferTx[5] = startTime>>24;
  2318  00CC  0853               	movf	_startTime+3,w
  2319  00CD  1683               	bsf	3,5	;RP0=1, select bank1
  2320  00CE  00A5               	movwf	(_bufferTx^(0+128)+5)
  2321                           
  2322                           ;Main.c: 273: chk ^= bufferTx[5];
  2323  00CF  1283               	bcf	3,5	;RP0=0, select bank0
  2324  00D0  06BC               	xorwf	comandoRx@chk,f
  2325                           
  2326                           ;Main.c: 274: bufferTx[6] = startTime>>16;
  2327  00D1  0852               	movf	_startTime+2,w
  2328  00D2  1683               	bsf	3,5	;RP0=1, select bank1
  2329  00D3  00A6               	movwf	(_bufferTx^(0+128)+6)
  2330                           
  2331                           ;Main.c: 275: chk ^= bufferTx[6];
  2332  00D4  1283               	bcf	3,5	;RP0=0, select bank0
  2333  00D5  06BC               	xorwf	comandoRx@chk,f
  2334                           
  2335                           ;Main.c: 276: bufferTx[7] = startTime>>8;
  2336  00D6  0851               	movf	_startTime+1,w
  2337  00D7  1683               	bsf	3,5	;RP0=1, select bank1
  2338  00D8  00A7               	movwf	(_bufferTx^(0+128)+7)
  2339                           
  2340                           ;Main.c: 277: chk ^= bufferTx[7];
  2341  00D9  1283               	bcf	3,5	;RP0=0, select bank0
  2342  00DA  06BC               	xorwf	comandoRx@chk,f
  2343                           
  2344                           ;Main.c: 278: bufferTx[8] = startTime;
  2345  00DB  0850               	movf	_startTime,w
  2346  00DC  1683               	bsf	3,5	;RP0=1, select bank1
  2347  00DD  00A8               	movwf	(_bufferTx^(0+128)+8)
  2348                           
  2349                           ;Main.c: 279: chk ^= bufferTx[8];
  2350  00DE  1283               	bcf	3,5	;RP0=0, select bank0
  2351  00DF  06BC               	xorwf	comandoRx@chk,f
  2352                           
  2353                           ;Main.c: 280: bufferTx[9] = timer>>8;
  2354  00E0  085B               	movf	_timer+1,w
  2355  00E1  1683               	bsf	3,5	;RP0=1, select bank1
  2356  00E2  00A9               	movwf	(_bufferTx^(0+128)+9)
  2357                           
  2358                           ;Main.c: 281: chk ^= bufferTx[9];
  2359  00E3  1283               	bcf	3,5	;RP0=0, select bank0
  2360  00E4  06BC               	xorwf	comandoRx@chk,f
  2361                           
  2362                           ;Main.c: 282: bufferTx[10] = timer;
  2363  00E5  085A               	movf	_timer,w
  2364  00E6  1683               	bsf	3,5	;RP0=1, select bank1
  2365  00E7  00AA               	movwf	(_bufferTx^(0+128)+10)
  2366                           
  2367                           ;Main.c: 283: chk ^= bufferTx[10];
  2368  00E8  1283               	bcf	3,5	;RP0=0, select bank0
  2369  00E9  06BC               	xorwf	comandoRx@chk,f
  2370                           
  2371                           ;Main.c: 284: bufferTx[11] = logsToSend>>8;
  2372  00EA  083E               	movf	comandoRx@logsToSend+1,w
  2373  00EB  1683               	bsf	3,5	;RP0=1, select bank1
  2374  00EC  00AB               	movwf	(_bufferTx^(0+128)+11)
  2375                           
  2376                           ;Main.c: 285: chk ^= bufferTx[11];
  2377  00ED  1283               	bcf	3,5	;RP0=0, select bank0
  2378  00EE  06BC               	xorwf	comandoRx@chk,f
  2379                           
  2380                           ;Main.c: 286: bufferTx[12] = logsToSend;
  2381  00EF  083D               	movf	comandoRx@logsToSend,w
  2382  00F0  1683               	bsf	3,5	;RP0=1, select bank1
  2383  00F1  00AC               	movwf	(_bufferTx^(0+128)+12)
  2384                           
  2385                           ;Main.c: 287: chk ^= bufferTx[12];
  2386  00F2  1283               	bcf	3,5	;RP0=0, select bank0
  2387  00F3  06BC               	xorwf	comandoRx@chk,f
  2388                           
  2389                           ;Main.c: 288: bufferTx[13] = logStatus;
  2390  00F4  3000               	movlw	0
  2391  00F5  1AFA               	btfsc	_logStatus/(0+8),_logStatus& (0+7)
  2392  00F6  3001               	movlw	1
  2393  00F7  1683               	bsf	3,5	;RP0=1, select bank1
  2394  00F8  00AD               	movwf	(_bufferTx^(0+128)+13)
  2395                           
  2396                           ;Main.c: 289: chk ^= bufferTx[13];
  2397  00F9  1283               	bcf	3,5	;RP0=0, select bank0
  2398  00FA  06BC               	xorwf	comandoRx@chk,f
  2399                           
  2400                           ;Main.c: 290: resposta();
  2401  00FB  27B6  118A         	fcall	_resposta
  2402                           
  2403                           ;Main.c: 292: for (unsigned int i=0; i<logsToSend; i++){
  2404  00FD  01B3               	clrf	comandoRx@i_6106
  2405  00FE  01B4               	clrf	comandoRx@i_6106+1
  2406  00FF                     l4902:	
  2407  00FF  083E               	movf	comandoRx@logsToSend+1,w
  2408  0100  0234               	subwf	comandoRx@i_6106+1,w
  2409  0101  1D03               	skipz
  2410  0102  2905               	goto	u1355
  2411  0103  083D               	movf	comandoRx@logsToSend,w
  2412  0104  0233               	subwf	comandoRx@i_6106,w
  2413  0105                     u1355:	
  2414  0105  1803               	btfsc	3,0
  2415  0106  293A               	goto	l8352
  2416                           
  2417                           ;Main.c: 293: unsigned char readData[3];
  2418                           ;Main.c: 294: bufferTxLen = 3;
  2419  0107  3003               	movlw	3
  2420  0108  00E0               	movwf	_bufferTxLen
  2421                           
  2422                           ;Main.c: 295: eepromReadLog(0x0020+(3*i),readData);
  2423  0109  0834               	movf	comandoRx@i_6106+1,w
  2424  010A  00A1               	movwf	?___wmul+1
  2425  010B  0833               	movf	comandoRx@i_6106,w
  2426  010C  00A0               	movwf	?___wmul
  2427  010D  3003               	movlw	3
  2428  010E  00A2               	movwf	?___wmul+2
  2429  010F  01A3               	clrf	?___wmul+3
  2430  0110  238A  118A         	fcall	___wmul
  2431  0112  0821               	movf	?___wmul+1,w
  2432  0113  00A7               	movwf	?_eepromReadLog+1
  2433  0114  0820               	movf	?___wmul,w
  2434  0115  00A6               	movwf	?_eepromReadLog
  2435  0116  3020               	movlw	32
  2436  0117  07A6               	addwf	?_eepromReadLog,f
  2437  0118  1803               	skipnc
  2438  0119  0AA7               	incf	?_eepromReadLog+1,f
  2439  011A  302D               	movlw	comandoRx@readData& (0+255)
  2440  011B  00A8               	movwf	?_eepromReadLog+2
  2441  011C  24B7  118A         	fcall	_eepromReadLog
  2442                           
  2443                           ;Main.c: 296: bufferTx[0] = readData[0];
  2444  011E  082D               	movf	comandoRx@readData,w
  2445  011F  1683               	bsf	3,5	;RP0=1, select bank1
  2446  0120  00A0               	movwf	_bufferTx^(0+128)
  2447                           
  2448                           ;Main.c: 297: bufferTx[1] = readData[1];
  2449  0121  1283               	bcf	3,5	;RP0=0, select bank0
  2450  0122  082E               	movf	comandoRx@readData+1,w
  2451  0123  1683               	bsf	3,5	;RP0=1, select bank1
  2452  0124  00A1               	movwf	(_bufferTx^(0+128)+1)
  2453                           
  2454                           ;Main.c: 298: bufferTx[2] = readData[2];
  2455  0125  1283               	bcf	3,5	;RP0=0, select bank0
  2456  0126  082F               	movf	comandoRx@readData+2,w
  2457  0127  1683               	bsf	3,5	;RP0=1, select bank1
  2458  0128  00A2               	movwf	(_bufferTx^(0+128)+2)
  2459                           
  2460                           ;Main.c: 299: chk ^= bufferTx[0];
  2461  0129  0820               	movf	_bufferTx^(0+128),w
  2462  012A  1283               	bcf	3,5	;RP0=0, select bank0
  2463  012B  06BC               	xorwf	comandoRx@chk,f
  2464                           
  2465                           ;Main.c: 300: chk ^= bufferTx[1];
  2466  012C  1683               	bsf	3,5	;RP0=1, select bank1
  2467  012D  0821               	movf	(_bufferTx^(0+128)+1),w
  2468  012E  1283               	bcf	3,5	;RP0=0, select bank0
  2469  012F  06BC               	xorwf	comandoRx@chk,f
  2470                           
  2471                           ;Main.c: 301: chk ^= bufferTx[2];
  2472  0130  1683               	bsf	3,5	;RP0=1, select bank1
  2473  0131  0822               	movf	(_bufferTx^(0+128)+2),w
  2474  0132  1283               	bcf	3,5	;RP0=0, select bank0
  2475  0133  06BC               	xorwf	comandoRx@chk,f
  2476                           
  2477                           ;Main.c: 302: resposta();
  2478  0134  27B6  118A         	fcall	_resposta
  2479  0136  0AB3               	incf	comandoRx@i_6106,f
  2480  0137  1903               	skipnz
  2481  0138  0AB4               	incf	comandoRx@i_6106+1,f
  2482  0139  28FF               	goto	l4902
  2483  013A                     l8352:	
  2484                           
  2485                           ;Main.c: 303: }
  2486                           ;Main.c: 304: bufferTx[0] = chk;
  2487  013A  083C               	movf	comandoRx@chk,w
  2488  013B  1683               	bsf	3,5	;RP0=1, select bank1
  2489  013C  00A0               	movwf	_bufferTx^(0+128)
  2490                           
  2491                           ;Main.c: 305: bufferTx[1] = 0x0A;
  2492  013D  300A               	movlw	10
  2493  013E  00A1               	movwf	(_bufferTx^(0+128)+1)
  2494                           
  2495                           ;Main.c: 306: bufferTxLen = 2;
  2496  013F  3002               	movlw	2
  2497  0140  1283               	bcf	3,5	;RP0=0, select bank0
  2498  0141  00E0               	movwf	_bufferTxLen
  2499  0142  287B               	goto	l8238
  2500  0143                     l8356:	
  2501                           
  2502                           ;Main.c: 311: logsToSend = cmd[3];
  2503  0143  084B               	movf	(_cmd^(0+128)+3),w
  2504  0144  1283               	bcf	3,5	;RP0=0, select bank0
  2505  0145  00BD               	movwf	comandoRx@logsToSend
  2506  0146  01BE               	clrf	comandoRx@logsToSend+1
  2507                           
  2508                           ;Main.c: 312: logsToSend <<=8;
  2509  0147  00BE               	movwf	comandoRx@logsToSend+1
  2510  0148  01BD               	clrf	comandoRx@logsToSend
  2511                           
  2512                           ;Main.c: 313: logsToSend += cmd[4];
  2513  0149  1683               	bsf	3,5	;RP0=1, select bank1
  2514  014A  084C               	movf	(_cmd^(0+128)+4),w
  2515  014B  1283               	bcf	3,5	;RP0=0, select bank0
  2516  014C  07BD               	addwf	comandoRx@logsToSend,f
  2517  014D  1803               	skipnc
  2518  014E  0ABE               	incf	comandoRx@logsToSend+1,f
  2519                           
  2520                           ;Main.c: 314: unsigned char readData[3];
  2521                           ;Main.c: 315: bufferTxLen = 8;
  2522  014F  3008               	movlw	8
  2523  0150  00E0               	movwf	_bufferTxLen
  2524                           
  2525                           ;Main.c: 316: eepromReadLog(0x0020+(logsToSend*3),readData);
  2526  0151  083E               	movf	comandoRx@logsToSend+1,w
  2527  0152  00A1               	movwf	?___wmul+1
  2528  0153  083D               	movf	comandoRx@logsToSend,w
  2529  0154  00A0               	movwf	?___wmul
  2530  0155  3003               	movlw	3
  2531  0156  00A2               	movwf	?___wmul+2
  2532  0157  01A3               	clrf	?___wmul+3
  2533  0158  238A  118A         	fcall	___wmul
  2534  015A  0821               	movf	?___wmul+1,w
  2535  015B  00A7               	movwf	?_eepromReadLog+1
  2536  015C  0820               	movf	?___wmul,w
  2537  015D  00A6               	movwf	?_eepromReadLog
  2538  015E  3020               	movlw	32
  2539  015F  07A6               	addwf	?_eepromReadLog,f
  2540  0160  1803               	skipnc
  2541  0161  0AA7               	incf	?_eepromReadLog+1,f
  2542  0162  3030               	movlw	comandoRx@readData_6108& (0+255)
  2543  0163  00A8               	movwf	?_eepromReadLog+2
  2544  0164  24B7  118A         	fcall	_eepromReadLog
  2545                           
  2546                           ;Main.c: 318: bufferTx[0] = 0x55;
  2547  0166  3055               	movlw	85
  2548  0167  1683               	bsf	3,5	;RP0=1, select bank1
  2549  0168  00A0               	movwf	_bufferTx^(0+128)
  2550                           
  2551                           ;Main.c: 319: bufferTx[1] = 0x38;
  2552  0169  3038               	movlw	56
  2553  016A  00A1               	movwf	(_bufferTx^(0+128)+1)
  2554                           
  2555                           ;Main.c: 320: bufferTx[2] = 0x03;
  2556  016B  3003               	movlw	3
  2557  016C  00A2               	movwf	(_bufferTx^(0+128)+2)
  2558                           
  2559                           ;Main.c: 321: bufferTx[3] = readData[0];
  2560  016D  1283               	bcf	3,5	;RP0=0, select bank0
  2561  016E  0830               	movf	comandoRx@readData_6108,w
  2562  016F  1683               	bsf	3,5	;RP0=1, select bank1
  2563  0170  00A3               	movwf	(_bufferTx^(0+128)+3)
  2564                           
  2565                           ;Main.c: 322: bufferTx[4] = readData[1];
  2566  0171  1283               	bcf	3,5	;RP0=0, select bank0
  2567  0172  0831               	movf	comandoRx@readData_6108+1,w
  2568  0173  1683               	bsf	3,5	;RP0=1, select bank1
  2569  0174  00A4               	movwf	(_bufferTx^(0+128)+4)
  2570                           
  2571                           ;Main.c: 323: bufferTx[5] = readData[2];
  2572  0175  1283               	bcf	3,5	;RP0=0, select bank0
  2573  0176  0832               	movf	comandoRx@readData_6108+2,w
  2574  0177  1683               	bsf	3,5	;RP0=1, select bank1
  2575  0178  00A5               	movwf	(_bufferTx^(0+128)+5)
  2576                           
  2577                           ;Main.c: 324: bufferTx[6] = checksumCalc(bufferTx,8);
  2578  0179  3008               	movlw	8
  2579  017A  1283               	bcf	3,5	;RP0=0, select bank0
  2580  017B  00A0               	movwf	?_checksumCalc
  2581  017C  30A0               	movlw	_bufferTx& (0+255)
  2582  017D  2757  118A         	fcall	_checksumCalc
  2583  017F  1683               	bsf	3,5	;RP0=1, select bank1
  2584  0180  00A6               	movwf	(_bufferTx^(0+128)+6)
  2585                           
  2586                           ;Main.c: 325: bufferTx[7] = 0x0A;
  2587  0181  300A               	movlw	10
  2588  0182  00A7               	movwf	(_bufferTx^(0+128)+7)
  2589  0183  287B               	goto	l8238
  2590  0184                     l8376:	
  2591                           
  2592                           ;Main.c: 330: logsToSend = cmd[3];
  2593  0184  084B               	movf	(_cmd^(0+128)+3),w
  2594  0185  1283               	bcf	3,5	;RP0=0, select bank0
  2595  0186  00BD               	movwf	comandoRx@logsToSend
  2596  0187  01BE               	clrf	comandoRx@logsToSend+1
  2597                           
  2598                           ;Main.c: 331: logsToSend <<=8;
  2599  0188  00BE               	movwf	comandoRx@logsToSend+1
  2600  0189  01BD               	clrf	comandoRx@logsToSend
  2601                           
  2602                           ;Main.c: 332: logsToSend += cmd[4];
  2603  018A  1683               	bsf	3,5	;RP0=1, select bank1
  2604  018B  084C               	movf	(_cmd^(0+128)+4),w
  2605  018C  1283               	bcf	3,5	;RP0=0, select bank0
  2606  018D  07BD               	addwf	comandoRx@logsToSend,f
  2607  018E  1803               	skipnc
  2608  018F  0ABE               	incf	comandoRx@logsToSend+1,f
  2609                           
  2610                           ;Main.c: 334: bufferTxLen = 37;
  2611  0190  3025               	movlw	37
  2612  0191  00E0               	movwf	_bufferTxLen
  2613                           
  2614                           ;Main.c: 335: eepromReadLogPage(0x0020+(30*logsToSend),readDataBuffer);
  2615  0192  083E               	movf	comandoRx@logsToSend+1,w
  2616  0193  00A1               	movwf	?___wmul+1
  2617  0194  083D               	movf	comandoRx@logsToSend,w
  2618  0195  00A0               	movwf	?___wmul
  2619  0196  301E               	movlw	30
  2620  0197  00A2               	movwf	?___wmul+2
  2621  0198  01A3               	clrf	?___wmul+3
  2622  0199  238A  118A         	fcall	___wmul
  2623  019B  0821               	movf	?___wmul+1,w
  2624  019C  00A7               	movwf	?_eepromReadLogPage+1
  2625  019D  0820               	movf	?___wmul,w
  2626  019E  00A6               	movwf	?_eepromReadLogPage
  2627  019F  3020               	movlw	32
  2628  01A0  07A6               	addwf	?_eepromReadLogPage,f
  2629  01A1  1803               	skipnc
  2630  01A2  0AA7               	incf	?_eepromReadLogPage+1,f
  2631  01A3  3020               	movlw	_readDataBuffer& (0+255)
  2632  01A4  00A8               	movwf	?_eepromReadLogPage+2
  2633  01A5  247B  118A         	fcall	_eepromReadLogPage
  2634                           
  2635                           ;Main.c: 337: bufferTx[0] = 0x55;
  2636  01A7  3055               	movlw	85
  2637  01A8  1683               	bsf	3,5	;RP0=1, select bank1
  2638  01A9  00A0               	movwf	_bufferTx^(0+128)
  2639                           
  2640                           ;Main.c: 338: bufferTx[1] = 0x39;
  2641  01AA  3039               	movlw	57
  2642  01AB  00A1               	movwf	(_bufferTx^(0+128)+1)
  2643                           
  2644                           ;Main.c: 339: bufferTx[2] = 0x20;
  2645  01AC  3020               	movlw	32
  2646  01AD  00A2               	movwf	(_bufferTx^(0+128)+2)
  2647                           
  2648                           ;Main.c: 340: bufferTx[3] = cmd[3];
  2649  01AE  084B               	movf	(_cmd^(0+128)+3),w
  2650  01AF  00A3               	movwf	(_bufferTx^(0+128)+3)
  2651                           
  2652                           ;Main.c: 341: bufferTx[4] = cmd[4];
  2653  01B0  084C               	movf	(_cmd^(0+128)+4),w
  2654  01B1  00A4               	movwf	(_bufferTx^(0+128)+4)
  2655                           
  2656                           ;Main.c: 343: for(int i=0;i<30;i++){
  2657  01B2  1283               	bcf	3,5	;RP0=0, select bank0
  2658  01B3  01B9               	clrf	comandoRx@i_6109
  2659  01B4  01BA               	clrf	comandoRx@i_6109+1
  2660  01B5                     l8396:	
  2661                           
  2662                           ;Main.c: 344: bufferTx[i+5] = readDataBuffer[i];
  2663  01B5  1283               	bcf	3,5	;RP0=0, select bank0
  2664  01B6  1303               	bcf	3,6	;RP1=0, select bank0
  2665  01B7  0839               	movf	comandoRx@i_6109,w
  2666  01B8  3E20               	addlw	_readDataBuffer& (0+255)
  2667  01B9  0084               	movwf	4
  2668  01BA  1783               	bsf	3,7	;select IRP bank2
  2669  01BB  0800               	movf	0,w
  2670  01BC  00AC               	movwf	??_comandoRx
  2671  01BD  0839               	movf	comandoRx@i_6109,w
  2672  01BE  3EA5               	addlw	(_bufferTx+5)& (0+255)
  2673  01BF  0084               	movwf	4
  2674  01C0  082C               	movf	??_comandoRx,w
  2675  01C1  1383               	bcf	3,7	;select IRP bank1
  2676  01C2  0080               	movwf	0
  2677  01C3  0AB9               	incf	comandoRx@i_6109,f
  2678  01C4  1903               	skipnz
  2679  01C5  0ABA               	incf	comandoRx@i_6109+1,f
  2680  01C6  083A               	movf	comandoRx@i_6109+1,w
  2681  01C7  3A80               	xorlw	128
  2682  01C8  00FF               	movwf	127
  2683  01C9  3080               	movlw	128
  2684  01CA  027F               	subwf	127,w
  2685  01CB  1D03               	skipz
  2686  01CC  29CF               	goto	u1365
  2687  01CD  301E               	movlw	30
  2688  01CE  0239               	subwf	comandoRx@i_6109,w
  2689  01CF                     u1365:	
  2690  01CF  1C03               	skipc
  2691  01D0  29B5               	goto	l8396
  2692                           
  2693                           ;Main.c: 345: }
  2694                           ;Main.c: 346: bufferTx[35] = checksumCalc(bufferTx,37);
  2695  01D1  3025               	movlw	37
  2696  01D2  1283               	bcf	3,5	;RP0=0, select bank0
  2697  01D3  1303               	bcf	3,6	;RP1=0, select bank0
  2698  01D4  00A0               	movwf	?_checksumCalc
  2699  01D5  30A0               	movlw	_bufferTx& (0+255)
  2700  01D6  2757  118A         	fcall	_checksumCalc
  2701  01D8  1683               	bsf	3,5	;RP0=1, select bank1
  2702  01D9  00C3               	movwf	(_bufferTx^(0+128)+35)
  2703                           
  2704                           ;Main.c: 347: bufferTx[36] = 0x0A;
  2705  01DA  300A               	movlw	10
  2706  01DB  00C4               	movwf	(_bufferTx^(0+128)+36)
  2707  01DC  287B               	goto	l8238
  2708  01DD                     l8410:	
  2709  01DD  1683               	bsf	3,5	;RP0=1, select bank1
  2710  01DE  0849               	movf	(_cmd^(0+128)+1),w
  2711                           
  2712                           ; Switch size 1, requested type "space"
  2713                           ; Number of cases is 10, Range of values is 48 to 57
  2714                           ; switch strategies available:
  2715                           ; Name         Instructions Cycles
  2716                           ; direct_byte           30    10 (fixed)
  2717                           ; simple_byte           31    16 (average)
  2718                           ; jumptable            263     9 (fixed)
  2719                           ;	Chosen strategy is direct_byte
  2720  01DF  3ED0               	addlw	-48
  2721  01E0  1C03               	skipc
  2722  01E1  29ED               	goto	l4894
  2723  01E2  0084               	movwf	4
  2724  01E3  300A               	movlw	10
  2725  01E4  0204               	subwf	4,w
  2726  01E5  1803               	skipnc
  2727  01E6  29ED               	goto	l4894
  2728  01E7  3008               	movlw	high S8542
  2729  01E8  008A               	movwf	10
  2730  01E9  1003               	clrc
  2731  01EA  0D04               	rlf	4,w
  2732  01EB  3E3F               	addlw	low S8542
  2733  01EC  0082               	movwf	2
  2734  01ED                     l4894:	
  2735                           
  2736                           ;Main.c: 353: if (flagRespostaBLE){
  2737  01ED  1D7A               	btfss	_flagRespostaBLE/(0+8),_flagRespostaBLE& (0+7)
  2738  01EE  0008               	return
  2739                           
  2740                           ;Main.c: 354: flagRespostaBLE = 0;
  2741  01EF  117A               	bcf	_flagRespostaBLE/(0+8),_flagRespostaBLE& (0+7)
  2742                           
  2743                           ;Main.c: 355: resposta();
  2744  01F0  2FB6               	ljmp	l7878
  2745  01F1                     l8416:	
  2746                           
  2747                           ;Main.c: 358: else{
  2748                           ;Main.c: 359: UART_send_char(0x55);
  2749  01F1  3055               	movlw	85
  2750  01F2  274D  118A         	fcall	_UART_send_char
  2751                           
  2752                           ;Main.c: 360: UART_send_char(0x40);
  2753  01F4  3040               	movlw	64
  2754  01F5  274D  118A         	fcall	_UART_send_char
  2755                           
  2756                           ;Main.c: 361: UART_send_char(0x00);
  2757  01F7  3000               	movlw	0
  2758  01F8  274D  118A         	fcall	_UART_send_char
  2759                           
  2760                           ;Main.c: 362: UART_send_char(0x40);
  2761  01FA  3040               	movlw	64
  2762  01FB  274D  118A         	fcall	_UART_send_char
  2763                           
  2764                           ;Main.c: 363: UART_send_char(0x0A);
  2765  01FD  300A               	movlw	10
  2766  01FE  2F4D               	ljmp	_UART_send_char
  2767  01FF                     __end_of_comandoRx:	
  2768  01FF                     __ptext995:	
  2769 ;; =============== function _initVars ends ============
  2770                           
  2771                           
  2772 ;; *************** function _logSave *****************
  2773 ;; Defined at:
  2774 ;;		line 164 in file "Main.c"
  2775 ;; Parameters:    Size  Location     Type
  2776 ;;		None
  2777 ;; Auto vars:     Size  Location     Type
  2778 ;;  auxAddr         2   39[BANK0 ] unsigned int 
  2779 ;; Return value:  Size  Location     Type
  2780 ;;		None               void
  2781 ;; Registers used:
  2782 ;;		wreg, status,2, status,0, pclath, cstack
  2783 ;; Tracked objects:
  2784 ;;		On entry : 60/0
  2785 ;;		On exit  : 0/0
  2786 ;;		Unchanged: 0/0
  2787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2788 ;;      Params:         0       0       0       0
  2789 ;;      Locals:         0       2       0       0
  2790 ;;      Temps:          0       2       0       0
  2791 ;;      Totals:         0       4       0       0
  2792 ;;Total ram usage:        4 bytes
  2793 ;; Hardware stack levels used:    1
  2794 ;; Hardware stack levels required when called:    7
  2795 ;; This function calls:
  2796 ;;		___wmul
  2797 ;;		_sendTriggerMeasurementCmd
  2798 ;;		_readTemp
  2799 ;;		_eepromWriteByte
  2800 ;; This function is called by:
  2801 ;;		_main
  2802 ;; This function uses a non-reentrant model
  2803 ;;
  2804  01FF                     _logSave:	
  2805                           
  2806                           ;Main.c: 165: if (numOfLogs < 10912){
  2807                           
  2808                           ; Regs used in _logSave: [wreg+status,2+status,0+pclath+cstack]
  2809  01FF  302A               	movlw	42
  2810  0200  025F               	subwf	_numOfLogs+1,w
  2811  0201  30A0               	movlw	160
  2812  0202  1903               	skipnz
  2813  0203  025E               	subwf	_numOfLogs,w
  2814  0204  1803               	skipnc
  2815  0205  0008               	return
  2816                           
  2817                           ;Main.c: 166: unsigned int auxAddr;
  2818                           ;Main.c: 168: auxAddr = 0x0020+(numOfLogs*3);
  2819  0206  085F               	movf	_numOfLogs+1,w
  2820  0207  00A1               	movwf	?___wmul+1
  2821  0208  085E               	movf	_numOfLogs,w
  2822  0209  00A0               	movwf	?___wmul
  2823  020A  3003               	movlw	3
  2824  020B  00A2               	movwf	?___wmul+2
  2825  020C  01A3               	clrf	?___wmul+3
  2826  020D  238A  118A         	fcall	___wmul
  2827  020F  0821               	movf	?___wmul+1,w
  2828  0210  00C8               	movwf	logSave@auxAddr+1
  2829  0211  0820               	movf	?___wmul,w
  2830  0212  00C7               	movwf	logSave@auxAddr
  2831  0213  3020               	movlw	32
  2832  0214  07C7               	addwf	logSave@auxAddr,f
  2833  0215  1803               	skipnc
  2834  0216  0AC8               	incf	logSave@auxAddr+1,f
  2835                           
  2836                           ;Main.c: 170: sendTriggerMeasurementCmd();
  2837  0217  200F  118A         	fcall	_sendTriggerMeasurementCmd
  2838                           
  2839                           ;Main.c: 171: _delay((unsigned long)((100)*(4000000/4000.0)));
  2840  0219  3082               	movlw	130
  2841  021A  00C6               	movwf	??_logSave+1
  2842  021B  30DD               	movlw	221
  2843  021C  00C5               	movwf	??_logSave
  2844  021D                     u1687:	
  2845  021D  0BC5               	decfsz	??_logSave,f
  2846  021E  2A1D               	goto	u1687
  2847  021F  0BC6               	decfsz	??_logSave+1,f
  2848  0220  2A1D               	goto	u1687
  2849  0221  2A22               	nop2
  2850                           
  2851                           ;Main.c: 172: readTemp();
  2852  0222  24E0  118A         	fcall	_readTemp
  2853                           
  2854                           ;Main.c: 175: eepromWriteByte(auxAddr,readTemperature);
  2855  0224  0848               	movf	logSave@auxAddr+1,w
  2856  0225  00A7               	movwf	?_eepromWriteByte+1
  2857  0226  0847               	movf	logSave@auxAddr,w
  2858  0227  00A6               	movwf	?_eepromWriteByte
  2859  0228  0862               	movf	_readTemperature,w
  2860  0229  00A8               	movwf	?_eepromWriteByte+2
  2861  022A  237B  118A         	fcall	_eepromWriteByte
  2862                           
  2863                           ;Main.c: 176: auxAddr++;
  2864  022C  0AC7               	incf	logSave@auxAddr,f
  2865  022D  1903               	skipnz
  2866  022E  0AC8               	incf	logSave@auxAddr+1,f
  2867                           
  2868                           ;Main.c: 177: _delay((unsigned long)((5)*(4000000/4000.0)));
  2869  022F  3007               	movlw	7
  2870  0230  00C6               	movwf	??_logSave+1
  2871  0231  307D               	movlw	125
  2872  0232  00C5               	movwf	??_logSave
  2873  0233                     u1697:	
  2874  0233  0BC5               	decfsz	??_logSave,f
  2875  0234  2A33               	goto	u1697
  2876  0235  0BC6               	decfsz	??_logSave+1,f
  2877  0236  2A33               	goto	u1697
  2878                           
  2879                           ;Main.c: 178: eepromWriteByte(auxAddr,readTemperatureDec);
  2880  0237  1283               	bcf	3,5	;RP0=0, select bank0
  2881  0238  1303               	bcf	3,6	;RP1=0, select bank0
  2882  0239  0848               	movf	logSave@auxAddr+1,w
  2883  023A  00A7               	movwf	?_eepromWriteByte+1
  2884  023B  0847               	movf	logSave@auxAddr,w
  2885  023C  00A6               	movwf	?_eepromWriteByte
  2886  023D  0863               	movf	_readTemperatureDec,w
  2887  023E  00A8               	movwf	?_eepromWriteByte+2
  2888  023F  237B  118A         	fcall	_eepromWriteByte
  2889                           
  2890                           ;Main.c: 179: auxAddr++;
  2891  0241  0AC7               	incf	logSave@auxAddr,f
  2892  0242  1903               	skipnz
  2893  0243  0AC8               	incf	logSave@auxAddr+1,f
  2894                           
  2895                           ;Main.c: 180: _delay((unsigned long)((5)*(4000000/4000.0)));
  2896  0244  3007               	movlw	7
  2897  0245  00C6               	movwf	??_logSave+1
  2898  0246  307D               	movlw	125
  2899  0247  00C5               	movwf	??_logSave
  2900  0248                     u1707:	
  2901  0248  0BC5               	decfsz	??_logSave,f
  2902  0249  2A48               	goto	u1707
  2903  024A  0BC6               	decfsz	??_logSave+1,f
  2904  024B  2A48               	goto	u1707
  2905                           
  2906                           ;Main.c: 181: eepromWriteByte(auxAddr,readUmidity);
  2907  024C  1283               	bcf	3,5	;RP0=0, select bank0
  2908  024D  1303               	bcf	3,6	;RP1=0, select bank0
  2909  024E  0848               	movf	logSave@auxAddr+1,w
  2910  024F  00A7               	movwf	?_eepromWriteByte+1
  2911  0250  0847               	movf	logSave@auxAddr,w
  2912  0251  00A6               	movwf	?_eepromWriteByte
  2913  0252  0864               	movf	_readUmidity,w
  2914  0253  00A8               	movwf	?_eepromWriteByte+2
  2915  0254  237B  118A         	fcall	_eepromWriteByte
  2916                           
  2917                           ;Main.c: 182: _delay((unsigned long)((5)*(4000000/4000.0)));
  2918  0256  3007               	movlw	7
  2919  0257  00C6               	movwf	??_logSave+1
  2920  0258  307D               	movlw	125
  2921  0259  00C5               	movwf	??_logSave
  2922  025A                     u1717:	
  2923  025A  0BC5               	decfsz	??_logSave,f
  2924  025B  2A5A               	goto	u1717
  2925  025C  0BC6               	decfsz	??_logSave+1,f
  2926  025D  2A5A               	goto	u1717
  2927                           
  2928                           ;Main.c: 185: numOfLogs++;
  2929  025E  1283               	bcf	3,5	;RP0=0, select bank0
  2930  025F  1303               	bcf	3,6	;RP1=0, select bank0
  2931  0260  0ADE               	incf	_numOfLogs,f
  2932  0261  1903               	skipnz
  2933  0262  0ADF               	incf	_numOfLogs+1,f
  2934                           
  2935                           ;Main.c: 186: eepromWriteByte(0x0006,numOfLogs>>8);
  2936  0263  3006               	movlw	6
  2937  0264  00A6               	movwf	?_eepromWriteByte
  2938  0265  01A7               	clrf	?_eepromWriteByte+1
  2939  0266  085F               	movf	_numOfLogs+1,w
  2940  0267  00A8               	movwf	?_eepromWriteByte+2
  2941  0268  237B  118A         	fcall	_eepromWriteByte
  2942                           
  2943                           ;Main.c: 187: _delay((unsigned long)((5)*(4000000/4000.0)));
  2944  026A  3007               	movlw	7
  2945  026B  00C6               	movwf	??_logSave+1
  2946  026C  307D               	movlw	125
  2947  026D  00C5               	movwf	??_logSave
  2948  026E                     u1727:	
  2949  026E  0BC5               	decfsz	??_logSave,f
  2950  026F  2A6E               	goto	u1727
  2951  0270  0BC6               	decfsz	??_logSave+1,f
  2952  0271  2A6E               	goto	u1727
  2953                           
  2954                           ;Main.c: 188: eepromWriteByte(0x0007,numOfLogs);
  2955  0272  3007               	movlw	7
  2956  0273  1283               	bcf	3,5	;RP0=0, select bank0
  2957  0274  1303               	bcf	3,6	;RP1=0, select bank0
  2958  0275  00A6               	movwf	?_eepromWriteByte
  2959  0276  01A7               	clrf	?_eepromWriteByte+1
  2960  0277  085E               	movf	_numOfLogs,w
  2961  0278  00A8               	movwf	?_eepromWriteByte+2
  2962  0279  237B  118A         	fcall	_eepromWriteByte
  2963                           
  2964                           ;Main.c: 189: _delay((unsigned long)((5)*(4000000/4000.0)));
  2965  027B  3007               	movlw	7
  2966  027C  00C6               	movwf	??_logSave+1
  2967  027D  307D               	movlw	125
  2968  027E  00C5               	movwf	??_logSave
  2969  027F                     u1737:	
  2970  027F  0BC5               	decfsz	??_logSave,f
  2971  0280  2A7F               	goto	u1737
  2972  0281  0BC6               	decfsz	??_logSave+1,f
  2973  0282  2A7F               	goto	u1737
  2974  0283  0008               	return
  2975  0284                     __end_of_logSave:	
  2976  0284                     __ptext999:	
  2977 ;; =============== function _eepromReadLog ends ============
  2978                           
  2979                           
  2980 ;; *************** function _startLogCmd *****************
  2981 ;; Defined at:
  2982 ;;		line 59 in file "protocolo.c"
  2983 ;; Parameters:    Size  Location     Type
  2984 ;;		None
  2985 ;; Auto vars:     Size  Location     Type
  2986 ;;		None
  2987 ;; Return value:  Size  Location     Type
  2988 ;;		None               void
  2989 ;; Registers used:
  2990 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2991 ;; Tracked objects:
  2992 ;;		On entry : 0/120
  2993 ;;		On exit  : 60/20
  2994 ;;		Unchanged: 0/0
  2995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2996 ;;      Params:         0       0       0       0
  2997 ;;      Locals:         0       0       0       0
  2998 ;;      Temps:          0       2       0       0
  2999 ;;      Totals:         0       2       0       0
  3000 ;;Total ram usage:        2 bytes
  3001 ;; Hardware stack levels used:    1
  3002 ;; Hardware stack levels required when called:    7
  3003 ;; This function calls:
  3004 ;;		_eepromWriteByte
  3005 ;;		_checksumCalc
  3006 ;; This function is called by:
  3007 ;;		_comandoRx
  3008 ;; This function uses a non-reentrant model
  3009 ;;
  3010  0284                     _startLogCmd:	
  3011                           
  3012                           ;protocolo.c: 62: TMR1ON = 0;
  3013                           
  3014 ;; hardware stack exceeded
  3015                           ; Regs used in _startLogCmd: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3016  0284  1283               	bcf	3,5	;RP0=0, select bank0
  3017  0285  1303               	bcf	3,6	;RP1=0, select bank0
  3018  0286  1010               	bcf	16,0
  3019                           
  3020                           ;protocolo.c: 63: TMR1L = 0x00;
  3021  0287  018E               	clrf	14	;volatile
  3022                           
  3023                           ;protocolo.c: 64: TMR1H = 0x60;
  3024  0288  3060               	movlw	96
  3025  0289  008F               	movwf	15	;volatile
  3026                           
  3027                           ;protocolo.c: 65: TMR1IF = 0;
  3028  028A  100C               	bcf	12,0
  3029                           
  3030                           ;protocolo.c: 66: TMR1ON = 1;
  3031  028B  1410               	bsf	16,0
  3032                           
  3033                           ;protocolo.c: 69: startTime = cmd[3];
  3034  028C  1683               	bsf	3,5	;RP0=1, select bank1
  3035  028D  084B               	movf	(_cmd^(0+128)+3),w
  3036  028E  1283               	bcf	3,5	;RP0=0, select bank0
  3037  028F  00D0               	movwf	_startTime
  3038  0290  01D1               	clrf	_startTime+1
  3039  0291  01D2               	clrf	_startTime+2
  3040  0292  01D3               	clrf	_startTime+3
  3041                           
  3042                           ;protocolo.c: 70: startTime <<= 8;
  3043  0293  0852               	movf	_startTime+2,w
  3044  0294  00D3               	movwf	_startTime+3
  3045  0295  0851               	movf	_startTime+1,w
  3046  0296  00D2               	movwf	_startTime+2
  3047  0297  0850               	movf	_startTime,w
  3048  0298  00D1               	movwf	_startTime+1
  3049  0299  01D0               	clrf	_startTime
  3050                           
  3051                           ;protocolo.c: 71: startTime +=cmd[4];
  3052  029A  1683               	bsf	3,5	;RP0=1, select bank1
  3053  029B  084C               	movf	(_cmd^(0+128)+4),w
  3054  029C  1283               	bcf	3,5	;RP0=0, select bank0
  3055  029D  07D0               	addwf	_startTime,f
  3056  029E  3001               	movlw	1
  3057  029F  1803               	skipnc
  3058  02A0  07D1               	addwf	_startTime+1,f
  3059  02A1  1803               	skipnc
  3060  02A2  07D2               	addwf	_startTime+2,f
  3061  02A3  1803               	skipnc
  3062  02A4  07D3               	addwf	_startTime+3,f
  3063                           
  3064                           ;protocolo.c: 72: startTime <<= 8;
  3065  02A5  0852               	movf	_startTime+2,w
  3066  02A6  00D3               	movwf	_startTime+3
  3067  02A7  0851               	movf	_startTime+1,w
  3068  02A8  00D2               	movwf	_startTime+2
  3069  02A9  0850               	movf	_startTime,w
  3070  02AA  00D1               	movwf	_startTime+1
  3071  02AB  01D0               	clrf	_startTime
  3072                           
  3073                           ;protocolo.c: 73: startTime +=cmd[5];
  3074  02AC  1683               	bsf	3,5	;RP0=1, select bank1
  3075  02AD  084D               	movf	(_cmd^(0+128)+5),w
  3076  02AE  1283               	bcf	3,5	;RP0=0, select bank0
  3077  02AF  07D0               	addwf	_startTime,f
  3078  02B0  3001               	movlw	1
  3079  02B1  1803               	skipnc
  3080  02B2  07D1               	addwf	_startTime+1,f
  3081  02B3  1803               	skipnc
  3082  02B4  07D2               	addwf	_startTime+2,f
  3083  02B5  1803               	skipnc
  3084  02B6  07D3               	addwf	_startTime+3,f
  3085                           
  3086                           ;protocolo.c: 74: startTime <<= 8;
  3087  02B7  0852               	movf	_startTime+2,w
  3088  02B8  00D3               	movwf	_startTime+3
  3089  02B9  0851               	movf	_startTime+1,w
  3090  02BA  00D2               	movwf	_startTime+2
  3091  02BB  0850               	movf	_startTime,w
  3092  02BC  00D1               	movwf	_startTime+1
  3093  02BD  01D0               	clrf	_startTime
  3094                           
  3095                           ;protocolo.c: 75: startTime +=cmd[6];
  3096  02BE  1683               	bsf	3,5	;RP0=1, select bank1
  3097  02BF  084E               	movf	(_cmd^(0+128)+6),w
  3098  02C0  1283               	bcf	3,5	;RP0=0, select bank0
  3099  02C1  07D0               	addwf	_startTime,f
  3100  02C2  3001               	movlw	1
  3101  02C3  1803               	skipnc
  3102  02C4  07D1               	addwf	_startTime+1,f
  3103  02C5  1803               	skipnc
  3104  02C6  07D2               	addwf	_startTime+2,f
  3105  02C7  1803               	skipnc
  3106  02C8  07D3               	addwf	_startTime+3,f
  3107                           
  3108                           ;protocolo.c: 76: timeNow = startTime;
  3109  02C9  0853               	movf	_startTime+3,w
  3110  02CA  00D7               	movwf	_timeNow+3
  3111  02CB  0852               	movf	_startTime+2,w
  3112  02CC  00D6               	movwf	_timeNow+2
  3113  02CD  0851               	movf	_startTime+1,w
  3114  02CE  00D5               	movwf	_timeNow+1
  3115  02CF  0850               	movf	_startTime,w
  3116  02D0  00D4               	movwf	_timeNow
  3117                           
  3118                           ;protocolo.c: 77: timer = newTimer;
  3119  02D1  0859               	movf	_newTimer+1,w
  3120  02D2  00DB               	movwf	_timer+1
  3121  02D3  0858               	movf	_newTimer,w
  3122  02D4  00DA               	movwf	_timer
  3123                           
  3124                           ;protocolo.c: 78: contTimer = timer;
  3125  02D5  085B               	movf	_timer+1,w
  3126  02D6  00DD               	movwf	_contTimer+1
  3127  02D7  085A               	movf	_timer,w
  3128  02D8  00DC               	movwf	_contTimer
  3129  02D9  3006               	movlw	6
  3130                           
  3131                           ;protocolo.c: 79: logStatus = 1;
  3132  02DA  16FA               	bsf	_logStatus/(0+8),_logStatus& (0+7)
  3133                           
  3134                           ;protocolo.c: 80: numOfLogs = 0;
  3135  02DB  01DE               	clrf	_numOfLogs
  3136  02DC  01DF               	clrf	_numOfLogs+1
  3137                           
  3138                           ;protocolo.c: 83: eepromWriteByte(0x0006,0x00);
  3139  02DD  00A6               	movwf	?_eepromWriteByte
  3140  02DE  01A7               	clrf	?_eepromWriteByte+1
  3141  02DF  01A8               	clrf	?_eepromWriteByte+2
  3142  02E0  237B  118A         	fcall	_eepromWriteByte
  3143                           
  3144                           ;protocolo.c: 84: _delay((unsigned long)((5)*(4000000/4000.0)));
  3145  02E2  3007               	movlw	7
  3146  02E3  00AA               	movwf	??_startLogCmd+1
  3147  02E4  307D               	movlw	125
  3148  02E5  00A9               	movwf	??_startLogCmd
  3149  02E6                     u1747:	
  3150  02E6  0BA9               	decfsz	??_startLogCmd,f
  3151  02E7  2AE6               	goto	u1747
  3152  02E8  0BAA               	decfsz	??_startLogCmd+1,f
  3153  02E9  2AE6               	goto	u1747
  3154                           
  3155                           ;protocolo.c: 85: eepromWriteByte(0x0007,0x00);
  3156  02EA  3007               	movlw	7
  3157  02EB  1283               	bcf	3,5	;RP0=0, select bank0
  3158  02EC  1303               	bcf	3,6	;RP1=0, select bank0
  3159  02ED  00A6               	movwf	?_eepromWriteByte
  3160  02EE  01A7               	clrf	?_eepromWriteByte+1
  3161  02EF  01A8               	clrf	?_eepromWriteByte+2
  3162  02F0  237B  118A         	fcall	_eepromWriteByte
  3163                           
  3164                           ;protocolo.c: 86: _delay((unsigned long)((5)*(4000000/4000.0)));
  3165  02F2  3007               	movlw	7
  3166  02F3  00AA               	movwf	??_startLogCmd+1
  3167  02F4  307D               	movlw	125
  3168  02F5  00A9               	movwf	??_startLogCmd
  3169  02F6                     u1757:	
  3170  02F6  0BA9               	decfsz	??_startLogCmd,f
  3171  02F7  2AF6               	goto	u1757
  3172  02F8  0BAA               	decfsz	??_startLogCmd+1,f
  3173  02F9  2AF6               	goto	u1757
  3174                           
  3175                           ;protocolo.c: 89: eepromWriteByte(0x0004,timer>>8);
  3176  02FA  3004               	movlw	4
  3177  02FB  1283               	bcf	3,5	;RP0=0, select bank0
  3178  02FC  1303               	bcf	3,6	;RP1=0, select bank0
  3179  02FD  00A6               	movwf	?_eepromWriteByte
  3180  02FE  01A7               	clrf	?_eepromWriteByte+1
  3181  02FF  085B               	movf	_timer+1,w
  3182  0300  00A8               	movwf	?_eepromWriteByte+2
  3183  0301  237B  118A         	fcall	_eepromWriteByte
  3184                           
  3185                           ;protocolo.c: 90: _delay((unsigned long)((5)*(4000000/4000.0)));
  3186  0303  3007               	movlw	7
  3187  0304  00AA               	movwf	??_startLogCmd+1
  3188  0305  307D               	movlw	125
  3189  0306  00A9               	movwf	??_startLogCmd
  3190  0307                     u1767:	
  3191  0307  0BA9               	decfsz	??_startLogCmd,f
  3192  0308  2B07               	goto	u1767
  3193  0309  0BAA               	decfsz	??_startLogCmd+1,f
  3194  030A  2B07               	goto	u1767
  3195                           
  3196                           ;protocolo.c: 91: eepromWriteByte(0x0005,timer);
  3197  030B  3005               	movlw	5
  3198  030C  1283               	bcf	3,5	;RP0=0, select bank0
  3199  030D  1303               	bcf	3,6	;RP1=0, select bank0
  3200  030E  00A6               	movwf	?_eepromWriteByte
  3201  030F  01A7               	clrf	?_eepromWriteByte+1
  3202  0310  085A               	movf	_timer,w
  3203  0311  00A8               	movwf	?_eepromWriteByte+2
  3204  0312  237B  118A         	fcall	_eepromWriteByte
  3205                           
  3206                           ;protocolo.c: 92: _delay((unsigned long)((5)*(4000000/4000.0)));
  3207  0314  3007               	movlw	7
  3208  0315  00AA               	movwf	??_startLogCmd+1
  3209  0316  307D               	movlw	125
  3210  0317  00A9               	movwf	??_startLogCmd
  3211  0318                     u1777:	
  3212  0318  0BA9               	decfsz	??_startLogCmd,f
  3213  0319  2B18               	goto	u1777
  3214  031A  0BAA               	decfsz	??_startLogCmd+1,f
  3215  031B  2B18               	goto	u1777
  3216                           
  3217                           ;protocolo.c: 95: eepromWriteByte(0x0000,cmd[3]);
  3218  031C  1283               	bcf	3,5	;RP0=0, select bank0
  3219  031D  1303               	bcf	3,6	;RP1=0, select bank0
  3220  031E  01A6               	clrf	?_eepromWriteByte
  3221  031F  01A7               	clrf	?_eepromWriteByte+1
  3222  0320  1683               	bsf	3,5	;RP0=1, select bank1
  3223  0321  084B               	movf	(_cmd^(0+128)+3),w
  3224  0322  1283               	bcf	3,5	;RP0=0, select bank0
  3225  0323  00A8               	movwf	?_eepromWriteByte+2
  3226  0324  237B  118A         	fcall	_eepromWriteByte
  3227                           
  3228                           ;protocolo.c: 96: _delay((unsigned long)((5)*(4000000/4000.0)));
  3229  0326  3007               	movlw	7
  3230  0327  00AA               	movwf	??_startLogCmd+1
  3231  0328  307D               	movlw	125
  3232  0329  00A9               	movwf	??_startLogCmd
  3233  032A                     u1787:	
  3234  032A  0BA9               	decfsz	??_startLogCmd,f
  3235  032B  2B2A               	goto	u1787
  3236  032C  0BAA               	decfsz	??_startLogCmd+1,f
  3237  032D  2B2A               	goto	u1787
  3238                           
  3239                           ;protocolo.c: 97: eepromWriteByte(0x0001,cmd[4]);
  3240  032E  1283               	bcf	3,5	;RP0=0, select bank0
  3241  032F  1303               	bcf	3,6	;RP1=0, select bank0
  3242  0330  01A6               	clrf	?_eepromWriteByte
  3243  0331  0AA6               	incf	?_eepromWriteByte,f
  3244  0332  01A7               	clrf	?_eepromWriteByte+1
  3245  0333  1683               	bsf	3,5	;RP0=1, select bank1
  3246  0334  084C               	movf	(_cmd^(0+128)+4),w
  3247  0335  1283               	bcf	3,5	;RP0=0, select bank0
  3248  0336  00A8               	movwf	?_eepromWriteByte+2
  3249  0337  237B  118A         	fcall	_eepromWriteByte
  3250                           
  3251                           ;protocolo.c: 98: _delay((unsigned long)((5)*(4000000/4000.0)));
  3252  0339  3007               	movlw	7
  3253  033A  00AA               	movwf	??_startLogCmd+1
  3254  033B  307D               	movlw	125
  3255  033C  00A9               	movwf	??_startLogCmd
  3256  033D                     u1797:	
  3257  033D  0BA9               	decfsz	??_startLogCmd,f
  3258  033E  2B3D               	goto	u1797
  3259  033F  0BAA               	decfsz	??_startLogCmd+1,f
  3260  0340  2B3D               	goto	u1797
  3261                           
  3262                           ;protocolo.c: 99: eepromWriteByte(0x0002,cmd[5]);
  3263  0341  3002               	movlw	2
  3264  0342  1283               	bcf	3,5	;RP0=0, select bank0
  3265  0343  1303               	bcf	3,6	;RP1=0, select bank0
  3266  0344  00A6               	movwf	?_eepromWriteByte
  3267  0345  01A7               	clrf	?_eepromWriteByte+1
  3268  0346  1683               	bsf	3,5	;RP0=1, select bank1
  3269  0347  084D               	movf	(_cmd^(0+128)+5),w
  3270  0348  1283               	bcf	3,5	;RP0=0, select bank0
  3271  0349  00A8               	movwf	?_eepromWriteByte+2
  3272  034A  237B  118A         	fcall	_eepromWriteByte
  3273                           
  3274                           ;protocolo.c: 100: _delay((unsigned long)((5)*(4000000/4000.0)));
  3275  034C  3007               	movlw	7
  3276  034D  00AA               	movwf	??_startLogCmd+1
  3277  034E  307D               	movlw	125
  3278  034F  00A9               	movwf	??_startLogCmd
  3279  0350                     u1807:	
  3280  0350  0BA9               	decfsz	??_startLogCmd,f
  3281  0351  2B50               	goto	u1807
  3282  0352  0BAA               	decfsz	??_startLogCmd+1,f
  3283  0353  2B50               	goto	u1807
  3284                           
  3285                           ;protocolo.c: 101: eepromWriteByte(0x0003,cmd[6]);
  3286  0354  3003               	movlw	3
  3287  0355  1283               	bcf	3,5	;RP0=0, select bank0
  3288  0356  1303               	bcf	3,6	;RP1=0, select bank0
  3289  0357  00A6               	movwf	?_eepromWriteByte
  3290  0358  01A7               	clrf	?_eepromWriteByte+1
  3291  0359  1683               	bsf	3,5	;RP0=1, select bank1
  3292  035A  084E               	movf	(_cmd^(0+128)+6),w
  3293  035B  1283               	bcf	3,5	;RP0=0, select bank0
  3294  035C  00A8               	movwf	?_eepromWriteByte+2
  3295  035D  237B  118A         	fcall	_eepromWriteByte
  3296                           
  3297                           ;protocolo.c: 102: _delay((unsigned long)((5)*(4000000/4000.0)));
  3298  035F  3007               	movlw	7
  3299  0360  00AA               	movwf	??_startLogCmd+1
  3300  0361  307D               	movlw	125
  3301  0362  00A9               	movwf	??_startLogCmd
  3302  0363                     u1817:	
  3303  0363  0BA9               	decfsz	??_startLogCmd,f
  3304  0364  2B63               	goto	u1817
  3305  0365  0BAA               	decfsz	??_startLogCmd+1,f
  3306  0366  2B63               	goto	u1817
  3307                           
  3308                           ;protocolo.c: 105: bufferTxLen = 5;
  3309  0367  3005               	movlw	5
  3310  0368  1283               	bcf	3,5	;RP0=0, select bank0
  3311  0369  1303               	bcf	3,6	;RP1=0, select bank0
  3312  036A  00E0               	movwf	_bufferTxLen
  3313                           
  3314                           ;protocolo.c: 106: bufferTx[0] = 0x55;
  3315  036B  3055               	movlw	85
  3316  036C  1683               	bsf	3,5	;RP0=1, select bank1
  3317  036D  00A0               	movwf	_bufferTx^(0+128)
  3318                           
  3319                           ;protocolo.c: 107: bufferTx[1] = 0x34;
  3320  036E  3034               	movlw	52
  3321  036F  00A1               	movwf	(_bufferTx^(0+128)+1)
  3322  0370  3005               	movlw	5
  3323                           
  3324                           ;protocolo.c: 108: bufferTx[2] = 0x00;
  3325  0371  01A2               	clrf	(_bufferTx^(0+128)+2)
  3326                           
  3327                           ;protocolo.c: 109: bufferTx[3] = checksumCalc(bufferTx,5);
  3328  0372  1283               	bcf	3,5	;RP0=0, select bank0
  3329  0373  00A0               	movwf	?_checksumCalc
  3330  0374  30A0               	movlw	_bufferTx& (0+255)
  3331  0375  2757               	fcall	_checksumCalc
  3332  0376  1683               	bsf	3,5	;RP0=1, select bank1
  3333  0377  00A3               	movwf	(_bufferTx^(0+128)+3)
  3334                           
  3335                           ;protocolo.c: 110: bufferTx[4] = 0x0A;
  3336  0378  300A               	movlw	10
  3337  0379  00A4               	movwf	(_bufferTx^(0+128)+4)
  3338  037A  0008               	return
  3339  037B                     __end_of_startLogCmd:	
  3340  037B                     __ptext1004:	
  3341 ;; =============== function _i2cRestart ends ============
  3342                           
  3343                           
  3344 ;; *************** function _eepromWriteByte *****************
  3345 ;; Defined at:
  3346 ;;		line 22 in file "eepromI2c.c"
  3347 ;; Parameters:    Size  Location     Type
  3348 ;;  addr            2    6[BANK0 ] unsigned int 
  3349 ;;  data            1    8[BANK0 ] unsigned char 
  3350 ;; Auto vars:     Size  Location     Type
  3351 ;;		None
  3352 ;; Return value:  Size  Location     Type
  3353 ;;		None               void
  3354 ;; Registers used:
  3355 ;;		wreg, status,2, status,0, pclath, cstack
  3356 ;; Tracked objects:
  3357 ;;		On entry : 60/0
  3358 ;;		On exit  : 60/0
  3359 ;;		Unchanged: FFF9F/0
  3360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3361 ;;      Params:         0       3       0       0
  3362 ;;      Locals:         0       0       0       0
  3363 ;;      Temps:          0       0       0       0
  3364 ;;      Totals:         0       3       0       0
  3365 ;;Total ram usage:        3 bytes
  3366 ;; Hardware stack levels used:    1
  3367 ;; Hardware stack levels required when called:    6
  3368 ;; This function calls:
  3369 ;;		_i2cStart
  3370 ;;		_i2cWrite
  3371 ;;		_i2cStop
  3372 ;; This function is called by:
  3373 ;;		_startLogCmd
  3374 ;;		_logSave
  3375 ;; This function uses a non-reentrant model
  3376 ;;
  3377  037B                     _eepromWriteByte:	
  3378                           
  3379                           ;eepromI2c.c: 23: i2cStart();
  3380                           
  3381 ;; hardware stack exceeded
  3382                           ; Regs used in _eepromWriteByte: [wreg+status,2+status,0+pclath+cstack]
  3383  037B  273A  118A         	fcall	_i2cStart
  3384                           
  3385                           ;eepromI2c.c: 24: i2cWrite(0xA0);
  3386  037D  30A0               	movlw	160
  3387  037E  26F3  118A         	fcall	_i2cWrite
  3388                           
  3389                           ;eepromI2c.c: 25: i2cWrite(addr>>8);
  3390  0380  0827               	movf	eepromWriteByte@addr+1,w
  3391  0381  26F3  118A         	fcall	_i2cWrite
  3392                           
  3393                           ;eepromI2c.c: 26: i2cWrite((unsigned char)addr);
  3394  0383  0826               	movf	eepromWriteByte@addr,w
  3395  0384  26F3  118A         	fcall	_i2cWrite
  3396                           
  3397                           ;eepromI2c.c: 27: i2cWrite(data);
  3398  0386  0828               	movf	eepromWriteByte@data,w
  3399  0387  26F3  118A         	fcall	_i2cWrite
  3400                           
  3401                           ;eepromI2c.c: 28: i2cStop();
  3402  0389  2F45               	ljmp	l7888
  3403  038A                     __end_of_eepromWriteByte:	
  3404  038A                     __ptext1024:	
  3405 ;; =============== function ___lmul ends ============
  3406                           
  3407                           
  3408 ;; *************** function ___wmul *****************
  3409 ;; Defined at:
  3410 ;;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\wmul.c"
  3411 ;; Parameters:    Size  Location     Type
  3412 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3413 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3414 ;; Auto vars:     Size  Location     Type
  3415 ;;  product         2    4[BANK0 ] unsigned int 
  3416 ;; Return value:  Size  Location     Type
  3417 ;;                  2    0[BANK0 ] unsigned int 
  3418 ;; Registers used:
  3419 ;;		wreg, status,2, status,0
  3420 ;; Tracked objects:
  3421 ;;		On entry : 60/100
  3422 ;;		On exit  : 60/100
  3423 ;;		Unchanged: FFF9F/0
  3424 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3425 ;;      Params:         0       4       0       0
  3426 ;;      Locals:         0       2       0       0
  3427 ;;      Temps:          0       0       0       0
  3428 ;;      Totals:         0       6       0       0
  3429 ;;Total ram usage:        6 bytes
  3430 ;; Hardware stack levels used:    1
  3431 ;; Hardware stack levels required when called:    3
  3432 ;; This function calls:
  3433 ;;		Nothing
  3434 ;; This function is called by:
  3435 ;;		_logSave
  3436 ;;		_comandoRx
  3437 ;; This function uses a non-reentrant model
  3438 ;;
  3439  038A                     ___wmul:	
  3440                           
  3441                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3442  038A  01A4               	clrf	___wmul@product
  3443  038B  01A5               	clrf	___wmul@product+1
  3444  038C                     l7730:	
  3445  038C  1C20               	btfss	___wmul@multiplier,0
  3446  038D  2B94               	goto	l7734
  3447  038E  0822               	movf	___wmul@multiplicand,w
  3448  038F  07A4               	addwf	___wmul@product,f
  3449  0390  1803               	skipnc
  3450  0391  0AA5               	incf	___wmul@product+1,f
  3451  0392  0823               	movf	___wmul@multiplicand+1,w
  3452  0393  07A5               	addwf	___wmul@product+1,f
  3453  0394                     l7734:	
  3454  0394  1003               	clrc
  3455  0395  0DA2               	rlf	___wmul@multiplicand,f
  3456  0396  0DA3               	rlf	___wmul@multiplicand+1,f
  3457  0397  1003               	clrc
  3458  0398  0CA1               	rrf	___wmul@multiplier+1,f
  3459  0399  0CA0               	rrf	___wmul@multiplier,f
  3460  039A  0821               	movf	___wmul@multiplier+1,w
  3461  039B  0420               	iorwf	___wmul@multiplier,w
  3462  039C  1D03               	skipz
  3463  039D  2B8C               	goto	l7730
  3464  039E  0825               	movf	___wmul@product+1,w
  3465  039F  00A1               	movwf	?___wmul+1
  3466  03A0  0824               	movf	___wmul@product,w
  3467  03A1  00A0               	movwf	?___wmul
  3468  03A2  0008               	return
  3469  03A3                     __end_of___wmul:	
  3470  03A3                     __ptext994:	
  3471 ;; =============== function _comandoRx ends ============
  3472                           
  3473                           
  3474 ;; *************** function _initVars *****************
  3475 ;; Defined at:
  3476 ;;		line 375 in file "Main.c"
  3477 ;; Parameters:    Size  Location     Type
  3478 ;;		None
  3479 ;; Auto vars:     Size  Location     Type
  3480 ;;		None
  3481 ;; Return value:  Size  Location     Type
  3482 ;;		None               void
  3483 ;; Registers used:
  3484 ;;		wreg, status,2, status,0, pclath, cstack
  3485 ;; Tracked objects:
  3486 ;;		On entry : 0/0
  3487 ;;		On exit  : 0/0
  3488 ;;		Unchanged: 0/0
  3489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3490 ;;      Params:         0       0       0       0
  3491 ;;      Locals:         0       0       0       0
  3492 ;;      Temps:          0       2       0       0
  3493 ;;      Totals:         0       2       0       0
  3494 ;;Total ram usage:        2 bytes
  3495 ;; Hardware stack levels used:    1
  3496 ;; Hardware stack levels required when called:    8
  3497 ;; This function calls:
  3498 ;;		_eepromReadByte
  3499 ;; This function is called by:
  3500 ;;		_main
  3501 ;; This function uses a non-reentrant model
  3502 ;;
  3503  03A3                     _initVars:	
  3504                           
  3505                           ;Main.c: 377: timer = eepromReadByte(0x0004);
  3506                           
  3507 ;; hardware stack exceeded
  3508                           ; Regs used in _initVars: [wreg+status,2+status,0+pclath+cstack]
  3509  03A3  3004               	movlw	4
  3510  03A4  1283               	bcf	3,5	;RP0=0, select bank0
  3511  03A5  1303               	bcf	3,6	;RP1=0, select bank0
  3512  03A6  00A6               	movwf	?_eepromReadByte
  3513  03A7  01A7               	clrf	?_eepromReadByte+1
  3514  03A8  2463  118A         	fcall	_eepromReadByte
  3515  03AA  00DA               	movwf	_timer
  3516  03AB  01DB               	clrf	_timer+1
  3517                           
  3518                           ;Main.c: 378: timer<<=8;
  3519  03AC  00DB               	movwf	_timer+1
  3520  03AD  3007               	movlw	7
  3521  03AE  01DA               	clrf	_timer
  3522                           
  3523                           ;Main.c: 379: _delay((unsigned long)((5)*(4000000/4000.0)));
  3524  03AF  00AA               	movwf	??_initVars+1
  3525  03B0  307D               	movlw	125
  3526  03B1  00A9               	movwf	??_initVars
  3527  03B2                     u1607:	
  3528  03B2  0BA9               	decfsz	??_initVars,f
  3529  03B3  2BB2               	goto	u1607
  3530  03B4  0BAA               	decfsz	??_initVars+1,f
  3531  03B5  2BB2               	goto	u1607
  3532                           
  3533                           ;Main.c: 380: timer += eepromReadByte(0x0005);
  3534  03B6  3005               	movlw	5
  3535  03B7  1283               	bcf	3,5	;RP0=0, select bank0
  3536  03B8  1303               	bcf	3,6	;RP1=0, select bank0
  3537  03B9  00A6               	movwf	?_eepromReadByte
  3538  03BA  01A7               	clrf	?_eepromReadByte+1
  3539  03BB  2463  118A         	fcall	_eepromReadByte
  3540  03BD  07DA               	addwf	_timer,f
  3541  03BE  1803               	skipnc
  3542  03BF  0ADB               	incf	_timer+1,f
  3543                           
  3544                           ;Main.c: 381: _delay((unsigned long)((5)*(4000000/4000.0)));
  3545  03C0  3007               	movlw	7
  3546  03C1  00AA               	movwf	??_initVars+1
  3547  03C2  307D               	movlw	125
  3548  03C3  00A9               	movwf	??_initVars
  3549  03C4                     u1617:	
  3550  03C4  0BA9               	decfsz	??_initVars,f
  3551  03C5  2BC4               	goto	u1617
  3552  03C6  0BAA               	decfsz	??_initVars+1,f
  3553  03C7  2BC4               	goto	u1617
  3554                           
  3555                           ;Main.c: 383: contTimer = timer;
  3556  03C8  1283               	bcf	3,5	;RP0=0, select bank0
  3557  03C9  1303               	bcf	3,6	;RP1=0, select bank0
  3558  03CA  085B               	movf	_timer+1,w
  3559  03CB  00DD               	movwf	_contTimer+1
  3560  03CC  085A               	movf	_timer,w
  3561  03CD  00DC               	movwf	_contTimer
  3562                           
  3563                           ;Main.c: 384: newTimer = timer;
  3564  03CE  085B               	movf	_timer+1,w
  3565  03CF  00D9               	movwf	_newTimer+1
  3566  03D0  085A               	movf	_timer,w
  3567  03D1  00D8               	movwf	_newTimer
  3568                           
  3569                           ;Main.c: 387: startTime = eepromReadByte(0x0000);
  3570  03D2  01A6               	clrf	?_eepromReadByte
  3571  03D3  01A7               	clrf	?_eepromReadByte+1
  3572  03D4  2463  118A         	fcall	_eepromReadByte
  3573  03D6  00D0               	movwf	_startTime
  3574  03D7  01D1               	clrf	_startTime+1
  3575  03D8  01D2               	clrf	_startTime+2
  3576  03D9  01D3               	clrf	_startTime+3
  3577                           
  3578                           ;Main.c: 388: startTime<<=8;
  3579  03DA  0852               	movf	_startTime+2,w
  3580  03DB  00D3               	movwf	_startTime+3
  3581  03DC  0851               	movf	_startTime+1,w
  3582  03DD  00D2               	movwf	_startTime+2
  3583  03DE  0850               	movf	_startTime,w
  3584  03DF  00D1               	movwf	_startTime+1
  3585  03E0  3007               	movlw	7
  3586  03E1  01D0               	clrf	_startTime
  3587                           
  3588                           ;Main.c: 389: _delay((unsigned long)((5)*(4000000/4000.0)));
  3589  03E2  00AA               	movwf	??_initVars+1
  3590  03E3  307D               	movlw	125
  3591  03E4  00A9               	movwf	??_initVars
  3592  03E5                     u1627:	
  3593  03E5  0BA9               	decfsz	??_initVars,f
  3594  03E6  2BE5               	goto	u1627
  3595  03E7  0BAA               	decfsz	??_initVars+1,f
  3596  03E8  2BE5               	goto	u1627
  3597                           
  3598                           ;Main.c: 390: startTime += eepromReadByte(0x0001);
  3599  03E9  1283               	bcf	3,5	;RP0=0, select bank0
  3600  03EA  1303               	bcf	3,6	;RP1=0, select bank0
  3601  03EB  01A6               	clrf	?_eepromReadByte
  3602  03EC  0AA6               	incf	?_eepromReadByte,f
  3603  03ED  01A7               	clrf	?_eepromReadByte+1
  3604  03EE  2463  118A         	fcall	_eepromReadByte
  3605  03F0  07D0               	addwf	_startTime,f
  3606  03F1  3001               	movlw	1
  3607  03F2  1803               	skipnc
  3608  03F3  07D1               	addwf	_startTime+1,f
  3609  03F4  1803               	skipnc
  3610  03F5  07D2               	addwf	_startTime+2,f
  3611  03F6  1803               	skipnc
  3612  03F7  07D3               	addwf	_startTime+3,f
  3613                           
  3614                           ;Main.c: 391: startTime<<=8;
  3615  03F8  0852               	movf	_startTime+2,w
  3616  03F9  00D3               	movwf	_startTime+3
  3617  03FA  0851               	movf	_startTime+1,w
  3618  03FB  00D2               	movwf	_startTime+2
  3619  03FC  0850               	movf	_startTime,w
  3620  03FD  00D1               	movwf	_startTime+1
  3621  03FE  3007               	movlw	7
  3622  03FF  01D0               	clrf	_startTime
  3623                           
  3624                           ;Main.c: 392: _delay((unsigned long)((5)*(4000000/4000.0)));
  3625  0400  00AA               	movwf	??_initVars+1
  3626  0401  307D               	movlw	125
  3627  0402  00A9               	movwf	??_initVars
  3628  0403                     u1637:	
  3629  0403  0BA9               	decfsz	??_initVars,f
  3630  0404  2C03               	goto	u1637
  3631  0405  0BAA               	decfsz	??_initVars+1,f
  3632  0406  2C03               	goto	u1637
  3633                           
  3634                           ;Main.c: 393: startTime += eepromReadByte(0x0002);
  3635  0407  3002               	movlw	2
  3636  0408  1283               	bcf	3,5	;RP0=0, select bank0
  3637  0409  1303               	bcf	3,6	;RP1=0, select bank0
  3638  040A  00A6               	movwf	?_eepromReadByte
  3639  040B  01A7               	clrf	?_eepromReadByte+1
  3640  040C  2463  118A         	fcall	_eepromReadByte
  3641  040E  07D0               	addwf	_startTime,f
  3642  040F  3001               	movlw	1
  3643  0410  1803               	skipnc
  3644  0411  07D1               	addwf	_startTime+1,f
  3645  0412  1803               	skipnc
  3646  0413  07D2               	addwf	_startTime+2,f
  3647  0414  1803               	skipnc
  3648  0415  07D3               	addwf	_startTime+3,f
  3649                           
  3650                           ;Main.c: 394: startTime<<=8;
  3651  0416  0852               	movf	_startTime+2,w
  3652  0417  00D3               	movwf	_startTime+3
  3653  0418  0851               	movf	_startTime+1,w
  3654  0419  00D2               	movwf	_startTime+2
  3655  041A  0850               	movf	_startTime,w
  3656  041B  00D1               	movwf	_startTime+1
  3657  041C  3007               	movlw	7
  3658  041D  01D0               	clrf	_startTime
  3659                           
  3660                           ;Main.c: 395: _delay((unsigned long)((5)*(4000000/4000.0)));
  3661  041E  00AA               	movwf	??_initVars+1
  3662  041F  307D               	movlw	125
  3663  0420  00A9               	movwf	??_initVars
  3664  0421                     u1647:	
  3665  0421  0BA9               	decfsz	??_initVars,f
  3666  0422  2C21               	goto	u1647
  3667  0423  0BAA               	decfsz	??_initVars+1,f
  3668  0424  2C21               	goto	u1647
  3669                           
  3670                           ;Main.c: 396: startTime += eepromReadByte(0x0003);
  3671  0425  3003               	movlw	3
  3672  0426  1283               	bcf	3,5	;RP0=0, select bank0
  3673  0427  1303               	bcf	3,6	;RP1=0, select bank0
  3674  0428  00A6               	movwf	?_eepromReadByte
  3675  0429  01A7               	clrf	?_eepromReadByte+1
  3676  042A  2463  118A         	fcall	_eepromReadByte
  3677  042C  07D0               	addwf	_startTime,f
  3678  042D  3001               	movlw	1
  3679  042E  1803               	skipnc
  3680  042F  07D1               	addwf	_startTime+1,f
  3681  0430  1803               	skipnc
  3682  0431  07D2               	addwf	_startTime+2,f
  3683  0432  1803               	skipnc
  3684  0433  07D3               	addwf	_startTime+3,f
  3685                           
  3686                           ;Main.c: 397: _delay((unsigned long)((5)*(4000000/4000.0)));
  3687  0434  3007               	movlw	7
  3688  0435  00AA               	movwf	??_initVars+1
  3689  0436  307D               	movlw	125
  3690  0437  00A9               	movwf	??_initVars
  3691  0438                     u1657:	
  3692  0438  0BA9               	decfsz	??_initVars,f
  3693  0439  2C38               	goto	u1657
  3694  043A  0BAA               	decfsz	??_initVars+1,f
  3695  043B  2C38               	goto	u1657
  3696                           
  3697                           ;Main.c: 400: numOfLogs = eepromReadByte(0x0006);
  3698  043C  3006               	movlw	6
  3699  043D  1283               	bcf	3,5	;RP0=0, select bank0
  3700  043E  1303               	bcf	3,6	;RP1=0, select bank0
  3701  043F  00A6               	movwf	?_eepromReadByte
  3702  0440  01A7               	clrf	?_eepromReadByte+1
  3703  0441  2463  118A         	fcall	_eepromReadByte
  3704  0443  00DE               	movwf	_numOfLogs
  3705  0444  3007               	movlw	7
  3706  0445  01DF               	clrf	_numOfLogs+1
  3707                           
  3708                           ;Main.c: 401: _delay((unsigned long)((5)*(4000000/4000.0)));
  3709  0446  00AA               	movwf	??_initVars+1
  3710  0447  307D               	movlw	125
  3711  0448  00A9               	movwf	??_initVars
  3712  0449                     u1667:	
  3713  0449  0BA9               	decfsz	??_initVars,f
  3714  044A  2C49               	goto	u1667
  3715  044B  0BAA               	decfsz	??_initVars+1,f
  3716  044C  2C49               	goto	u1667
  3717                           
  3718                           ;Main.c: 402: numOfLogs <<= 8;
  3719  044D  1283               	bcf	3,5	;RP0=0, select bank0
  3720  044E  1303               	bcf	3,6	;RP1=0, select bank0
  3721  044F  085E               	movf	_numOfLogs,w
  3722  0450  00DF               	movwf	_numOfLogs+1
  3723  0451  3007               	movlw	7
  3724  0452  01DE               	clrf	_numOfLogs
  3725                           
  3726                           ;Main.c: 403: numOfLogs += eepromReadByte(0x0007);
  3727  0453  00A6               	movwf	?_eepromReadByte
  3728  0454  01A7               	clrf	?_eepromReadByte+1
  3729  0455  2463  118A         	fcall	_eepromReadByte
  3730  0457  07DE               	addwf	_numOfLogs,f
  3731  0458  1803               	skipnc
  3732  0459  0ADF               	incf	_numOfLogs+1,f
  3733                           
  3734                           ;Main.c: 404: _delay((unsigned long)((5)*(4000000/4000.0)));
  3735  045A  3007               	movlw	7
  3736  045B  00AA               	movwf	??_initVars+1
  3737  045C  307D               	movlw	125
  3738  045D  00A9               	movwf	??_initVars
  3739  045E                     u1677:	
  3740  045E  0BA9               	decfsz	??_initVars,f
  3741  045F  2C5E               	goto	u1677
  3742  0460  0BAA               	decfsz	??_initVars+1,f
  3743  0461  2C5E               	goto	u1677
  3744  0462  0008               	return
  3745  0463                     __end_of_initVars:	
  3746  0463                     __ptext997:	
  3747 ;; =============== function _eepromReadLogPage ends ============
  3748                           
  3749                           
  3750 ;; *************** function _eepromReadByte *****************
  3751 ;; Defined at:
  3752 ;;		line 7 in file "eepromI2c.c"
  3753 ;; Parameters:    Size  Location     Type
  3754 ;;  addr            2    6[BANK0 ] unsigned int 
  3755 ;; Auto vars:     Size  Location     Type
  3756 ;;  buff            1    8[BANK0 ] unsigned char 
  3757 ;; Return value:  Size  Location     Type
  3758 ;;                  1    wreg      unsigned char 
  3759 ;; Registers used:
  3760 ;;		wreg, status,2, status,0, pclath, cstack
  3761 ;; Tracked objects:
  3762 ;;		On entry : 60/0
  3763 ;;		On exit  : 60/0
  3764 ;;		Unchanged: FFF9F/0
  3765 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3766 ;;      Params:         0       2       0       0
  3767 ;;      Locals:         0       1       0       0
  3768 ;;      Temps:          0       0       0       0
  3769 ;;      Totals:         0       3       0       0
  3770 ;;Total ram usage:        3 bytes
  3771 ;; Hardware stack levels used:    1
  3772 ;; Hardware stack levels required when called:    7
  3773 ;; This function calls:
  3774 ;;		_i2cStart
  3775 ;;		_i2cWrite
  3776 ;;		_i2cRestart
  3777 ;;		_i2cRead
  3778 ;;		_i2cNack
  3779 ;;		_i2cStop
  3780 ;; This function is called by:
  3781 ;;		_initVars
  3782 ;; This function uses a non-reentrant model
  3783 ;;
  3784  0463                     _eepromReadByte:	
  3785                           
  3786                           ;eepromI2c.c: 8: unsigned char buff;
  3787                           ;eepromI2c.c: 9: i2cStart();
  3788                           
  3789 ;; hardware stack exceeded
  3790                           ; Regs used in _eepromReadByte: [wreg+status,2+status,0+pclath+cstack]
  3791  0463  273A  118A         	fcall	_i2cStart
  3792                           
  3793                           ;eepromI2c.c: 10: i2cWrite(0xA0);
  3794  0465  30A0               	movlw	160
  3795  0466  26F3  118A         	fcall	_i2cWrite
  3796                           
  3797                           ;eepromI2c.c: 11: i2cWrite(addr>>8);
  3798  0468  0827               	movf	eepromReadByte@addr+1,w
  3799  0469  26F3  118A         	fcall	_i2cWrite
  3800                           
  3801                           ;eepromI2c.c: 12: i2cWrite((unsigned char)addr);
  3802  046B  0826               	movf	eepromReadByte@addr,w
  3803  046C  26F3  118A         	fcall	_i2cWrite
  3804                           
  3805                           ;eepromI2c.c: 13: i2cRestart();
  3806  046E  27F9  118A         	fcall	_i2cRestart
  3807                           
  3808                           ;eepromI2c.c: 14: i2cWrite(0xA1);
  3809  0470  30A1               	movlw	161
  3810  0471  26F3  118A         	fcall	_i2cWrite
  3811                           
  3812                           ;eepromI2c.c: 15: buff = i2cRead();
  3813  0473  268B  118A         	fcall	_i2cRead
  3814  0475  00A8               	movwf	eepromReadByte@buff
  3815                           
  3816                           ;eepromI2c.c: 16: i2cNack();
  3817  0476  2724  118A         	fcall	_i2cNack
  3818                           
  3819                           ;eepromI2c.c: 17: i2cStop();
  3820  0478  2745               	fcall	_i2cStop
  3821                           
  3822                           ;eepromI2c.c: 19: return buff;
  3823  0479  0828               	movf	eepromReadByte@buff,w
  3824  047A  0008               	return
  3825  047B                     __end_of_eepromReadByte:	
  3826  047B                     __ptext996:	
  3827 ;; =============== function _logSave ends ============
  3828                           
  3829                           
  3830 ;; *************** function _eepromReadLogPage *****************
  3831 ;; Defined at:
  3832 ;;		line 47 in file "eepromI2c.c"
  3833 ;; Parameters:    Size  Location     Type
  3834 ;;  addr            2    6[BANK0 ] unsigned int 
  3835 ;;  buff            1    8[BANK0 ] PTR unsigned char 
  3836 ;;		 -> readDataBuffer(30), 
  3837 ;; Auto vars:     Size  Location     Type
  3838 ;;  i               2   10[BANK0 ] int 
  3839 ;; Return value:  Size  Location     Type
  3840 ;;		None               void
  3841 ;; Registers used:
  3842 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3843 ;; Tracked objects:
  3844 ;;		On entry : 60/100
  3845 ;;		On exit  : 60/0
  3846 ;;		Unchanged: FFE00/0
  3847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3848 ;;      Params:         0       3       0       0
  3849 ;;      Locals:         0       2       0       0
  3850 ;;      Temps:          0       1       0       0
  3851 ;;      Totals:         0       6       0       0
  3852 ;;Total ram usage:        6 bytes
  3853 ;; Hardware stack levels used:    1
  3854 ;; Hardware stack levels required when called:    7
  3855 ;; This function calls:
  3856 ;;		_i2cStart
  3857 ;;		_i2cWrite
  3858 ;;		_i2cRestart
  3859 ;;		_i2cRead
  3860 ;;		_i2cAck
  3861 ;;		_i2cNack
  3862 ;;		_i2cStop
  3863 ;; This function is called by:
  3864 ;;		_comandoRx
  3865 ;; This function uses a non-reentrant model
  3866 ;;
  3867  047B                     _eepromReadLogPage:	
  3868                           
  3869                           ;eepromI2c.c: 48: i2cStart();
  3870                           
  3871 ;; hardware stack exceeded
  3872                           ; Regs used in _eepromReadLogPage: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3873  047B  273A  118A         	fcall	_i2cStart
  3874                           
  3875                           ;eepromI2c.c: 49: i2cWrite(0xA0);
  3876  047D  30A0               	movlw	160
  3877  047E  26F3  118A         	fcall	_i2cWrite
  3878                           
  3879                           ;eepromI2c.c: 50: i2cWrite(addr>>8);
  3880  0480  0827               	movf	eepromReadLogPage@addr+1,w
  3881  0481  26F3  118A         	fcall	_i2cWrite
  3882                           
  3883                           ;eepromI2c.c: 51: i2cWrite((unsigned char)addr);
  3884  0483  0826               	movf	eepromReadLogPage@addr,w
  3885  0484  26F3  118A         	fcall	_i2cWrite
  3886                           
  3887                           ;eepromI2c.c: 52: i2cRestart();
  3888  0486  27F9  118A         	fcall	_i2cRestart
  3889                           
  3890                           ;eepromI2c.c: 53: i2cWrite(0xA1);
  3891  0488  30A1               	movlw	161
  3892  0489  26F3  118A         	fcall	_i2cWrite
  3893                           
  3894                           ;eepromI2c.c: 54: for (int i = 0; i<30 ; i++){
  3895  048B  01AA               	clrf	eepromReadLogPage@i
  3896  048C  01AB               	clrf	eepromReadLogPage@i+1
  3897  048D                     l8128:	
  3898                           
  3899                           ;eepromI2c.c: 55: buff[i] = i2cRead();
  3900  048D  1283               	bcf	3,5	;RP0=0, select bank0
  3901  048E  1303               	bcf	3,6	;RP1=0, select bank0
  3902  048F  082A               	movf	eepromReadLogPage@i,w
  3903  0490  0728               	addwf	eepromReadLogPage@buff,w
  3904  0491  00A9               	movwf	??_eepromReadLogPage
  3905  0492  0084               	movwf	4
  3906  0493  268B  118A         	fcall	_i2cRead
  3907  0495  1783               	bsf	3,7	;select IRP bank2
  3908  0496  0080               	movwf	0
  3909                           
  3910                           ;eepromI2c.c: 56: if (i<29){
  3911  0497  082B               	movf	eepromReadLogPage@i+1,w
  3912  0498  3A80               	xorlw	128
  3913  0499  00FF               	movwf	127
  3914  049A  3080               	movlw	128
  3915  049B  027F               	subwf	127,w
  3916  049C  1D03               	skipz
  3917  049D  2CA0               	goto	u1305
  3918  049E  301D               	movlw	29
  3919  049F  022A               	subwf	eepromReadLogPage@i,w
  3920  04A0                     u1305:	
  3921  04A0  1803               	skipnc
  3922  04A1  2CA4               	goto	l8134
  3923                           
  3924                           ;eepromI2c.c: 57: i2cAck();
  3925  04A2  26E8  118A         	fcall	_i2cAck
  3926  04A4                     l8134:	
  3927  04A4  1283               	bcf	3,5	;RP0=0, select bank0
  3928  04A5  1303               	bcf	3,6	;RP1=0, select bank0
  3929  04A6  0AAA               	incf	eepromReadLogPage@i,f
  3930  04A7  1903               	skipnz
  3931  04A8  0AAB               	incf	eepromReadLogPage@i+1,f
  3932  04A9  082B               	movf	eepromReadLogPage@i+1,w
  3933  04AA  3A80               	xorlw	128
  3934  04AB  00FF               	movwf	127
  3935  04AC  3080               	movlw	128
  3936  04AD  027F               	subwf	127,w
  3937  04AE  1D03               	skipz
  3938  04AF  2CB2               	goto	u1315
  3939  04B0  301E               	movlw	30
  3940  04B1  022A               	subwf	eepromReadLogPage@i,w
  3941  04B2                     u1315:	
  3942  04B2  1C03               	skipc
  3943  04B3  2C8D               	goto	l8128
  3944                           
  3945                           ;eepromI2c.c: 58: }
  3946                           ;eepromI2c.c: 59: }
  3947                           ;eepromI2c.c: 60: i2cNack();
  3948  04B4  2724  118A         	fcall	_i2cNack
  3949                           
  3950                           ;eepromI2c.c: 61: i2cStop();
  3951  04B6  2F45               	ljmp	l7888
  3952  04B7                     __end_of_eepromReadLogPage:	
  3953  04B7                     __ptext998:	
  3954 ;; =============== function _eepromReadByte ends ============
  3955                           
  3956                           
  3957 ;; *************** function _eepromReadLog *****************
  3958 ;; Defined at:
  3959 ;;		line 31 in file "eepromI2c.c"
  3960 ;; Parameters:    Size  Location     Type
  3961 ;;  addr            2    6[BANK0 ] unsigned int 
  3962 ;;  buff            1    8[BANK0 ] PTR unsigned char 
  3963 ;;		 -> comandoRx@readData_6108(3), comandoRx@readData(3), readLogData@readData(3), 
  3964 ;; Auto vars:     Size  Location     Type
  3965 ;;		None
  3966 ;; Return value:  Size  Location     Type
  3967 ;;		None               void
  3968 ;; Registers used:
  3969 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3970 ;; Tracked objects:
  3971 ;;		On entry : 60/100
  3972 ;;		On exit  : 160/0
  3973 ;;		Unchanged: FFE9F/0
  3974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3975 ;;      Params:         0       3       0       0
  3976 ;;      Locals:         0       0       0       0
  3977 ;;      Temps:          0       0       0       0
  3978 ;;      Totals:         0       3       0       0
  3979 ;;Total ram usage:        3 bytes
  3980 ;; Hardware stack levels used:    1
  3981 ;; Hardware stack levels required when called:    7
  3982 ;; This function calls:
  3983 ;;		_i2cStart
  3984 ;;		_i2cWrite
  3985 ;;		_i2cRestart
  3986 ;;		_i2cRead
  3987 ;;		_i2cAck
  3988 ;;		_i2cNack
  3989 ;;		_i2cStop
  3990 ;; This function is called by:
  3991 ;;		_comandoRx
  3992 ;; This function uses a non-reentrant model
  3993 ;;
  3994  04B7                     _eepromReadLog:	
  3995                           
  3996                           ;eepromI2c.c: 32: i2cStart();
  3997                           
  3998 ;; hardware stack exceeded
  3999                           ; Regs used in _eepromReadLog: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  4000  04B7  273A  118A         	fcall	_i2cStart
  4001                           
  4002                           ;eepromI2c.c: 33: i2cWrite(0xA0);
  4003  04B9  30A0               	movlw	160
  4004  04BA  26F3  118A         	fcall	_i2cWrite
  4005                           
  4006                           ;eepromI2c.c: 34: i2cWrite(addr>>8);
  4007  04BC  0827               	movf	eepromReadLog@addr+1,w
  4008  04BD  26F3  118A         	fcall	_i2cWrite
  4009                           
  4010                           ;eepromI2c.c: 35: i2cWrite((unsigned char)addr);
  4011  04BF  0826               	movf	eepromReadLog@addr,w
  4012  04C0  26F3  118A         	fcall	_i2cWrite
  4013                           
  4014                           ;eepromI2c.c: 36: i2cRestart();
  4015  04C2  27F9  118A         	fcall	_i2cRestart
  4016                           
  4017                           ;eepromI2c.c: 37: i2cWrite(0xA1);
  4018  04C4  30A1               	movlw	161
  4019  04C5  26F3  118A         	fcall	_i2cWrite
  4020                           
  4021                           ;eepromI2c.c: 38: buff[0] = i2cRead();
  4022  04C7  0828               	movf	eepromReadLog@buff,w
  4023  04C8  0084               	movwf	4
  4024  04C9  268B  118A         	fcall	_i2cRead
  4025  04CB  1383               	bcf	3,7	;select IRP bank0
  4026  04CC  0080               	movwf	0
  4027                           
  4028                           ;eepromI2c.c: 39: i2cAck();
  4029  04CD  26E8  118A         	fcall	_i2cAck
  4030                           
  4031                           ;eepromI2c.c: 40: buff[1] = i2cRead();
  4032  04CF  0828               	movf	eepromReadLog@buff,w
  4033  04D0  3E01               	addlw	1
  4034  04D1  0084               	movwf	4
  4035  04D2  268B  118A         	fcall	_i2cRead
  4036  04D4  0080               	movwf	0
  4037                           
  4038                           ;eepromI2c.c: 41: i2cAck();
  4039  04D5  26E8  118A         	fcall	_i2cAck
  4040                           
  4041                           ;eepromI2c.c: 42: buff[2] = i2cRead();
  4042  04D7  0828               	movf	eepromReadLog@buff,w
  4043  04D8  3E02               	addlw	2
  4044  04D9  0084               	movwf	4
  4045  04DA  268B  118A         	fcall	_i2cRead
  4046  04DC  0080               	movwf	0
  4047                           
  4048                           ;eepromI2c.c: 43: i2cNack();
  4049  04DD  2724  118A         	fcall	_i2cNack
  4050                           
  4051                           ;eepromI2c.c: 44: i2cStop();
  4052  04DF  2F45               	ljmp	l7888
  4053  04E0                     __end_of_eepromReadLog:	
  4054  04E0                     __ptext1000:	
  4055 ;; =============== function _startLogCmd ends ============
  4056                           
  4057                           
  4058 ;; *************** function _readTemp *****************
  4059 ;; Defined at:
  4060 ;;		line 42 in file "aht10.c"
  4061 ;; Parameters:    Size  Location     Type
  4062 ;;		None
  4063 ;; Auto vars:     Size  Location     Type
  4064 ;;  buff            6   26[BANK0 ] unsigned char [6]
  4065 ;;  aux             4   33[BANK0 ] unsigned long 
  4066 ;;  aux2            1   32[BANK0 ] unsigned char 
  4067 ;; Return value:  Size  Location     Type
  4068 ;;                  1    wreg      unsigned char 
  4069 ;; Registers used:
  4070 ;;		wreg, status,2, status,0, pclath, cstack
  4071 ;; Tracked objects:
  4072 ;;		On entry : 0/0
  4073 ;;		On exit  : 60/0
  4074 ;;		Unchanged: FFF9F/0
  4075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4076 ;;      Params:         0       0       0       0
  4077 ;;      Locals:         0      11       0       0
  4078 ;;      Temps:          0       4       0       0
  4079 ;;      Totals:         0      15       0       0
  4080 ;;Total ram usage:       15 bytes
  4081 ;; Hardware stack levels used:    1
  4082 ;; Hardware stack levels required when called:    6
  4083 ;; This function calls:
  4084 ;;		_i2cStart
  4085 ;;		_i2cWrite
  4086 ;;		_i2cRead
  4087 ;;		_i2cNack
  4088 ;;		_i2cStop
  4089 ;;		_i2cAck
  4090 ;;		___lmul
  4091 ;;		___lldiv
  4092 ;;		___llmod
  4093 ;; This function is called by:
  4094 ;;		_logSave
  4095 ;; This function uses a non-reentrant model
  4096 ;;
  4097  04E0                     _readTemp:	
  4098                           
  4099                           ;aht10.c: 44: unsigned long aux;
  4100                           ;aht10.c: 46: unsigned char buff[6];
  4101                           ;aht10.c: 47: i2cStart();
  4102                           
  4103                           ; Regs used in _readTemp: [wreg+status,2+status,0+pclath+cstack]
  4104  04E0  273A  118A         	fcall	_i2cStart
  4105                           
  4106                           ;aht10.c: 48: i2cWrite(0x71);
  4107  04E2  3071               	movlw	113
  4108  04E3  26F3  118A         	fcall	_i2cWrite
  4109                           
  4110                           ;aht10.c: 49: buff[0] = i2cRead();
  4111  04E5  268B  118A         	fcall	_i2cRead
  4112  04E7  00BA               	movwf	readTemp@buff
  4113                           
  4114                           ;aht10.c: 51: if( ((buff[0]&0x80)>>7 == 1) || ((buff[0]&0x08)>>3 == 0) ){
  4115  04E8  00B6               	movwf	??_readTemp
  4116  04E9  3007               	movlw	7
  4117  04EA                     u1225:	
  4118  04EA  1003               	clrc
  4119  04EB  0CB6               	rrf	??_readTemp,f
  4120  04EC  3EFF               	addlw	-1
  4121  04ED  1D03               	skipz
  4122  04EE  2CEA               	goto	u1225
  4123  04EF  1836               	btfsc	??_readTemp,0
  4124  04F0  2CFB               	goto	l7964
  4125  04F1  083A               	movf	readTemp@buff,w
  4126  04F2  00B6               	movwf	??_readTemp
  4127  04F3  1003               	clrc
  4128  04F4  0CB6               	rrf	??_readTemp,f
  4129  04F5  1003               	clrc
  4130  04F6  0CB6               	rrf	??_readTemp,f
  4131  04F7  1003               	clrc
  4132  04F8  0CB6               	rrf	??_readTemp,f
  4133  04F9  1836               	btfsc	??_readTemp,0
  4134  04FA  2CFE               	goto	l7970
  4135  04FB                     l7964:	
  4136                           
  4137                           ;aht10.c: 52: i2cNack();
  4138  04FB  2724  118A         	fcall	_i2cNack
  4139                           
  4140                           ;aht10.c: 53: i2cStop();
  4141  04FD  2F45               	ljmp	l7888
  4142  04FE                     l7970:	
  4143                           
  4144                           ;aht10.c: 56: else{
  4145                           ;aht10.c: 57: i2cAck();
  4146  04FE  26E8  118A         	fcall	_i2cAck
  4147                           
  4148                           ;aht10.c: 58: }
  4149                           ;aht10.c: 60: buff[1] = i2cRead();
  4150  0500  268B  118A         	fcall	_i2cRead
  4151  0502  00BB               	movwf	readTemp@buff+1
  4152                           
  4153                           ;aht10.c: 61: i2cAck();
  4154  0503  26E8  118A         	fcall	_i2cAck
  4155                           
  4156                           ;aht10.c: 63: buff[2] = i2cRead();
  4157  0505  268B  118A         	fcall	_i2cRead
  4158  0507  00BC               	movwf	readTemp@buff+2
  4159                           
  4160                           ;aht10.c: 64: i2cAck();
  4161  0508  26E8  118A         	fcall	_i2cAck
  4162                           
  4163                           ;aht10.c: 66: buff[3] = i2cRead();
  4164  050A  268B  118A         	fcall	_i2cRead
  4165  050C  00BD               	movwf	readTemp@buff+3
  4166                           
  4167                           ;aht10.c: 67: i2cAck();
  4168  050D  26E8  118A         	fcall	_i2cAck
  4169                           
  4170                           ;aht10.c: 69: buff[4] = i2cRead();
  4171  050F  268B  118A         	fcall	_i2cRead
  4172  0511  00BE               	movwf	readTemp@buff+4
  4173                           
  4174                           ;aht10.c: 70: i2cAck();
  4175  0512  26E8  118A         	fcall	_i2cAck
  4176                           
  4177                           ;aht10.c: 72: buff[5] = i2cRead();
  4178  0514  268B  118A         	fcall	_i2cRead
  4179  0516  00BF               	movwf	readTemp@buff+5
  4180                           
  4181                           ;aht10.c: 73: i2cNack();
  4182  0517  2724  118A         	fcall	_i2cNack
  4183                           
  4184                           ;aht10.c: 74: i2cStop();
  4185  0519  2745  118A         	fcall	_i2cStop
  4186                           
  4187                           ;aht10.c: 77: aux = buff[1];
  4188  051B  083B               	movf	readTemp@buff+1,w
  4189  051C  00C1               	movwf	readTemp@aux
  4190  051D  01C2               	clrf	readTemp@aux+1
  4191  051E  01C3               	clrf	readTemp@aux+2
  4192  051F  01C4               	clrf	readTemp@aux+3
  4193                           
  4194                           ;aht10.c: 78: aux <<= 8;
  4195  0520  0843               	movf	readTemp@aux+2,w
  4196  0521  00C4               	movwf	readTemp@aux+3
  4197  0522  0842               	movf	readTemp@aux+1,w
  4198  0523  00C3               	movwf	readTemp@aux+2
  4199  0524  0841               	movf	readTemp@aux,w
  4200  0525  00C2               	movwf	readTemp@aux+1
  4201  0526  01C1               	clrf	readTemp@aux
  4202                           
  4203                           ;aht10.c: 79: aux += buff[2];
  4204  0527  083C               	movf	readTemp@buff+2,w
  4205  0528  07C1               	addwf	readTemp@aux,f
  4206  0529  3001               	movlw	1
  4207  052A  1803               	skipnc
  4208  052B  07C2               	addwf	readTemp@aux+1,f
  4209  052C  1803               	skipnc
  4210  052D  07C3               	addwf	readTemp@aux+2,f
  4211  052E  1803               	skipnc
  4212  052F  07C4               	addwf	readTemp@aux+3,f
  4213                           
  4214                           ;aht10.c: 80: aux <<= 8;
  4215  0530  0843               	movf	readTemp@aux+2,w
  4216  0531  00C4               	movwf	readTemp@aux+3
  4217  0532  0842               	movf	readTemp@aux+1,w
  4218  0533  00C3               	movwf	readTemp@aux+2
  4219  0534  0841               	movf	readTemp@aux,w
  4220  0535  00C2               	movwf	readTemp@aux+1
  4221  0536  01C1               	clrf	readTemp@aux
  4222                           
  4223                           ;aht10.c: 81: aux += buff[3];
  4224  0537  083D               	movf	readTemp@buff+3,w
  4225  0538  07C1               	addwf	readTemp@aux,f
  4226  0539  3001               	movlw	1
  4227  053A  1803               	skipnc
  4228  053B  07C2               	addwf	readTemp@aux+1,f
  4229  053C  1803               	skipnc
  4230  053D  07C3               	addwf	readTemp@aux+2,f
  4231  053E  1803               	skipnc
  4232  053F  07C4               	addwf	readTemp@aux+3,f
  4233                           
  4234                           ;aht10.c: 82: aux >>= 4;
  4235  0540  3004               	movlw	4
  4236  0541                     u1255:	
  4237  0541  1003               	clrc
  4238  0542  0CC4               	rrf	readTemp@aux+3,f
  4239  0543  0CC3               	rrf	readTemp@aux+2,f
  4240  0544  0CC2               	rrf	readTemp@aux+1,f
  4241  0545  0CC1               	rrf	readTemp@aux,f
  4242  0546  3EFF               	addlw	-1
  4243  0547  1D03               	skipz
  4244  0548  2D41               	goto	u1255
  4245                           
  4246                           ;aht10.c: 84: aux *= 100;
  4247  0549  3064               	movlw	100
  4248  054A  00A0               	movwf	?___lmul
  4249  054B  01A1               	clrf	?___lmul+1
  4250  054C  01A2               	clrf	?___lmul+2
  4251  054D  01A3               	clrf	?___lmul+3
  4252  054E  0844               	movf	readTemp@aux+3,w
  4253  054F  00A7               	movwf	?___lmul+7
  4254  0550  0843               	movf	readTemp@aux+2,w
  4255  0551  00A6               	movwf	?___lmul+6
  4256  0552  0842               	movf	readTemp@aux+1,w
  4257  0553  00A5               	movwf	?___lmul+5
  4258  0554  0841               	movf	readTemp@aux,w
  4259  0555  00A4               	movwf	?___lmul+4
  4260  0556  27C6  118A         	fcall	___lmul
  4261  0558  0823               	movf	?___lmul+3,w
  4262  0559  00C4               	movwf	readTemp@aux+3
  4263  055A  0822               	movf	?___lmul+2,w
  4264  055B  00C3               	movwf	readTemp@aux+2
  4265  055C  0821               	movf	?___lmul+1,w
  4266  055D  00C2               	movwf	readTemp@aux+1
  4267  055E  0820               	movf	?___lmul,w
  4268  055F  00C1               	movwf	readTemp@aux
  4269                           
  4270                           ;aht10.c: 85: aux >>=20;
  4271  0560  3014               	movlw	20
  4272  0561                     u1265:	
  4273  0561  1003               	clrc
  4274  0562  0CC4               	rrf	readTemp@aux+3,f
  4275  0563  0CC3               	rrf	readTemp@aux+2,f
  4276  0564  0CC2               	rrf	readTemp@aux+1,f
  4277  0565  0CC1               	rrf	readTemp@aux,f
  4278  0566  3EFF               	addlw	-1
  4279  0567  1D03               	skipz
  4280  0568  2D61               	goto	u1265
  4281                           
  4282                           ;aht10.c: 87: readUmidity = aux/10;
  4283  0569  300A               	movlw	10
  4284  056A  00A0               	movwf	?___lldiv
  4285  056B  01A1               	clrf	?___lldiv+1
  4286  056C  01A2               	clrf	?___lldiv+2
  4287  056D  01A3               	clrf	?___lldiv+3
  4288  056E  0844               	movf	readTemp@aux+3,w
  4289  056F  00A7               	movwf	?___lldiv+7
  4290  0570  0843               	movf	readTemp@aux+2,w
  4291  0571  00A6               	movwf	?___lldiv+6
  4292  0572  0842               	movf	readTemp@aux+1,w
  4293  0573  00A5               	movwf	?___lldiv+5
  4294  0574  0841               	movf	readTemp@aux,w
  4295  0575  00A4               	movwf	?___lldiv+4
  4296  0576  26A0  118A         	fcall	___lldiv
  4297  0578  0820               	movf	?___lldiv,w
  4298  0579  00E4               	movwf	_readUmidity
  4299  057A  30F0               	movlw	240
  4300                           
  4301                           ;aht10.c: 88: readUmidity <<= 4;
  4302  057B  0EE4               	swapf	_readUmidity,f
  4303  057C  05E4               	andwf	_readUmidity,f
  4304                           
  4305                           ;aht10.c: 89: aux %= 10;
  4306  057D  300A               	movlw	10
  4307  057E  00AD               	movwf	?___llmod
  4308  057F  01AE               	clrf	?___llmod+1
  4309  0580  01AF               	clrf	?___llmod+2
  4310  0581  01B0               	clrf	?___llmod+3
  4311  0582  0844               	movf	readTemp@aux+3,w
  4312  0583  00B4               	movwf	?___llmod+7
  4313  0584  0843               	movf	readTemp@aux+2,w
  4314  0585  00B3               	movwf	?___llmod+6
  4315  0586  0842               	movf	readTemp@aux+1,w
  4316  0587  00B2               	movwf	?___llmod+5
  4317  0588  0841               	movf	readTemp@aux,w
  4318  0589  00B1               	movwf	?___llmod+4
  4319  058A  2778  118A         	fcall	___llmod
  4320  058C  0830               	movf	?___llmod+3,w
  4321  058D  00C4               	movwf	readTemp@aux+3
  4322  058E  082F               	movf	?___llmod+2,w
  4323  058F  00C3               	movwf	readTemp@aux+2
  4324  0590  082E               	movf	?___llmod+1,w
  4325  0591  00C2               	movwf	readTemp@aux+1
  4326  0592  082D               	movf	?___llmod,w
  4327  0593  00C1               	movwf	readTemp@aux
  4328                           
  4329                           ;aht10.c: 90: readUmidity+=aux;
  4330  0594  07E4               	addwf	_readUmidity,f
  4331                           
  4332                           ;aht10.c: 93: aux = (buff[3] & 0x0F);
  4333  0595  083D               	movf	readTemp@buff+3,w
  4334  0596  390F               	andlw	15
  4335  0597  00C1               	movwf	readTemp@aux
  4336  0598  01C2               	clrf	readTemp@aux+1
  4337  0599  01C3               	clrf	readTemp@aux+2
  4338  059A  01C4               	clrf	readTemp@aux+3
  4339                           
  4340                           ;aht10.c: 94: aux <<= 8;
  4341  059B  0843               	movf	readTemp@aux+2,w
  4342  059C  00C4               	movwf	readTemp@aux+3
  4343  059D  0842               	movf	readTemp@aux+1,w
  4344  059E  00C3               	movwf	readTemp@aux+2
  4345  059F  0841               	movf	readTemp@aux,w
  4346  05A0  00C2               	movwf	readTemp@aux+1
  4347  05A1  01C1               	clrf	readTemp@aux
  4348                           
  4349                           ;aht10.c: 95: aux += buff[4];
  4350  05A2  083E               	movf	readTemp@buff+4,w
  4351  05A3  07C1               	addwf	readTemp@aux,f
  4352  05A4  3001               	movlw	1
  4353  05A5  1803               	skipnc
  4354  05A6  07C2               	addwf	readTemp@aux+1,f
  4355  05A7  1803               	skipnc
  4356  05A8  07C3               	addwf	readTemp@aux+2,f
  4357  05A9  1803               	skipnc
  4358  05AA  07C4               	addwf	readTemp@aux+3,f
  4359                           
  4360                           ;aht10.c: 96: aux <<= 8;
  4361  05AB  0843               	movf	readTemp@aux+2,w
  4362  05AC  00C4               	movwf	readTemp@aux+3
  4363  05AD  0842               	movf	readTemp@aux+1,w
  4364  05AE  00C3               	movwf	readTemp@aux+2
  4365  05AF  0841               	movf	readTemp@aux,w
  4366  05B0  00C2               	movwf	readTemp@aux+1
  4367  05B1  01C1               	clrf	readTemp@aux
  4368                           
  4369                           ;aht10.c: 97: aux += buff[5];
  4370  05B2  083F               	movf	readTemp@buff+5,w
  4371  05B3  07C1               	addwf	readTemp@aux,f
  4372  05B4  3001               	movlw	1
  4373  05B5  1803               	skipnc
  4374  05B6  07C2               	addwf	readTemp@aux+1,f
  4375  05B7  1803               	skipnc
  4376  05B8  07C3               	addwf	readTemp@aux+2,f
  4377  05B9  1803               	skipnc
  4378  05BA  07C4               	addwf	readTemp@aux+3,f
  4379                           
  4380                           ;aht10.c: 99: aux *= 1000;
  4381  05BB  3003               	movlw	3
  4382  05BC  01A3               	clrf	?___lmul+3
  4383  05BD  01A2               	clrf	?___lmul+2
  4384  05BE  00A1               	movwf	?___lmul+1
  4385  05BF  30E8               	movlw	232
  4386  05C0  00A0               	movwf	?___lmul
  4387  05C1  0844               	movf	readTemp@aux+3,w
  4388  05C2  00A7               	movwf	?___lmul+7
  4389  05C3  0843               	movf	readTemp@aux+2,w
  4390  05C4  00A6               	movwf	?___lmul+6
  4391  05C5  0842               	movf	readTemp@aux+1,w
  4392  05C6  00A5               	movwf	?___lmul+5
  4393  05C7  0841               	movf	readTemp@aux,w
  4394  05C8  00A4               	movwf	?___lmul+4
  4395  05C9  27C6  118A         	fcall	___lmul
  4396  05CB  0823               	movf	?___lmul+3,w
  4397  05CC  00C4               	movwf	readTemp@aux+3
  4398  05CD  0822               	movf	?___lmul+2,w
  4399  05CE  00C3               	movwf	readTemp@aux+2
  4400  05CF  0821               	movf	?___lmul+1,w
  4401  05D0  00C2               	movwf	readTemp@aux+1
  4402  05D1  0820               	movf	?___lmul,w
  4403  05D2  00C1               	movwf	readTemp@aux
  4404                           
  4405                           ;aht10.c: 100: aux >>= 10;
  4406  05D3  300A               	movlw	10
  4407  05D4                     u1275:	
  4408  05D4  1003               	clrc
  4409  05D5  0CC4               	rrf	readTemp@aux+3,f
  4410  05D6  0CC3               	rrf	readTemp@aux+2,f
  4411  05D7  0CC2               	rrf	readTemp@aux+1,f
  4412  05D8  0CC1               	rrf	readTemp@aux,f
  4413  05D9  3EFF               	addlw	-1
  4414  05DA  1D03               	skipz
  4415  05DB  2DD4               	goto	u1275
  4416                           
  4417                           ;aht10.c: 101: aux *= 200;
  4418  05DC  30C8               	movlw	200
  4419  05DD  00A0               	movwf	?___lmul
  4420  05DE  01A1               	clrf	?___lmul+1
  4421  05DF  01A2               	clrf	?___lmul+2
  4422  05E0  01A3               	clrf	?___lmul+3
  4423  05E1  0844               	movf	readTemp@aux+3,w
  4424  05E2  00A7               	movwf	?___lmul+7
  4425  05E3  0843               	movf	readTemp@aux+2,w
  4426  05E4  00A6               	movwf	?___lmul+6
  4427  05E5  0842               	movf	readTemp@aux+1,w
  4428  05E6  00A5               	movwf	?___lmul+5
  4429  05E7  0841               	movf	readTemp@aux,w
  4430  05E8  00A4               	movwf	?___lmul+4
  4431  05E9  27C6  118A         	fcall	___lmul
  4432  05EB  0823               	movf	?___lmul+3,w
  4433  05EC  00C4               	movwf	readTemp@aux+3
  4434  05ED  0822               	movf	?___lmul+2,w
  4435  05EE  00C3               	movwf	readTemp@aux+2
  4436  05EF  0821               	movf	?___lmul+1,w
  4437  05F0  00C2               	movwf	readTemp@aux+1
  4438  05F1  0820               	movf	?___lmul,w
  4439  05F2  00C1               	movwf	readTemp@aux
  4440                           
  4441                           ;aht10.c: 102: aux >>= 10;
  4442  05F3  300A               	movlw	10
  4443  05F4                     u1285:	
  4444  05F4  1003               	clrc
  4445  05F5  0CC4               	rrf	readTemp@aux+3,f
  4446  05F6  0CC3               	rrf	readTemp@aux+2,f
  4447  05F7  0CC2               	rrf	readTemp@aux+1,f
  4448  05F8  0CC1               	rrf	readTemp@aux,f
  4449  05F9  3EFF               	addlw	-1
  4450  05FA  1D03               	skipz
  4451  05FB  2DF4               	goto	u1285
  4452                           
  4453                           ;aht10.c: 103: aux -= 50000;
  4454  05FC  3050               	movlw	80
  4455  05FD  00B6               	movwf	??_readTemp
  4456  05FE  30C3               	movlw	195
  4457  05FF  00B7               	movwf	??_readTemp+1
  4458  0600  01B8               	clrf	??_readTemp+2
  4459  0601  01B9               	clrf	??_readTemp+3
  4460  0602  0836               	movf	??_readTemp,w
  4461  0603  02C1               	subwf	readTemp@aux,f
  4462  0604  0837               	movf	??_readTemp+1,w
  4463  0605  1C03               	skipc
  4464  0606  0F37               	incfsz	??_readTemp+1,w
  4465  0607  02C2               	subwf	readTemp@aux+1,f
  4466  0608  0838               	movf	??_readTemp+2,w
  4467  0609  1C03               	skipc
  4468  060A  0F38               	incfsz	??_readTemp+2,w
  4469  060B  02C3               	subwf	readTemp@aux+2,f
  4470  060C  0839               	movf	??_readTemp+3,w
  4471  060D  1C03               	skipc
  4472  060E  0F39               	incfsz	??_readTemp+3,w
  4473  060F  02C4               	subwf	readTemp@aux+3,f
  4474                           
  4475                           ;aht10.c: 105: unsigned char aux2;
  4476                           ;aht10.c: 107: aux2 = aux/10000;
  4477  0610  3027               	movlw	39
  4478  0611  01A3               	clrf	?___lldiv+3
  4479  0612  01A2               	clrf	?___lldiv+2
  4480  0613  00A1               	movwf	?___lldiv+1
  4481  0614  3010               	movlw	16
  4482  0615  00A0               	movwf	?___lldiv
  4483  0616  0844               	movf	readTemp@aux+3,w
  4484  0617  00A7               	movwf	?___lldiv+7
  4485  0618  0843               	movf	readTemp@aux+2,w
  4486  0619  00A6               	movwf	?___lldiv+6
  4487  061A  0842               	movf	readTemp@aux+1,w
  4488  061B  00A5               	movwf	?___lldiv+5
  4489  061C  0841               	movf	readTemp@aux,w
  4490  061D  00A4               	movwf	?___lldiv+4
  4491  061E  26A0  118A         	fcall	___lldiv
  4492  0620  0820               	movf	?___lldiv,w
  4493  0621  00C0               	movwf	readTemp@aux2
  4494  0622  30F0               	movlw	240
  4495                           
  4496                           ;aht10.c: 108: aux2 <<= 4;
  4497  0623  0EC0               	swapf	readTemp@aux2,f
  4498  0624  05C0               	andwf	readTemp@aux2,f
  4499                           
  4500                           ;aht10.c: 109: readTemperature = aux2;
  4501  0625  0840               	movf	readTemp@aux2,w
  4502  0626  00E2               	movwf	_readTemperature
  4503                           
  4504                           ;aht10.c: 110: aux2 = (aux/1000)%10;
  4505  0627  300A               	movlw	10
  4506  0628  00AD               	movwf	?___llmod
  4507  0629  3003               	movlw	3
  4508  062A  01AE               	clrf	?___llmod+1
  4509  062B  01AF               	clrf	?___llmod+2
  4510  062C  01B0               	clrf	?___llmod+3
  4511  062D  01A3               	clrf	?___lldiv+3
  4512  062E  01A2               	clrf	?___lldiv+2
  4513  062F  00A1               	movwf	?___lldiv+1
  4514  0630  30E8               	movlw	232
  4515  0631  00A0               	movwf	?___lldiv
  4516  0632  0844               	movf	readTemp@aux+3,w
  4517  0633  00A7               	movwf	?___lldiv+7
  4518  0634  0843               	movf	readTemp@aux+2,w
  4519  0635  00A6               	movwf	?___lldiv+6
  4520  0636  0842               	movf	readTemp@aux+1,w
  4521  0637  00A5               	movwf	?___lldiv+5
  4522  0638  0841               	movf	readTemp@aux,w
  4523  0639  00A4               	movwf	?___lldiv+4
  4524  063A  26A0  118A         	fcall	___lldiv
  4525  063C  0823               	movf	?___lldiv+3,w
  4526  063D  00B4               	movwf	?___llmod+7
  4527  063E  0822               	movf	?___lldiv+2,w
  4528  063F  00B3               	movwf	?___llmod+6
  4529  0640  0821               	movf	?___lldiv+1,w
  4530  0641  00B2               	movwf	?___llmod+5
  4531  0642  0820               	movf	?___lldiv,w
  4532  0643  00B1               	movwf	?___llmod+4
  4533  0644  2778  118A         	fcall	___llmod
  4534  0646  082D               	movf	?___llmod,w
  4535  0647  00C0               	movwf	readTemp@aux2
  4536                           
  4537                           ;aht10.c: 111: readTemperature += aux2;
  4538  0648  07E2               	addwf	_readTemperature,f
  4539                           
  4540                           ;aht10.c: 113: readTemperatureDec = (aux/100)%10;
  4541  0649  300A               	movlw	10
  4542  064A  00AD               	movwf	?___llmod
  4543  064B  3064               	movlw	100
  4544  064C  01AE               	clrf	?___llmod+1
  4545  064D  01AF               	clrf	?___llmod+2
  4546  064E  01B0               	clrf	?___llmod+3
  4547  064F  00A0               	movwf	?___lldiv
  4548  0650  01A1               	clrf	?___lldiv+1
  4549  0651  01A2               	clrf	?___lldiv+2
  4550  0652  01A3               	clrf	?___lldiv+3
  4551  0653  0844               	movf	readTemp@aux+3,w
  4552  0654  00A7               	movwf	?___lldiv+7
  4553  0655  0843               	movf	readTemp@aux+2,w
  4554  0656  00A6               	movwf	?___lldiv+6
  4555  0657  0842               	movf	readTemp@aux+1,w
  4556  0658  00A5               	movwf	?___lldiv+5
  4557  0659  0841               	movf	readTemp@aux,w
  4558  065A  00A4               	movwf	?___lldiv+4
  4559  065B  26A0  118A         	fcall	___lldiv
  4560  065D  0823               	movf	?___lldiv+3,w
  4561  065E  00B4               	movwf	?___llmod+7
  4562  065F  0822               	movf	?___lldiv+2,w
  4563  0660  00B3               	movwf	?___llmod+6
  4564  0661  0821               	movf	?___lldiv+1,w
  4565  0662  00B2               	movwf	?___llmod+5
  4566  0663  0820               	movf	?___lldiv,w
  4567  0664  00B1               	movwf	?___llmod+4
  4568  0665  2778  118A         	fcall	___llmod
  4569  0667  082D               	movf	?___llmod,w
  4570  0668  00E3               	movwf	_readTemperatureDec
  4571  0669  30F0               	movlw	240
  4572                           
  4573                           ;aht10.c: 114: readTemperatureDec <<= 4;
  4574  066A  0EE3               	swapf	_readTemperatureDec,f
  4575  066B  05E3               	andwf	_readTemperatureDec,f
  4576                           
  4577                           ;aht10.c: 115: readTemperatureDec += (aux/10)%10;
  4578  066C  300A               	movlw	10
  4579  066D  00AD               	movwf	?___llmod
  4580  066E  01AE               	clrf	?___llmod+1
  4581  066F  01AF               	clrf	?___llmod+2
  4582  0670  01B0               	clrf	?___llmod+3
  4583  0671  00A0               	movwf	?___lldiv
  4584  0672  01A1               	clrf	?___lldiv+1
  4585  0673  01A2               	clrf	?___lldiv+2
  4586  0674  01A3               	clrf	?___lldiv+3
  4587  0675  0844               	movf	readTemp@aux+3,w
  4588  0676  00A7               	movwf	?___lldiv+7
  4589  0677  0843               	movf	readTemp@aux+2,w
  4590  0678  00A6               	movwf	?___lldiv+6
  4591  0679  0842               	movf	readTemp@aux+1,w
  4592  067A  00A5               	movwf	?___lldiv+5
  4593  067B  0841               	movf	readTemp@aux,w
  4594  067C  00A4               	movwf	?___lldiv+4
  4595  067D  26A0  118A         	fcall	___lldiv
  4596  067F  0823               	movf	?___lldiv+3,w
  4597  0680  00B4               	movwf	?___llmod+7
  4598  0681  0822               	movf	?___lldiv+2,w
  4599  0682  00B3               	movwf	?___llmod+6
  4600  0683  0821               	movf	?___lldiv+1,w
  4601  0684  00B2               	movwf	?___llmod+5
  4602  0685  0820               	movf	?___lldiv,w
  4603  0686  00B1               	movwf	?___llmod+4
  4604  0687  2778               	fcall	___llmod
  4605  0688  082D               	movf	?___llmod,w
  4606  0689  07E3               	addwf	_readTemperatureDec,f
  4607  068A  0008               	return
  4608  068B                     __end_of_readTemp:	
  4609  068B                     __ptext1008:	
  4610 ;; =============== function _i2cAck ends ============
  4611                           
  4612                           
  4613 ;; *************** function _i2cRead *****************
  4614 ;; Defined at:
  4615 ;;		line 147 in file "I2c.c"
  4616 ;; Parameters:    Size  Location     Type
  4617 ;;		None
  4618 ;; Auto vars:     Size  Location     Type
  4619 ;;  x               1    4[BANK0 ] unsigned char 
  4620 ;;  read_data       1    3[BANK0 ] unsigned char 
  4621 ;; Return value:  Size  Location     Type
  4622 ;;                  1    wreg      unsigned char 
  4623 ;; Registers used:
  4624 ;;		wreg, status,2, status,0, pclath, cstack
  4625 ;; Tracked objects:
  4626 ;;		On entry : 60/100
  4627 ;;		On exit  : 60/100
  4628 ;;		Unchanged: FFF9F/0
  4629 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4630 ;;      Params:         0       0       0       0
  4631 ;;      Locals:         0       2       0       0
  4632 ;;      Temps:          0       0       0       0
  4633 ;;      Totals:         0       2       0       0
  4634 ;;Total ram usage:        2 bytes
  4635 ;; Hardware stack levels used:    1
  4636 ;; Hardware stack levels required when called:    5
  4637 ;; This function calls:
  4638 ;;		_scl_out
  4639 ;; This function is called by:
  4640 ;;		_eepromReadByte
  4641 ;;		_eepromReadLog
  4642 ;;		_eepromReadLogPage
  4643 ;;		_readTemp
  4644 ;; This function uses a non-reentrant model
  4645 ;;
  4646  068B                     _i2cRead:	
  4647                           
  4648                           ;I2c.c: 148: unsigned char x,read_data;
  4649                           ;I2c.c: 149: read_data = 0;
  4650                           
  4651                           ; Regs used in _i2cRead: [wreg+status,2+status,0+pclath+cstack]
  4652  068B  01A3               	clrf	i2cRead@read_data
  4653                           
  4654                           ;I2c.c: 150: for (x=0; x<=7; x++){
  4655  068C  01A4               	clrf	i2cRead@x
  4656                           
  4657                           ;I2c.c: 151: read_data <<= 1;
  4658  068D  1003               	clrc
  4659  068E                     L1:	
  4660  068E  3001               	movlw	1
  4661  068F  0DA3               	rlf	i2cRead@read_data,f
  4662                           
  4663                           ;I2c.c: 152: scl_out(1);
  4664  0690  2715  118A         	fcall	_scl_out
  4665                           
  4666                           ;I2c.c: 153: read_data |= RB4;
  4667  0692  3000               	movlw	0
  4668  0693  1A06               	btfsc	6,4
  4669  0694  3001               	movlw	1
  4670  0695  04A3               	iorwf	i2cRead@read_data,f
  4671                           
  4672                           ;I2c.c: 154: scl_out(0);
  4673  0696  3000               	movlw	0
  4674  0697  2715  118A         	fcall	_scl_out
  4675  0699  3008               	movlw	8
  4676  069A  0AA4               	incf	i2cRead@x,f
  4677  069B  0224               	subwf	i2cRead@x,w
  4678  069C  1C03               	skipc
  4679  069D  2E8E               	goto	L1
  4680                           
  4681                           ;I2c.c: 155: }
  4682                           ;I2c.c: 157: return(read_data);
  4683  069E  0823               	movf	i2cRead@read_data,w
  4684  069F  0008               	return
  4685  06A0                     __end_of_i2cRead:	
  4686  06A0                     __ptext1021:	
  4687 ;; =============== function _UART_send_String ends ============
  4688                           
  4689                           
  4690 ;; *************** function ___lldiv *****************
  4691 ;; Defined at:
  4692 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\lldiv.c"
  4693 ;; Parameters:    Size  Location     Type
  4694 ;;  divisor         4    0[BANK0 ] unsigned long 
  4695 ;;  dividend        4    4[BANK0 ] unsigned long 
  4696 ;; Auto vars:     Size  Location     Type
  4697 ;;  quotient        4    8[BANK0 ] unsigned long 
  4698 ;;  counter         1   12[BANK0 ] unsigned char 
  4699 ;; Return value:  Size  Location     Type
  4700 ;;                  4    0[BANK0 ] unsigned long 
  4701 ;; Registers used:
  4702 ;;		wreg, status,2, status,0
  4703 ;; Tracked objects:
  4704 ;;		On entry : 60/0
  4705 ;;		On exit  : 60/0
  4706 ;;		Unchanged: FFF9F/0
  4707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4708 ;;      Params:         0       8       0       0
  4709 ;;      Locals:         0       5       0       0
  4710 ;;      Temps:          0       0       0       0
  4711 ;;      Totals:         0      13       0       0
  4712 ;;Total ram usage:       13 bytes
  4713 ;; Hardware stack levels used:    1
  4714 ;; Hardware stack levels required when called:    3
  4715 ;; This function calls:
  4716 ;;		Nothing
  4717 ;; This function is called by:
  4718 ;;		_readTemp
  4719 ;; This function uses a non-reentrant model
  4720 ;;
  4721  06A0                     ___lldiv:	
  4722                           
  4723                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  4724  06A0  01A8               	clrf	___lldiv@quotient
  4725  06A1  01A9               	clrf	___lldiv@quotient+1
  4726  06A2  01AA               	clrf	___lldiv@quotient+2
  4727  06A3  01AB               	clrf	___lldiv@quotient+3
  4728  06A4  0823               	movf	___lldiv@divisor+3,w
  4729  06A5  0422               	iorwf	___lldiv@divisor+2,w
  4730  06A6  0421               	iorwf	___lldiv@divisor+1,w
  4731  06A7  0420               	iorwf	___lldiv@divisor,w
  4732  06A8  1903               	skipnz
  4733  06A9  2EDF               	goto	l7798
  4734  06AA  01AC               	clrf	___lldiv@counter
  4735  06AB                     L2:	
  4736  06AB  0AAC               	incf	___lldiv@counter,f
  4737  06AC  1BA3               	btfsc	___lldiv@divisor+3,7
  4738  06AD  2EB4               	goto	l7786
  4739  06AE  1003               	clrc
  4740  06AF  0DA0               	rlf	___lldiv@divisor,f
  4741  06B0  0DA1               	rlf	___lldiv@divisor+1,f
  4742  06B1  0DA2               	rlf	___lldiv@divisor+2,f
  4743  06B2  0DA3               	rlf	___lldiv@divisor+3,f
  4744  06B3  2EAB               	goto	L2
  4745  06B4                     l7786:	
  4746  06B4  1003               	clrc
  4747  06B5  0DA8               	rlf	___lldiv@quotient,f
  4748  06B6  0DA9               	rlf	___lldiv@quotient+1,f
  4749  06B7  0DAA               	rlf	___lldiv@quotient+2,f
  4750  06B8  0DAB               	rlf	___lldiv@quotient+3,f
  4751  06B9  0823               	movf	___lldiv@divisor+3,w
  4752  06BA  0227               	subwf	___lldiv@dividend+3,w
  4753  06BB  1D03               	skipz
  4754  06BC  2EC7               	goto	u1115
  4755  06BD  0822               	movf	___lldiv@divisor+2,w
  4756  06BE  0226               	subwf	___lldiv@dividend+2,w
  4757  06BF  1D03               	skipz
  4758  06C0  2EC7               	goto	u1115
  4759  06C1  0821               	movf	___lldiv@divisor+1,w
  4760  06C2  0225               	subwf	___lldiv@dividend+1,w
  4761  06C3  1D03               	skipz
  4762  06C4  2EC7               	goto	u1115
  4763  06C5  0820               	movf	___lldiv@divisor,w
  4764  06C6  0224               	subwf	___lldiv@dividend,w
  4765  06C7                     u1115:	
  4766  06C7  1C03               	skipc
  4767  06C8  2ED9               	goto	L3
  4768  06C9  0820               	movf	___lldiv@divisor,w
  4769  06CA  02A4               	subwf	___lldiv@dividend,f
  4770  06CB  0821               	movf	___lldiv@divisor+1,w
  4771  06CC  1C03               	skipc
  4772  06CD  0F21               	incfsz	___lldiv@divisor+1,w
  4773  06CE  02A5               	subwf	___lldiv@dividend+1,f
  4774  06CF  0822               	movf	___lldiv@divisor+2,w
  4775  06D0  1C03               	skipc
  4776  06D1  0F22               	incfsz	___lldiv@divisor+2,w
  4777  06D2  02A6               	subwf	___lldiv@dividend+2,f
  4778  06D3  0823               	movf	___lldiv@divisor+3,w
  4779  06D4  1C03               	skipc
  4780  06D5  0F23               	incfsz	___lldiv@divisor+3,w
  4781  06D6  02A7               	subwf	___lldiv@dividend+3,f
  4782  06D7  1428               	bsf	___lldiv@quotient,0
  4783  06D8  1003               	clrc
  4784  06D9                     L3:	
  4785  06D9  0CA3               	rrf	___lldiv@divisor+3,f
  4786  06DA  0CA2               	rrf	___lldiv@divisor+2,f
  4787  06DB  0CA1               	rrf	___lldiv@divisor+1,f
  4788  06DC  0CA0               	rrf	___lldiv@divisor,f
  4789  06DD  0BAC               	decfsz	___lldiv@counter,f
  4790  06DE  2EB4               	goto	l7786
  4791  06DF                     l7798:	
  4792  06DF  082B               	movf	___lldiv@quotient+3,w
  4793  06E0  00A3               	movwf	?___lldiv+3
  4794  06E1  082A               	movf	___lldiv@quotient+2,w
  4795  06E2  00A2               	movwf	?___lldiv+2
  4796  06E3  0829               	movf	___lldiv@quotient+1,w
  4797  06E4  00A1               	movwf	?___lldiv+1
  4798  06E5  0828               	movf	___lldiv@quotient,w
  4799  06E6  00A0               	movwf	?___lldiv
  4800  06E7  0008               	return
  4801  06E8                     __end_of___lldiv:	
  4802  06E8                     __ptext1007:	
  4803 ;; =============== function _i2cNack ends ============
  4804                           
  4805                           
  4806 ;; *************** function _i2cAck *****************
  4807 ;; Defined at:
  4808 ;;		line 161 in file "I2c.c"
  4809 ;; Parameters:    Size  Location     Type
  4810 ;;		None
  4811 ;; Auto vars:     Size  Location     Type
  4812 ;;		None
  4813 ;; Return value:  Size  Location     Type
  4814 ;;		None               void
  4815 ;; Registers used:
  4816 ;;		wreg, status,2, status,0, pclath, cstack
  4817 ;; Tracked objects:
  4818 ;;		On entry : 0/100
  4819 ;;		On exit  : 60/100
  4820 ;;		Unchanged: FFF9F/0
  4821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4822 ;;      Params:         0       0       0       0
  4823 ;;      Locals:         0       0       0       0
  4824 ;;      Temps:          0       0       0       0
  4825 ;;      Totals:         0       0       0       0
  4826 ;;Total ram usage:        0 bytes
  4827 ;; Hardware stack levels used:    1
  4828 ;; Hardware stack levels required when called:    5
  4829 ;; This function calls:
  4830 ;;		_sda_out
  4831 ;;		_scl_out
  4832 ;; This function is called by:
  4833 ;;		_eepromReadLog
  4834 ;;		_eepromReadLogPage
  4835 ;;		_readTemp
  4836 ;; This function uses a non-reentrant model
  4837 ;;
  4838  06E8                     _i2cAck:	
  4839                           
  4840                           ;I2c.c: 162: sda_out(0);
  4841                           
  4842                           ; Regs used in _i2cAck: [wreg+status,2+status,0+pclath+cstack]
  4843  06E8  3000               	movlw	0
  4844  06E9  272F  118A         	fcall	_sda_out
  4845                           
  4846                           ;I2c.c: 163: scl_out(1);
  4847  06EB  3001               	movlw	1
  4848  06EC  2715  118A         	fcall	_scl_out
  4849                           
  4850                           ;I2c.c: 164: scl_out(0);
  4851  06EE  3000               	movlw	0
  4852  06EF  2715  118A         	fcall	_scl_out
  4853                           
  4854                           ;I2c.c: 165: sda_out(1);
  4855  06F1  3001               	movlw	1
  4856  06F2  2F2F               	ljmp	_sda_out
  4857  06F3                     __end_of_i2cAck:	
  4858  06F3                     __ptext1009:	
  4859 ;; =============== function _i2cRead ends ============
  4860                           
  4861                           
  4862 ;; *************** function _i2cWrite *****************
  4863 ;; Defined at:
  4864 ;;		line 131 in file "I2c.c"
  4865 ;; Parameters:    Size  Location     Type
  4866 ;;  data            1    wreg     unsigned char 
  4867 ;; Auto vars:     Size  Location     Type
  4868 ;;  data            1    3[BANK0 ] unsigned char 
  4869 ;;  x               1    5[BANK0 ] unsigned char 
  4870 ;;  ack             1    4[BANK0 ] unsigned char 
  4871 ;; Return value:  Size  Location     Type
  4872 ;;                  1    wreg      unsigned char 
  4873 ;; Registers used:
  4874 ;;		wreg, status,2, status,0, pclath, cstack
  4875 ;; Tracked objects:
  4876 ;;		On entry : 60/100
  4877 ;;		On exit  : 60/100
  4878 ;;		Unchanged: FFF9F/0
  4879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4880 ;;      Params:         0       0       0       0
  4881 ;;      Locals:         0       3       0       0
  4882 ;;      Temps:          0       0       0       0
  4883 ;;      Totals:         0       3       0       0
  4884 ;;Total ram usage:        3 bytes
  4885 ;; Hardware stack levels used:    1
  4886 ;; Hardware stack levels required when called:    5
  4887 ;; This function calls:
  4888 ;;		_sda_out
  4889 ;;		_scl_out
  4890 ;; This function is called by:
  4891 ;;		_eepromReadByte
  4892 ;;		_eepromWriteByte
  4893 ;;		_eepromReadLog
  4894 ;;		_eepromReadLogPage
  4895 ;;		_initAht10
  4896 ;;		_sendTriggerMeasurementCmd
  4897 ;;		_readTemp
  4898 ;; This function uses a non-reentrant model
  4899 ;;
  4900  06F3                     _i2cWrite:	
  4901                           
  4902                           ; Regs used in _i2cWrite: [wreg+status,2+status,0+pclath+cstack]
  4903                           ;i2cWrite@data stored from wreg
  4904  06F3  00A3               	movwf	i2cWrite@data
  4905                           
  4906                           ;I2c.c: 132: unsigned char x,ack;
  4907                           ;I2c.c: 133: for (x=0; x<=7; x++){
  4908  06F4  01A5               	clrf	i2cWrite@x
  4909  06F5                     l7896:	
  4910                           
  4911                           ;I2c.c: 134: sda_out((data & 0x80) != 0);
  4912  06F5  3000               	movlw	0
  4913  06F6  1BA3               	btfsc	i2cWrite@data,7
  4914  06F7  3001               	movlw	1
  4915  06F8  272F  118A         	fcall	_sda_out
  4916                           
  4917                           ;I2c.c: 135: scl_out(1);
  4918  06FA  3001               	movlw	1
  4919  06FB  2715  118A         	fcall	_scl_out
  4920                           
  4921                           ;I2c.c: 136: scl_out(0);
  4922  06FD  3000               	movlw	0
  4923  06FE  2715  118A         	fcall	_scl_out
  4924  0700  3008               	movlw	8
  4925                           
  4926                           ;I2c.c: 137: data <<= 1;
  4927  0701  1003               	clrc
  4928  0702  0DA3               	rlf	i2cWrite@data,f
  4929  0703  0AA5               	incf	i2cWrite@x,f
  4930  0704  0225               	subwf	i2cWrite@x,w
  4931  0705  1C03               	skipc
  4932  0706  2EF5               	goto	l7896
  4933                           
  4934                           ;I2c.c: 138: }
  4935                           ;I2c.c: 139: sda_out(1);
  4936  0707  3001               	movlw	1
  4937  0708  272F  118A         	fcall	_sda_out
  4938                           
  4939                           ;I2c.c: 140: scl_out(1);
  4940  070A  3001               	movlw	1
  4941  070B  2715  118A         	fcall	_scl_out
  4942                           
  4943                           ;I2c.c: 141: ack = RB4;
  4944  070D  3000               	movlw	0
  4945  070E  1A06               	btfsc	6,4
  4946  070F  3001               	movlw	1
  4947  0710  00A4               	movwf	i2cWrite@ack
  4948                           
  4949                           ;I2c.c: 142: scl_out(0);
  4950  0711  3000               	movlw	0
  4951  0712  2715               	fcall	_scl_out
  4952                           
  4953                           ;I2c.c: 143: return(ack);
  4954  0713  0824               	movf	i2cWrite@ack,w
  4955  0714  0008               	return
  4956  0715                     __end_of_i2cWrite:	
  4957  0715                     __ptext1014:	
  4958 ;; =============== function _sda_out ends ============
  4959                           
  4960                           
  4961 ;; *************** function _scl_out *****************
  4962 ;; Defined at:
  4963 ;;		line 177 in file "I2c.c"
  4964 ;; Parameters:    Size  Location     Type
  4965 ;;  value           1    wreg     unsigned char 
  4966 ;; Auto vars:     Size  Location     Type
  4967 ;;  value           1    2[BANK0 ] unsigned char 
  4968 ;; Return value:  Size  Location     Type
  4969 ;;		None               void
  4970 ;; Registers used:
  4971 ;;		wreg, status,2, status,0, pclath, cstack
  4972 ;; Tracked objects:
  4973 ;;		On entry : 0/100
  4974 ;;		On exit  : 60/100
  4975 ;;		Unchanged: FFF9F/0
  4976 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4977 ;;      Params:         0       0       0       0
  4978 ;;      Locals:         0       1       0       0
  4979 ;;      Temps:          0       0       0       0
  4980 ;;      Totals:         0       1       0       0
  4981 ;;Total ram usage:        1 bytes
  4982 ;; Hardware stack levels used:    1
  4983 ;; Hardware stack levels required when called:    4
  4984 ;; This function calls:
  4985 ;;		_halfclockdelay
  4986 ;; This function is called by:
  4987 ;;		_i2cStart
  4988 ;;		_i2cStop
  4989 ;;		_i2cWrite
  4990 ;;		_i2cRead
  4991 ;;		_i2cAck
  4992 ;;		_i2cNack
  4993 ;; This function uses a non-reentrant model
  4994 ;;
  4995  0715                     _scl_out:	
  4996                           
  4997                           ; Regs used in _scl_out: [wreg+status,2+status,0+pclath+cstack]
  4998                           ;scl_out@value stored from wreg
  4999  0715  1283               	bcf	3,5	;RP0=0, select bank0
  5000  0716  1303               	bcf	3,6	;RP1=0, select bank0
  5001  0717  00A2               	movwf	scl_out@value
  5002                           
  5003                           ;I2c.c: 178: if(value==1){
  5004  0718  0322               	decf	scl_out@value,w
  5005  0719  1D03               	skipz
  5006  071A  2F21               	goto	l2863
  5007                           
  5008                           ;I2c.c: 179: TRISB6=1;
  5009  071B  1683               	bsf	3,5	;RP0=1, select bank1
  5010  071C  1706               	bsf	6,6
  5011  071D                     l2864:	
  5012                           ;I2c.c: 181: while(RB6 == 0);
  5013                           
  5014  071D  1283               	bcf	3,5	;RP0=0, select bank0
  5015  071E  1B06               	btfsc	6,6
  5016  071F  2F23               	goto	l7870
  5017  0720  2F1D               	goto	l2864
  5018  0721                     l2863:	
  5019                           
  5020                           ;I2c.c: 183: else{
  5021                           ;I2c.c: 184: TRISB6=0;
  5022  0721  1683               	bsf	3,5	;RP0=1, select bank1
  5023  0722  1306               	bcf	6,6
  5024  0723                     l7870:	
  5025                           
  5026                           ;I2c.c: 185: }
  5027                           ;I2c.c: 188: halfclockdelay();
  5028  0723  2FFA               	ljmp	l7580
  5029  0724                     __end_of_scl_out:	
  5030  0724                     __ptext1006:	
  5031 ;; =============== function _jdyConfig ends ============
  5032                           
  5033                           
  5034 ;; *************** function _i2cNack *****************
  5035 ;; Defined at:
  5036 ;;		line 169 in file "I2c.c"
  5037 ;; Parameters:    Size  Location     Type
  5038 ;;		None
  5039 ;; Auto vars:     Size  Location     Type
  5040 ;;		None
  5041 ;; Return value:  Size  Location     Type
  5042 ;;		None               void
  5043 ;; Registers used:
  5044 ;;		wreg, status,2, status,0, pclath, cstack
  5045 ;; Tracked objects:
  5046 ;;		On entry : 0/100
  5047 ;;		On exit  : 60/100
  5048 ;;		Unchanged: FFF9F/0
  5049 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5050 ;;      Params:         0       0       0       0
  5051 ;;      Locals:         0       0       0       0
  5052 ;;      Temps:          0       0       0       0
  5053 ;;      Totals:         0       0       0       0
  5054 ;;Total ram usage:        0 bytes
  5055 ;; Hardware stack levels used:    1
  5056 ;; Hardware stack levels required when called:    5
  5057 ;; This function calls:
  5058 ;;		_sda_out
  5059 ;;		_scl_out
  5060 ;; This function is called by:
  5061 ;;		_eepromReadByte
  5062 ;;		_eepromReadLog
  5063 ;;		_eepromReadLogPage
  5064 ;;		_readTemp
  5065 ;; This function uses a non-reentrant model
  5066 ;;
  5067  0724                     _i2cNack:	
  5068                           
  5069                           ;I2c.c: 170: sda_out(1);
  5070                           
  5071                           ; Regs used in _i2cNack: [wreg+status,2+status,0+pclath+cstack]
  5072  0724  3001               	movlw	1
  5073  0725  272F  118A         	fcall	_sda_out
  5074                           
  5075                           ;I2c.c: 171: scl_out(1);
  5076  0727  3001               	movlw	1
  5077  0728  2715  118A         	fcall	_scl_out
  5078                           
  5079                           ;I2c.c: 172: scl_out(0);
  5080  072A  3000               	movlw	0
  5081  072B  2715  118A         	fcall	_scl_out
  5082                           
  5083                           ;I2c.c: 173: sda_out(1);
  5084  072D  3001               	movlw	1
  5085  072E  2F2F               	ljmp	_sda_out
  5086  072F                     __end_of_i2cNack:	
  5087  072F                     __ptext1013:	
  5088 ;; =============== function _resposta ends ============
  5089                           
  5090                           
  5091 ;; *************** function _sda_out *****************
  5092 ;; Defined at:
  5093 ;;		line 192 in file "I2c.c"
  5094 ;; Parameters:    Size  Location     Type
  5095 ;;  value           1    wreg     unsigned char 
  5096 ;; Auto vars:     Size  Location     Type
  5097 ;;  value           1    2[BANK0 ] unsigned char 
  5098 ;; Return value:  Size  Location     Type
  5099 ;;		None               void
  5100 ;; Registers used:
  5101 ;;		wreg, status,2, status,0, pclath, cstack
  5102 ;; Tracked objects:
  5103 ;;		On entry : 0/100
  5104 ;;		On exit  : 60/100
  5105 ;;		Unchanged: FFF9F/0
  5106 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5107 ;;      Params:         0       0       0       0
  5108 ;;      Locals:         0       1       0       0
  5109 ;;      Temps:          0       0       0       0
  5110 ;;      Totals:         0       1       0       0
  5111 ;;Total ram usage:        1 bytes
  5112 ;; Hardware stack levels used:    1
  5113 ;; Hardware stack levels required when called:    4
  5114 ;; This function calls:
  5115 ;;		_halfclockdelay
  5116 ;; This function is called by:
  5117 ;;		_i2cStart
  5118 ;;		_i2cStop
  5119 ;;		_i2cWrite
  5120 ;;		_i2cAck
  5121 ;;		_i2cNack
  5122 ;; This function uses a non-reentrant model
  5123 ;;
  5124  072F                     _sda_out:	
  5125                           
  5126                           ; Regs used in _sda_out: [wreg+status,2+status,0+pclath+cstack]
  5127                           ;sda_out@value stored from wreg
  5128  072F  1283               	bcf	3,5	;RP0=0, select bank0
  5129  0730  1303               	bcf	3,6	;RP1=0, select bank0
  5130  0731  00A2               	movwf	sda_out@value
  5131                           
  5132                           ;I2c.c: 193: if(value==1){
  5133  0732  0B22               	decfsz	sda_out@value,w
  5134  0733  2F37               	goto	l2871
  5135                           
  5136                           ;I2c.c: 194: TRISB4=1;
  5137  0734  1683               	bsf	3,5	;RP0=1, select bank1
  5138  0735  1606               	bsf	6,4
  5139                           
  5140                           ;I2c.c: 195: }
  5141  0736  2F39               	goto	l7876
  5142  0737                     l2871:	
  5143                           
  5144                           ;I2c.c: 196: else{
  5145                           ;I2c.c: 197: TRISB4=0;
  5146  0737  1683               	bsf	3,5	;RP0=1, select bank1
  5147  0738  1206               	bcf	6,4
  5148  0739                     l7876:	
  5149                           
  5150                           ;I2c.c: 198: }
  5151                           ;I2c.c: 201: halfclockdelay();
  5152  0739  2FFA               	ljmp	l7580
  5153  073A                     __end_of_sda_out:	
  5154  073A                     __ptext1011:	
  5155 ;; =============== function _i2cStop ends ============
  5156                           
  5157                           
  5158 ;; *************** function _i2cStart *****************
  5159 ;; Defined at:
  5160 ;;		line 116 in file "I2c.c"
  5161 ;; Parameters:    Size  Location     Type
  5162 ;;		None
  5163 ;; Auto vars:     Size  Location     Type
  5164 ;;		None
  5165 ;; Return value:  Size  Location     Type
  5166 ;;		None               void
  5167 ;; Registers used:
  5168 ;;		wreg, status,2, status,0, pclath, cstack
  5169 ;; Tracked objects:
  5170 ;;		On entry : 0/100
  5171 ;;		On exit  : 60/100
  5172 ;;		Unchanged: FFF9F/0
  5173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5174 ;;      Params:         0       0       0       0
  5175 ;;      Locals:         0       0       0       0
  5176 ;;      Temps:          0       0       0       0
  5177 ;;      Totals:         0       0       0       0
  5178 ;;Total ram usage:        0 bytes
  5179 ;; Hardware stack levels used:    1
  5180 ;; Hardware stack levels required when called:    5
  5181 ;; This function calls:
  5182 ;;		_scl_out
  5183 ;;		_sda_out
  5184 ;; This function is called by:
  5185 ;;		_i2cRestart
  5186 ;;		_eepromReadByte
  5187 ;;		_eepromWriteByte
  5188 ;;		_eepromReadLog
  5189 ;;		_eepromReadLogPage
  5190 ;;		_initAht10
  5191 ;;		_sendTriggerMeasurementCmd
  5192 ;;		_readTemp
  5193 ;; This function uses a non-reentrant model
  5194 ;;
  5195  073A                     _i2cStart:	
  5196  073A                     l7886:	
  5197 ;; hardware stack exceeded
  5198                           ; Regs used in _i2cStart: [wreg+status,2+status,0+pclath+cstack]
  5199                           
  5200                           
  5201                           ;I2c.c: 117: scl_out(1);
  5202  073A  3001               	movlw	1
  5203  073B  2715  118A         	fcall	_scl_out
  5204                           
  5205                           ;I2c.c: 118: sda_out(1);
  5206  073D  3001               	movlw	1
  5207  073E  272F  118A         	fcall	_sda_out
  5208                           
  5209                           ;I2c.c: 119: sda_out(0);
  5210  0740  3000               	movlw	0
  5211  0741  272F  118A         	fcall	_sda_out
  5212                           
  5213                           ;I2c.c: 120: scl_out(0);
  5214  0743  3000               	movlw	0
  5215  0744  2F15               	ljmp	_scl_out
  5216  0745                     __end_of_i2cStart:	
  5217  0745                     __ptext1010:	
  5218 ;; =============== function _i2cWrite ends ============
  5219                           
  5220                           
  5221 ;; *************** function _i2cStop *****************
  5222 ;; Defined at:
  5223 ;;		line 124 in file "I2c.c"
  5224 ;; Parameters:    Size  Location     Type
  5225 ;;		None
  5226 ;; Auto vars:     Size  Location     Type
  5227 ;;		None
  5228 ;; Return value:  Size  Location     Type
  5229 ;;		None               void
  5230 ;; Registers used:
  5231 ;;		wreg, status,2, status,0, pclath, cstack
  5232 ;; Tracked objects:
  5233 ;;		On entry : 60/100
  5234 ;;		On exit  : 60/100
  5235 ;;		Unchanged: FFF9F/0
  5236 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5237 ;;      Params:         0       0       0       0
  5238 ;;      Locals:         0       0       0       0
  5239 ;;      Temps:          0       0       0       0
  5240 ;;      Totals:         0       0       0       0
  5241 ;;Total ram usage:        0 bytes
  5242 ;; Hardware stack levels used:    1
  5243 ;; Hardware stack levels required when called:    5
  5244 ;; This function calls:
  5245 ;;		_sda_out
  5246 ;;		_scl_out
  5247 ;; This function is called by:
  5248 ;;		_eepromReadByte
  5249 ;;		_eepromWriteByte
  5250 ;;		_eepromReadLog
  5251 ;;		_eepromReadLogPage
  5252 ;;		_initAht10
  5253 ;;		_sendTriggerMeasurementCmd
  5254 ;;		_readTemp
  5255 ;; This function uses a non-reentrant model
  5256 ;;
  5257  0745                     _i2cStop:	
  5258  0745                     l7888:	
  5259                           ; Regs used in _i2cStop: [wreg+status,2+status,0+pclath+cstack]
  5260                           
  5261                           
  5262                           ;I2c.c: 125: sda_out(0);
  5263  0745  3000               	movlw	0
  5264  0746  272F  118A         	fcall	_sda_out
  5265                           
  5266                           ;I2c.c: 126: scl_out(1);
  5267  0748  3001               	movlw	1
  5268  0749  2715  118A         	fcall	_scl_out
  5269                           
  5270                           ;I2c.c: 127: sda_out(1);
  5271  074B  3001               	movlw	1
  5272  074C  2F2F               	ljmp	_sda_out
  5273  074D                     __end_of_i2cStop:	
  5274  074D                     __ptext1033:	
  5275 ;; =============== function _memset ends ============
  5276                           
  5277                           
  5278 ;; *************** function _UART_send_char *****************
  5279 ;; Defined at:
  5280 ;;		line 37 in file "uart.c"
  5281 ;; Parameters:    Size  Location     Type
  5282 ;;  ch              1    wreg     unsigned char 
  5283 ;; Auto vars:     Size  Location     Type
  5284 ;;  ch              1    0[BANK0 ] unsigned char 
  5285 ;; Return value:  Size  Location     Type
  5286 ;;		None               void
  5287 ;; Registers used:
  5288 ;;		wreg
  5289 ;; Tracked objects:
  5290 ;;		On entry : 60/100
  5291 ;;		On exit  : 60/0
  5292 ;;		Unchanged: FFE00/0
  5293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5294 ;;      Params:         0       0       0       0
  5295 ;;      Locals:         0       1       0       0
  5296 ;;      Temps:          0       0       0       0
  5297 ;;      Totals:         0       1       0       0
  5298 ;;Total ram usage:        1 bytes
  5299 ;; Hardware stack levels used:    1
  5300 ;; Hardware stack levels required when called:    3
  5301 ;; This function calls:
  5302 ;;		Nothing
  5303 ;; This function is called by:
  5304 ;;		_UART_send_String
  5305 ;;		_comandoRx
  5306 ;;		_resposta
  5307 ;; This function uses a non-reentrant model
  5308 ;;
  5309  074D                     _UART_send_char:	
  5310                           
  5311                           ; Regs used in _UART_send_char: [wreg]
  5312                           ;UART_send_char@ch stored from wreg
  5313  074D  00A0               	movwf	UART_send_char@ch
  5314  074E                     l924:	
  5315                           ;uart.c: 38: while(!TXIF);
  5316                           
  5317  074E  1E0C               	btfss	12,4
  5318  074F  2F4E               	goto	l924
  5319  0750  0000               	nop	;#
  5320  0751  0000               	nop	;#
  5321                           
  5322                           ;uart.c: 42: TXREG = ch;
  5323  0752  1283               	bcf	3,5	;RP0=0, select bank0
  5324  0753  1303               	bcf	3,6	;RP1=0, select bank0
  5325  0754  0820               	movf	UART_send_char@ch,w
  5326  0755  0099               	movwf	25	;volatile
  5327  0756  0008               	return
  5328  0757                     __end_of_UART_send_char:	
  5329  0757                     __ptext1031:	
  5330 ;; =============== function _i2cInitialize ends ============
  5331                           
  5332                           
  5333 ;; *************** function _checksumCalc *****************
  5334 ;; Defined at:
  5335 ;;		line 428 in file "Main.c"
  5336 ;; Parameters:    Size  Location     Type
  5337 ;;  buffer          1    wreg     PTR unsigned char 
  5338 ;;		 -> bufferTx(40), 
  5339 ;;  len             1    0[BANK0 ] unsigned char 
  5340 ;; Auto vars:     Size  Location     Type
  5341 ;;  buffer          1    3[BANK0 ] PTR unsigned char 
  5342 ;;		 -> bufferTx(40), 
  5343 ;;  i               1    5[BANK0 ] unsigned char 
  5344 ;;  chk             1    4[BANK0 ] unsigned char 
  5345 ;; Return value:  Size  Location     Type
  5346 ;;                  1    wreg      unsigned char 
  5347 ;; Registers used:
  5348 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5349 ;; Tracked objects:
  5350 ;;		On entry : 60/100
  5351 ;;		On exit  : 60/0
  5352 ;;		Unchanged: FFE00/0
  5353 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5354 ;;      Params:         0       1       0       0
  5355 ;;      Locals:         0       3       0       0
  5356 ;;      Temps:          0       2       0       0
  5357 ;;      Totals:         0       6       0       0
  5358 ;;Total ram usage:        6 bytes
  5359 ;; Hardware stack levels used:    1
  5360 ;; Hardware stack levels required when called:    3
  5361 ;; This function calls:
  5362 ;;		Nothing
  5363 ;; This function is called by:
  5364 ;;		_getClockCmd
  5365 ;;		_setTimerCmd
  5366 ;;		_getTimerCmd
  5367 ;;		_startLogCmd
  5368 ;;		_stopLogCmd
  5369 ;;		_readLogStatus
  5370 ;;		_comandoRx
  5371 ;; This function uses a non-reentrant model
  5372 ;;
  5373  0757                     _checksumCalc:	
  5374                           
  5375                           ; Regs used in _checksumCalc: [wreg-fsr0h+status,2+status,0]
  5376                           ;checksumCalc@buffer stored from wreg
  5377  0757  00A3               	movwf	checksumCalc@buffer
  5378                           
  5379                           ;Main.c: 429: unsigned char chk = 0;
  5380  0758  01A4               	clrf	checksumCalc@chk
  5381                           
  5382                           ;Main.c: 430: for (char i = 1; i< len-2; i++){
  5383  0759  01A5               	clrf	checksumCalc@i
  5384  075A                     l7570:	
  5385  075A  0AA5               	incf	checksumCalc@i,f
  5386  075B  0820               	movf	checksumCalc@len,w
  5387  075C  3EFE               	addlw	254
  5388  075D  00A1               	movwf	??_checksumCalc
  5389  075E  30FF               	movlw	255
  5390  075F  1803               	skipnc
  5391  0760  3000               	movlw	0
  5392  0761  00A2               	movwf	??_checksumCalc+1
  5393  0762  3A80               	xorlw	128
  5394  0763  3C80               	sublw	128
  5395  0764  1D03               	skipz
  5396  0765  2F68               	goto	u825
  5397  0766  0821               	movf	??_checksumCalc,w
  5398  0767  0225               	subwf	checksumCalc@i,w
  5399  0768                     u825:	
  5400  0768  1803               	btfsc	3,0
  5401  0769  2F74               	goto	l7574
  5402                           
  5403                           ;Main.c: 431: chk ^= buffer[i];
  5404  076A  1283               	bcf	3,5	;RP0=0, select bank0
  5405  076B  1303               	bcf	3,6	;RP1=0, select bank0
  5406  076C  0825               	movf	checksumCalc@i,w
  5407  076D  0723               	addwf	checksumCalc@buffer,w
  5408  076E  00A1               	movwf	??_checksumCalc
  5409  076F  0084               	movwf	4
  5410  0770  1383               	bcf	3,7	;select IRP bank0
  5411  0771  0800               	movf	0,w
  5412  0772  06A4               	xorwf	checksumCalc@chk,f
  5413  0773  2F5A               	goto	l7570
  5414  0774                     l7574:	
  5415                           
  5416                           ;Main.c: 432: }
  5417                           ;Main.c: 433: return chk;
  5418  0774  1283               	bcf	3,5	;RP0=0, select bank0
  5419  0775  1303               	bcf	3,6	;RP1=0, select bank0
  5420  0776  0824               	movf	checksumCalc@chk,w
  5421  0777  0008               	return
  5422  0778                     __end_of_checksumCalc:	
  5423  0778                     __ptext1022:	
  5424 ;; =============== function ___lldiv ends ============
  5425                           
  5426                           
  5427 ;; *************** function ___llmod *****************
  5428 ;; Defined at:
  5429 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\llmod.c"
  5430 ;; Parameters:    Size  Location     Type
  5431 ;;  divisor         4   13[BANK0 ] unsigned long 
  5432 ;;  dividend        4   17[BANK0 ] unsigned long 
  5433 ;; Auto vars:     Size  Location     Type
  5434 ;;  counter         1   21[BANK0 ] unsigned char 
  5435 ;; Return value:  Size  Location     Type
  5436 ;;                  4   13[BANK0 ] unsigned long 
  5437 ;; Registers used:
  5438 ;;		wreg, status,2, status,0
  5439 ;; Tracked objects:
  5440 ;;		On entry : 60/0
  5441 ;;		On exit  : 60/0
  5442 ;;		Unchanged: FFF9F/0
  5443 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5444 ;;      Params:         0       8       0       0
  5445 ;;      Locals:         0       1       0       0
  5446 ;;      Temps:          0       0       0       0
  5447 ;;      Totals:         0       9       0       0
  5448 ;;Total ram usage:        9 bytes
  5449 ;; Hardware stack levels used:    1
  5450 ;; Hardware stack levels required when called:    3
  5451 ;; This function calls:
  5452 ;;		Nothing
  5453 ;; This function is called by:
  5454 ;;		_readTemp
  5455 ;; This function uses a non-reentrant model
  5456 ;;
  5457  0778                     ___llmod:	
  5458                           
  5459                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  5460  0778  0830               	movf	___llmod@divisor+3,w
  5461  0779  042F               	iorwf	___llmod@divisor+2,w
  5462  077A  042E               	iorwf	___llmod@divisor+1,w
  5463  077B  042D               	iorwf	___llmod@divisor,w
  5464  077C  1903               	skipnz
  5465  077D  2FAD               	goto	l7772
  5466  077E  01B5               	clrf	___llmod@counter
  5467  077F                     L4:	
  5468  077F  0AB5               	incf	___llmod@counter,f
  5469  0780  1BB0               	btfsc	___llmod@divisor+3,7
  5470  0781  2F88               	goto	l7764
  5471  0782  1003               	clrc
  5472  0783  0DAD               	rlf	___llmod@divisor,f
  5473  0784  0DAE               	rlf	___llmod@divisor+1,f
  5474  0785  0DAF               	rlf	___llmod@divisor+2,f
  5475  0786  0DB0               	rlf	___llmod@divisor+3,f
  5476  0787  2F7F               	goto	L4
  5477  0788                     l7764:	
  5478  0788  0830               	movf	___llmod@divisor+3,w
  5479  0789  0234               	subwf	___llmod@dividend+3,w
  5480  078A  1D03               	skipz
  5481  078B  2F96               	goto	u1075
  5482  078C  082F               	movf	___llmod@divisor+2,w
  5483  078D  0233               	subwf	___llmod@dividend+2,w
  5484  078E  1D03               	skipz
  5485  078F  2F96               	goto	u1075
  5486  0790  082E               	movf	___llmod@divisor+1,w
  5487  0791  0232               	subwf	___llmod@dividend+1,w
  5488  0792  1D03               	skipz
  5489  0793  2F96               	goto	u1075
  5490  0794  082D               	movf	___llmod@divisor,w
  5491  0795  0231               	subwf	___llmod@dividend,w
  5492  0796                     u1075:	
  5493  0796  1C03               	skipc
  5494  0797  2FA7               	goto	L5
  5495  0798  082D               	movf	___llmod@divisor,w
  5496  0799  02B1               	subwf	___llmod@dividend,f
  5497  079A  082E               	movf	___llmod@divisor+1,w
  5498  079B  1C03               	skipc
  5499  079C  0F2E               	incfsz	___llmod@divisor+1,w
  5500  079D  02B2               	subwf	___llmod@dividend+1,f
  5501  079E  082F               	movf	___llmod@divisor+2,w
  5502  079F  1C03               	skipc
  5503  07A0  0F2F               	incfsz	___llmod@divisor+2,w
  5504  07A1  02B3               	subwf	___llmod@dividend+2,f
  5505  07A2  0830               	movf	___llmod@divisor+3,w
  5506  07A3  1C03               	skipc
  5507  07A4  0F30               	incfsz	___llmod@divisor+3,w
  5508  07A5  02B4               	subwf	___llmod@dividend+3,f
  5509  07A6  1003               	clrc
  5510  07A7                     L5:	
  5511  07A7  0CB0               	rrf	___llmod@divisor+3,f
  5512  07A8  0CAF               	rrf	___llmod@divisor+2,f
  5513  07A9  0CAE               	rrf	___llmod@divisor+1,f
  5514  07AA  0CAD               	rrf	___llmod@divisor,f
  5515  07AB  0BB5               	decfsz	___llmod@counter,f
  5516  07AC  2F88               	goto	l7764
  5517  07AD                     l7772:	
  5518  07AD  0834               	movf	___llmod@dividend+3,w
  5519  07AE  00B0               	movwf	?___llmod+3
  5520  07AF  0833               	movf	___llmod@dividend+2,w
  5521  07B0  00AF               	movwf	?___llmod+2
  5522  07B1  0832               	movf	___llmod@dividend+1,w
  5523  07B2  00AE               	movwf	?___llmod+1
  5524  07B3  0831               	movf	___llmod@dividend,w
  5525  07B4  00AD               	movwf	?___llmod
  5526  07B5  0008               	return
  5527  07B6                     __end_of___llmod:	
  5528  07B6                     __ptext1012:	
  5529 ;; =============== function _i2cStart ends ============
  5530                           
  5531                           
  5532 ;; *************** function _resposta *****************
  5533 ;; Defined at:
  5534 ;;		line 367 in file "Main.c"
  5535 ;; Parameters:    Size  Location     Type
  5536 ;;		None
  5537 ;; Auto vars:     Size  Location     Type
  5538 ;;  i               1    1[BANK0 ] unsigned char 
  5539 ;; Return value:  Size  Location     Type
  5540 ;;		None               void
  5541 ;; Registers used:
  5542 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5543 ;; Tracked objects:
  5544 ;;		On entry : 0/120
  5545 ;;		On exit  : 60/0
  5546 ;;		Unchanged: FFE00/0
  5547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5548 ;;      Params:         0       0       0       0
  5549 ;;      Locals:         0       1       0       0
  5550 ;;      Temps:          0       0       0       0
  5551 ;;      Totals:         0       1       0       0
  5552 ;;Total ram usage:        1 bytes
  5553 ;; Hardware stack levels used:    1
  5554 ;; Hardware stack levels required when called:    4
  5555 ;; This function calls:
  5556 ;;		_UART_send_char
  5557 ;; This function is called by:
  5558 ;;		_comandoRx
  5559 ;; This function uses a non-reentrant model
  5560 ;;
  5561  07B6                     _resposta:	
  5562  07B6                     l7878:	
  5563                           ; Regs used in _resposta: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5564                           
  5565                           
  5566                           ;Main.c: 368: for (char i=0 ; i<bufferTxLen ; i++){
  5567  07B6  1283               	bcf	3,5	;RP0=0, select bank0
  5568  07B7  1303               	bcf	3,6	;RP1=0, select bank0
  5569  07B8  01A1               	clrf	resposta@i
  5570  07B9                     l7884:	
  5571  07B9  0860               	movf	_bufferTxLen,w
  5572  07BA  0221               	subwf	resposta@i,w
  5573  07BB  1803               	btfsc	3,0
  5574  07BC  0008               	return
  5575                           
  5576                           ;Main.c: 369: UART_send_char(bufferTx[i]);
  5577  07BD  0821               	movf	resposta@i,w
  5578  07BE  3EA0               	addlw	_bufferTx& (0+255)
  5579  07BF  0084               	movwf	4
  5580  07C0  1383               	bcf	3,7	;select IRP bank1
  5581  07C1  0800               	movf	0,w
  5582  07C2  274D  118A         	fcall	_UART_send_char
  5583  07C4  0AA1               	incf	resposta@i,f
  5584  07C5  2FB9               	goto	l7884
  5585  07C6                     __end_of_resposta:	
  5586  07C6                     __ptext1023:	
  5587 ;; =============== function ___llmod ends ============
  5588                           
  5589                           
  5590 ;; *************** function ___lmul *****************
  5591 ;; Defined at:
  5592 ;;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\lmul.c"
  5593 ;; Parameters:    Size  Location     Type
  5594 ;;  multiplier      4    0[BANK0 ] unsigned long 
  5595 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  5596 ;; Auto vars:     Size  Location     Type
  5597 ;;  product         4    8[BANK0 ] unsigned long 
  5598 ;; Return value:  Size  Location     Type
  5599 ;;                  4    0[BANK0 ] unsigned long 
  5600 ;; Registers used:
  5601 ;;		wreg, status,2, status,0
  5602 ;; Tracked objects:
  5603 ;;		On entry : 60/0
  5604 ;;		On exit  : 60/0
  5605 ;;		Unchanged: FFF9F/0
  5606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5607 ;;      Params:         0       8       0       0
  5608 ;;      Locals:         0       4       0       0
  5609 ;;      Temps:          0       0       0       0
  5610 ;;      Totals:         0      12       0       0
  5611 ;;Total ram usage:       12 bytes
  5612 ;; Hardware stack levels used:    1
  5613 ;; Hardware stack levels required when called:    3
  5614 ;; This function calls:
  5615 ;;		Nothing
  5616 ;; This function is called by:
  5617 ;;		_readTemp
  5618 ;; This function uses a non-reentrant model
  5619 ;;
  5620  07C6                     ___lmul:	
  5621                           
  5622                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  5623  07C6  01A8               	clrf	___lmul@product
  5624  07C7  01A9               	clrf	___lmul@product+1
  5625  07C8  01AA               	clrf	___lmul@product+2
  5626  07C9  01AB               	clrf	___lmul@product+3
  5627  07CA                     l5899:	
  5628  07CA  1C20               	btfss	___lmul@multiplier,0
  5629  07CB  2FE0               	goto	l7748
  5630  07CC  0824               	movf	___lmul@multiplicand,w
  5631  07CD  07A8               	addwf	___lmul@product,f
  5632  07CE  0825               	movf	___lmul@multiplicand+1,w
  5633  07CF  1103               	clrz
  5634  07D0  1803               	skipnc
  5635  07D1  3E01               	addlw	1
  5636  07D2  1D03               	btfss	3,2
  5637  07D3  07A9               	addwf	___lmul@product+1,f
  5638  07D4  0826               	movf	___lmul@multiplicand+2,w
  5639  07D5  1103               	clrz
  5640  07D6  1803               	skipnc
  5641  07D7  3E01               	addlw	1
  5642  07D8  1D03               	btfss	3,2
  5643  07D9  07AA               	addwf	___lmul@product+2,f
  5644  07DA  0827               	movf	___lmul@multiplicand+3,w
  5645  07DB  1103               	clrz
  5646  07DC  1803               	skipnc
  5647  07DD  3E01               	addlw	1
  5648  07DE  1D03               	btfss	3,2
  5649  07DF  07AB               	addwf	___lmul@product+3,f
  5650  07E0                     l7748:	
  5651  07E0  1003               	clrc
  5652  07E1  0DA4               	rlf	___lmul@multiplicand,f
  5653  07E2  0DA5               	rlf	___lmul@multiplicand+1,f
  5654  07E3  0DA6               	rlf	___lmul@multiplicand+2,f
  5655  07E4  0DA7               	rlf	___lmul@multiplicand+3,f
  5656  07E5  1003               	clrc
  5657  07E6  0CA3               	rrf	___lmul@multiplier+3,f
  5658  07E7  0CA2               	rrf	___lmul@multiplier+2,f
  5659  07E8  0CA1               	rrf	___lmul@multiplier+1,f
  5660  07E9  0CA0               	rrf	___lmul@multiplier,f
  5661  07EA  0823               	movf	___lmul@multiplier+3,w
  5662  07EB  0422               	iorwf	___lmul@multiplier+2,w
  5663  07EC  0421               	iorwf	___lmul@multiplier+1,w
  5664  07ED  0420               	iorwf	___lmul@multiplier,w
  5665  07EE  1D03               	skipz
  5666  07EF  2FCA               	goto	l5899
  5667  07F0  082B               	movf	___lmul@product+3,w
  5668  07F1  00A3               	movwf	?___lmul+3
  5669  07F2  082A               	movf	___lmul@product+2,w
  5670  07F3  00A2               	movwf	?___lmul+2
  5671  07F4  0829               	movf	___lmul@product+1,w
  5672  07F5  00A1               	movwf	?___lmul+1
  5673  07F6  0828               	movf	___lmul@product,w
  5674  07F7  00A0               	movwf	?___lmul
  5675  07F8  0008               	return
  5676  07F9                     __end_of___lmul:	
  5677  07F9                     __ptext1003:	
  5678 ;; =============== function _initAht10 ends ============
  5679                           
  5680                           
  5681 ;; *************** function _i2cRestart *****************
  5682 ;; Defined at:
  5683 ;;		line 111 in file "I2c.c"
  5684 ;; Parameters:    Size  Location     Type
  5685 ;;		None
  5686 ;; Auto vars:     Size  Location     Type
  5687 ;;		None
  5688 ;; Return value:  Size  Location     Type
  5689 ;;		None               void
  5690 ;; Registers used:
  5691 ;;		wreg, status,2, status,0, pclath, cstack
  5692 ;; Tracked objects:
  5693 ;;		On entry : 60/100
  5694 ;;		On exit  : 60/100
  5695 ;;		Unchanged: FFF9F/0
  5696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5697 ;;      Params:         0       0       0       0
  5698 ;;      Locals:         0       0       0       0
  5699 ;;      Temps:          0       0       0       0
  5700 ;;      Totals:         0       0       0       0
  5701 ;;Total ram usage:        0 bytes
  5702 ;; Hardware stack levels used:    1
  5703 ;; Hardware stack levels required when called:    6
  5704 ;; This function calls:
  5705 ;;		_i2cStart
  5706 ;; This function is called by:
  5707 ;;		_eepromReadByte
  5708 ;;		_eepromReadLog
  5709 ;;		_eepromReadLogPage
  5710 ;; This function uses a non-reentrant model
  5711 ;;
  5712  07F9                     _i2cRestart:	
  5713                           
  5714                           ;I2c.c: 112: i2cStart();
  5715                           
  5716 ;; hardware stack exceeded
  5717                           ; Regs used in _i2cRestart: [wreg+status,2+status,0+pclath+cstack]
  5718  07F9  2F3A               	ljmp	l7886
  5719  07FA                     __end_of_i2cRestart:	
  5720  07FA                     __ptext1029:	
  5721 ;; =============== function _initGPIO ends ============
  5722                           
  5723                           
  5724 ;; *************** function _halfclockdelay *****************
  5725 ;; Defined at:
  5726 ;;		line 101 in file "I2c.c"
  5727 ;; Parameters:    Size  Location     Type
  5728 ;;		None
  5729 ;; Auto vars:     Size  Location     Type
  5730 ;;  downcount       1    1[BANK0 ] unsigned char 
  5731 ;;  delayvalue      1    0        unsigned char 
  5732 ;; Return value:  Size  Location     Type
  5733 ;;		None               void
  5734 ;; Registers used:
  5735 ;;		wreg, status,2, status,0
  5736 ;; Tracked objects:
  5737 ;;		On entry : 40/120
  5738 ;;		On exit  : 60/100
  5739 ;;		Unchanged: FFF9F/0
  5740 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5741 ;;      Params:         0       0       0       0
  5742 ;;      Locals:         0       2       0       0
  5743 ;;      Temps:          0       0       0       0
  5744 ;;      Totals:         0       2       0       0
  5745 ;;Total ram usage:        2 bytes
  5746 ;; Hardware stack levels used:    1
  5747 ;; Hardware stack levels required when called:    3
  5748 ;; This function calls:
  5749 ;;		Nothing
  5750 ;; This function is called by:
  5751 ;;		_scl_out
  5752 ;;		_sda_out
  5753 ;; This function uses a non-reentrant model
  5754 ;;
  5755  07FA                     _halfclockdelay:	
  5756  07FA                     l7580:	
  5757                           ; Regs used in _halfclockdelay: [wreg+status,2+status,0]
  5758                           
  5759                           
  5760                           ;I2c.c: 104: unsigned char downcount;
  5761                           ;I2c.c: 105: for (downcount = delayvalue; downcount >0; downcount--);
  5762  07FA  3010               	movlw	16
  5763  07FB  1283               	bcf	3,5	;RP0=0, select bank0
  5764  07FC  00A1               	movwf	halfclockdelay@downcount
  5765  07FD                     l7586:	
  5766  07FD  0BA1               	decfsz	halfclockdelay@downcount,f
  5767  07FE  2FFD               	goto	l7586
  5768  07FF  0008               	return
  5769  0800                     __end_of_halfclockdelay:	
  5770                           
  5771                           	psect	text1005
  5772  0E19                     __ptext1005:	
  5773 ;; =============== function _eepromWriteByte ends ============
  5774                           
  5775                           
  5776 ;; *************** function _jdyConfig *****************
  5777 ;; Defined at:
  5778 ;;		line 149 in file "Main.c"
  5779 ;; Parameters:    Size  Location     Type
  5780 ;;		None
  5781 ;; Auto vars:     Size  Location     Type
  5782 ;;		None
  5783 ;; Return value:  Size  Location     Type
  5784 ;;		None               void
  5785 ;; Registers used:
  5786 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5787 ;; Tracked objects:
  5788 ;;		On entry : 0/0
  5789 ;;		On exit  : 60/0
  5790 ;;		Unchanged: 0/0
  5791 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5792 ;;      Params:         0       0       0       0
  5793 ;;      Locals:         0       0       0       0
  5794 ;;      Temps:          0       3       0       0
  5795 ;;      Totals:         0       3       0       0
  5796 ;;Total ram usage:        3 bytes
  5797 ;; Hardware stack levels used:    1
  5798 ;; Hardware stack levels required when called:    5
  5799 ;; This function calls:
  5800 ;;		_UART_send_String
  5801 ;; This function is called by:
  5802 ;;		_main
  5803 ;; This function uses a non-reentrant model
  5804 ;;
  5805  0E19                     _jdyConfig:	
  5806                           
  5807                           ;Main.c: 150: RC4 = 0;
  5808                           
  5809                           ; Regs used in _jdyConfig: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5810  0E19  1283               	bcf	3,5	;RP0=0, select bank0
  5811  0E1A  3082               	movlw	130
  5812  0E1B  1303               	bcf	3,6	;RP1=0, select bank0
  5813  0E1C  1207               	bcf	7,4
  5814                           
  5815                           ;Main.c: 151: _delay((unsigned long)((100)*(4000000/4000.0)));
  5816  0E1D  00A6               	movwf	??_jdyConfig+1
  5817  0E1E  30DD               	movlw	221
  5818  0E1F  00A5               	movwf	??_jdyConfig
  5819  0E20                     u1827:	
  5820  0E20  0BA5               	decfsz	??_jdyConfig,f
  5821  0E21  2E20               	goto	u1827
  5822  0E22  0BA6               	decfsz	??_jdyConfig+1,f
  5823  0E23  2E20               	goto	u1827
  5824  0E24  2E25               	nop2
  5825                           
  5826                           ;Main.c: 152: UART_send_String("AT+ADVIN1\r\n",11);
  5827  0E25  300F               	movlw	low (STR_2-__stringbase)
  5828  0E26  267A  158A         	fcall	PL2	;call to abstracted procedure
  5829  0E28  300B               	movlw	11
  5830  0E29  00A3               	movwf	?_UART_send_String+2
  5831  0E2A  2666  158A         	fcall	_UART_send_String
  5832                           
  5833                           ;Main.c: 153: _delay((unsigned long)((350)*(4000000/4000.0)));
  5834  0E2C  3002               	movlw	2
  5835  0E2D  00A7               	movwf	??_jdyConfig+2
  5836  0E2E  30C7               	movlw	199
  5837  0E2F  00A6               	movwf	??_jdyConfig+1
  5838  0E30  3088               	movlw	136
  5839  0E31  00A5               	movwf	??_jdyConfig
  5840  0E32                     u1837:	
  5841  0E32  0BA5               	decfsz	??_jdyConfig,f
  5842  0E33  2E32               	goto	u1837
  5843  0E34  0BA6               	decfsz	??_jdyConfig+1,f
  5844  0E35  2E32               	goto	u1837
  5845  0E36  0BA7               	decfsz	??_jdyConfig+2,f
  5846  0E37  2E32               	goto	u1837
  5847  0E38  0064               	clrwdt
  5848                           
  5849                           ;Main.c: 154: UART_send_String("AT+STARTEN1\r\n",13);
  5850  0E39  3001               	movlw	low (STR_3-__stringbase)
  5851  0E3A  267A  158A         	fcall	PL2	;call to abstracted procedure
  5852  0E3C  300D               	movlw	13
  5853  0E3D  00A3               	movwf	?_UART_send_String+2
  5854  0E3E  2666  158A         	fcall	_UART_send_String
  5855                           
  5856                           ;Main.c: 155: _delay((unsigned long)((350)*(4000000/4000.0)));
  5857  0E40  3002               	movlw	2
  5858  0E41  00A7               	movwf	??_jdyConfig+2
  5859  0E42  30C7               	movlw	199
  5860  0E43  00A6               	movwf	??_jdyConfig+1
  5861  0E44  3088               	movlw	136
  5862  0E45  00A5               	movwf	??_jdyConfig
  5863  0E46                     u1847:	
  5864  0E46  0BA5               	decfsz	??_jdyConfig,f
  5865  0E47  2E46               	goto	u1847
  5866  0E48  0BA6               	decfsz	??_jdyConfig+1,f
  5867  0E49  2E46               	goto	u1847
  5868  0E4A  0BA7               	decfsz	??_jdyConfig+2,f
  5869  0E4B  2E46               	goto	u1847
  5870  0E4C  0064               	clrwdt
  5871                           
  5872                           ;Main.c: 156: UART_send_String("AT+RST\r\n",8);
  5873  0E4D  3027               	movlw	low (STR_4-__stringbase)
  5874  0E4E  267A  158A         	fcall	PL2	;call to abstracted procedure
  5875  0E50  3008               	movlw	8
  5876  0E51  00A3               	movwf	?_UART_send_String+2
  5877  0E52  2666  158A         	fcall	_UART_send_String
  5878                           
  5879                           ;Main.c: 157: _delay((unsigned long)((350)*(4000000/4000.0)));
  5880  0E54  3002               	movlw	2
  5881  0E55  00A7               	movwf	??_jdyConfig+2
  5882  0E56  30C7               	movlw	199
  5883  0E57  00A6               	movwf	??_jdyConfig+1
  5884  0E58  3088               	movlw	136
  5885  0E59  00A5               	movwf	??_jdyConfig
  5886  0E5A                     u1857:	
  5887  0E5A  0BA5               	decfsz	??_jdyConfig,f
  5888  0E5B  2E5A               	goto	u1857
  5889  0E5C  0BA6               	decfsz	??_jdyConfig+1,f
  5890  0E5D  2E5A               	goto	u1857
  5891  0E5E  0BA7               	decfsz	??_jdyConfig+2,f
  5892  0E5F  2E5A               	goto	u1857
  5893  0E60  0064               	clrwdt
  5894                           
  5895                           ;Main.c: 158: flagTryConnect = 1;
  5896  0E61  167A               	bsf	_flagTryConnect/(0+8),_flagTryConnect& (0+7)
  5897                           
  5898                           ;Main.c: 159: RC4 = 1;
  5899  0E62  1283               	bcf	3,5	;RP0=0, select bank0
  5900  0E63  1303               	bcf	3,6	;RP1=0, select bank0
  5901  0E64  1607               	bsf	7,4
  5902  0E65  0008               	return
  5903  0E66                     __end_of_jdyConfig:	
  5904  0E66                     __ptext1020:	
  5905 ;; =============== function _getClockCmd ends ============
  5906                           
  5907                           
  5908 ;; *************** function _UART_send_String *****************
  5909 ;; Defined at:
  5910 ;;		line 49 in file "uart.c"
  5911 ;; Parameters:    Size  Location     Type
  5912 ;;  ch              2    1[BANK0 ] PTR unsigned char 
  5913 ;;		 -> STR_4(9), STR_3(14), STR_2(12), STR_1(12), 
  5914 ;;		 -> deviceName(19), 
  5915 ;;  lenth           1    3[BANK0 ] unsigned char 
  5916 ;; Auto vars:     Size  Location     Type
  5917 ;;  i               1    4[BANK0 ] unsigned char 
  5918 ;; Return value:  Size  Location     Type
  5919 ;;		None               void
  5920 ;; Registers used:
  5921 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  5922 ;; Tracked objects:
  5923 ;;		On entry : 60/0
  5924 ;;		On exit  : 60/0
  5925 ;;		Unchanged: FFE00/0
  5926 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5927 ;;      Params:         0       3       0       0
  5928 ;;      Locals:         0       1       0       0
  5929 ;;      Temps:          0       0       0       0
  5930 ;;      Totals:         0       4       0       0
  5931 ;;Total ram usage:        4 bytes
  5932 ;; Hardware stack levels used:    1
  5933 ;; Hardware stack levels required when called:    4
  5934 ;; This function calls:
  5935 ;;		_UART_send_char
  5936 ;; This function is called by:
  5937 ;;		_main
  5938 ;;		_jdyConfig
  5939 ;; This function uses a non-reentrant model
  5940 ;;
  5941  0E66                     _UART_send_String:	
  5942                           
  5943                           ;uart.c: 56: for(char i=0; i<lenth ; i++){
  5944                           
  5945                           ; Regs used in _UART_send_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5946  0E66  01A4               	clrf	UART_send_String@i
  5947  0E67                     l7818:	
  5948  0E67  0823               	movf	UART_send_String@lenth,w
  5949  0E68  0224               	subwf	UART_send_String@i,w
  5950  0E69  1803               	btfsc	3,0
  5951  0E6A  0008               	return
  5952                           
  5953                           ;uart.c: 57: UART_send_char(*ch++);
  5954  0E6B  0822               	movf	UART_send_String@ch+1,w
  5955  0E6C  00FF               	movwf	127
  5956  0E6D  0821               	movf	UART_send_String@ch,w
  5957  0E6E  0084               	movwf	4
  5958  0E6F  158A  2000  158A   	fcall	stringtab
  5959  0E72  118A  274D  158A   	fcall	_UART_send_char
  5960  0E75  0AA1               	incf	UART_send_String@ch,f
  5961  0E76  1903               	skipnz
  5962  0E77  0AA2               	incf	UART_send_String@ch+1,f
  5963  0E78  0AA4               	incf	UART_send_String@i,f
  5964  0E79  2E67               	goto	l7818
  5965  0E7A                     __end_of_UART_send_String:	
  5966  0E7A                     PL2:	
  5967  0E7A  1283               	bcf	3,5	;RP0=0, select bank0
  5968  0E7B  1303               	bcf	3,6	;RP1=0, select bank0
  5969  0E7C  00A1               	movwf	?_UART_send_String
  5970  0E7D  3080               	movlw	128
  5971  0E7E  00A2               	movwf	?_UART_send_String+1
  5972  0E7F  0008               	return
  5973                           
  5974                           	psect	text1015
  5975  0DDB                     __ptext1015:	
  5976 ;; =============== function _scl_out ends ============
  5977                           
  5978                           
  5979 ;; *************** function _readLogStatus *****************
  5980 ;; Defined at:
  5981 ;;		line 130 in file "protocolo.c"
  5982 ;; Parameters:    Size  Location     Type
  5983 ;;		None
  5984 ;; Auto vars:     Size  Location     Type
  5985 ;;		None
  5986 ;; Return value:  Size  Location     Type
  5987 ;;		None               void
  5988 ;; Registers used:
  5989 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5990 ;; Tracked objects:
  5991 ;;		On entry : 0/120
  5992 ;;		On exit  : 60/20
  5993 ;;		Unchanged: FFE00/0
  5994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5995 ;;      Params:         0       0       0       0
  5996 ;;      Locals:         0       0       0       0
  5997 ;;      Temps:          0       0       0       0
  5998 ;;      Totals:         0       0       0       0
  5999 ;;Total ram usage:        0 bytes
  6000 ;; Hardware stack levels used:    1
  6001 ;; Hardware stack levels required when called:    4
  6002 ;; This function calls:
  6003 ;;		_checksumCalc
  6004 ;; This function is called by:
  6005 ;;		_comandoRx
  6006 ;; This function uses a non-reentrant model
  6007 ;;
  6008  0DDB                     _readLogStatus:	
  6009                           
  6010                           ;protocolo.c: 132: bufferTxLen = 17;
  6011                           
  6012                           ; Regs used in _readLogStatus: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6013  0DDB  3011               	movlw	17
  6014  0DDC  1283               	bcf	3,5	;RP0=0, select bank0
  6015  0DDD  1303               	bcf	3,6	;RP1=0, select bank0
  6016  0DDE  00E0               	movwf	_bufferTxLen
  6017                           
  6018                           ;protocolo.c: 133: bufferTx[0] = 0x55;
  6019  0DDF  3055               	movlw	85
  6020  0DE0  1683               	bsf	3,5	;RP0=1, select bank1
  6021  0DE1  00A0               	movwf	_bufferTx^(0+128)
  6022                           
  6023                           ;protocolo.c: 134: bufferTx[1] = 0x36;
  6024  0DE2  3036               	movlw	54
  6025  0DE3  00A1               	movwf	(_bufferTx^(0+128)+1)
  6026                           
  6027                           ;protocolo.c: 135: bufferTx[2] = 0x09;
  6028  0DE4  3009               	movlw	9
  6029  0DE5  00A2               	movwf	(_bufferTx^(0+128)+2)
  6030                           
  6031                           ;protocolo.c: 136: bufferTx[3] = startTime>>24;
  6032  0DE6  1283               	bcf	3,5	;RP0=0, select bank0
  6033  0DE7  0853               	movf	_startTime+3,w
  6034  0DE8  1683               	bsf	3,5	;RP0=1, select bank1
  6035  0DE9  00A3               	movwf	(_bufferTx^(0+128)+3)
  6036                           
  6037                           ;protocolo.c: 137: bufferTx[4] = startTime>>16;
  6038  0DEA  1283               	bcf	3,5	;RP0=0, select bank0
  6039  0DEB  0852               	movf	_startTime+2,w
  6040  0DEC  1683               	bsf	3,5	;RP0=1, select bank1
  6041  0DED  00A4               	movwf	(_bufferTx^(0+128)+4)
  6042                           
  6043                           ;protocolo.c: 138: bufferTx[5] = startTime>>8;
  6044  0DEE  1283               	bcf	3,5	;RP0=0, select bank0
  6045  0DEF  0851               	movf	_startTime+1,w
  6046  0DF0  1683               	bsf	3,5	;RP0=1, select bank1
  6047  0DF1  00A5               	movwf	(_bufferTx^(0+128)+5)
  6048                           
  6049                           ;protocolo.c: 139: bufferTx[6] = startTime;
  6050  0DF2  1283               	bcf	3,5	;RP0=0, select bank0
  6051  0DF3  0850               	movf	_startTime,w
  6052  0DF4  1683               	bsf	3,5	;RP0=1, select bank1
  6053  0DF5  00A6               	movwf	(_bufferTx^(0+128)+6)
  6054                           
  6055                           ;protocolo.c: 140: bufferTx[7] = timer>>8;
  6056  0DF6  1283               	bcf	3,5	;RP0=0, select bank0
  6057  0DF7  085B               	movf	_timer+1,w
  6058  0DF8  1683               	bsf	3,5	;RP0=1, select bank1
  6059  0DF9  00A7               	movwf	(_bufferTx^(0+128)+7)
  6060                           
  6061                           ;protocolo.c: 141: bufferTx[8] = timer;
  6062  0DFA  1283               	bcf	3,5	;RP0=0, select bank0
  6063  0DFB  085A               	movf	_timer,w
  6064  0DFC  1683               	bsf	3,5	;RP0=1, select bank1
  6065  0DFD  00A8               	movwf	(_bufferTx^(0+128)+8)
  6066                           
  6067                           ;protocolo.c: 142: bufferTx[9] = numOfLogs>>8;
  6068  0DFE  1283               	bcf	3,5	;RP0=0, select bank0
  6069  0DFF  085F               	movf	_numOfLogs+1,w
  6070  0E00  1683               	bsf	3,5	;RP0=1, select bank1
  6071  0E01  00A9               	movwf	(_bufferTx^(0+128)+9)
  6072                           
  6073                           ;protocolo.c: 143: bufferTx[10] = numOfLogs;
  6074  0E02  1283               	bcf	3,5	;RP0=0, select bank0
  6075  0E03  085E               	movf	_numOfLogs,w
  6076  0E04  1683               	bsf	3,5	;RP0=1, select bank1
  6077  0E05  00AA               	movwf	(_bufferTx^(0+128)+10)
  6078                           
  6079                           ;protocolo.c: 144: bufferTx[11] = logStatus;
  6080  0E06  3000               	movlw	0
  6081  0E07  1AFA               	btfsc	_logStatus/(0+8),_logStatus& (0+7)
  6082  0E08  3001               	movlw	1
  6083  0E09  00AB               	movwf	(_bufferTx^(0+128)+11)
  6084  0E0A  3011               	movlw	17
  6085                           
  6086                           ;protocolo.c: 145: bufferTx[12] = 1;
  6087  0E0B  01AC               	clrf	(_bufferTx^(0+128)+12)
  6088  0E0C  0AAC               	incf	(_bufferTx^(0+128)+12),f
  6089                           
  6090                           ;protocolo.c: 146: bufferTx[13] = 0;
  6091  0E0D  01AD               	clrf	(_bufferTx^(0+128)+13)
  6092                           
  6093                           ;protocolo.c: 147: bufferTx[14] = 0;
  6094  0E0E  01AE               	clrf	(_bufferTx^(0+128)+14)
  6095                           
  6096                           ;protocolo.c: 148: bufferTx[15] = checksumCalc(bufferTx,17);
  6097  0E0F  1283               	bcf	3,5	;RP0=0, select bank0
  6098  0E10  00A0               	movwf	?_checksumCalc
  6099  0E11  30A0               	movlw	_bufferTx& (0+255)
  6100  0E12  118A  2757         	fcall	_checksumCalc
  6101  0E14  1683               	bsf	3,5	;RP0=1, select bank1
  6102  0E15  00AF               	movwf	(_bufferTx^(0+128)+15)
  6103                           
  6104                           ;protocolo.c: 149: bufferTx[16] = 0x0A;
  6105  0E16  300A               	movlw	10
  6106  0E17  00B0               	movwf	(_bufferTx^(0+128)+16)
  6107  0E18  0008               	return
  6108  0E19                     __end_of_readLogStatus:	
  6109                           
  6110                           	psect	text1016
  6111  0CA8                     __ptext1016:	
  6112 ;; =============== function _readLogStatus ends ============
  6113                           
  6114                           
  6115 ;; *************** function _stopLogCmd *****************
  6116 ;; Defined at:
  6117 ;;		line 115 in file "protocolo.c"
  6118 ;; Parameters:    Size  Location     Type
  6119 ;;		None
  6120 ;; Auto vars:     Size  Location     Type
  6121 ;;		None
  6122 ;; Return value:  Size  Location     Type
  6123 ;;		None               void
  6124 ;; Registers used:
  6125 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6126 ;; Tracked objects:
  6127 ;;		On entry : 0/120
  6128 ;;		On exit  : 60/20
  6129 ;;		Unchanged: FFE00/0
  6130 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6131 ;;      Params:         0       0       0       0
  6132 ;;      Locals:         0       0       0       0
  6133 ;;      Temps:          0       0       0       0
  6134 ;;      Totals:         0       0       0       0
  6135 ;;Total ram usage:        0 bytes
  6136 ;; Hardware stack levels used:    1
  6137 ;; Hardware stack levels required when called:    4
  6138 ;; This function calls:
  6139 ;;		_checksumCalc
  6140 ;; This function is called by:
  6141 ;;		_comandoRx
  6142 ;; This function uses a non-reentrant model
  6143 ;;
  6144  0CA8                     _stopLogCmd:	
  6145  0CA8  3005               	movlw	5
  6146                           
  6147                           ;protocolo.c: 117: logStatus = 0;
  6148                           
  6149                           ; Regs used in _stopLogCmd: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6150  0CA9  12FA               	bcf	_logStatus/(0+8),_logStatus& (0+7)
  6151                           
  6152                           ;protocolo.c: 120: bufferTxLen = 5;
  6153  0CAA  1283               	bcf	3,5	;RP0=0, select bank0
  6154  0CAB  00E0               	movwf	_bufferTxLen
  6155                           
  6156                           ;protocolo.c: 121: bufferTx[0] = 0x55;
  6157  0CAC  3055               	movlw	85
  6158  0CAD  1683               	bsf	3,5	;RP0=1, select bank1
  6159  0CAE  00A0               	movwf	_bufferTx^(0+128)
  6160                           
  6161                           ;protocolo.c: 122: bufferTx[1] = 0x35;
  6162  0CAF  3035               	movlw	53
  6163  0CB0  00A1               	movwf	(_bufferTx^(0+128)+1)
  6164  0CB1  3005               	movlw	5
  6165                           
  6166                           ;protocolo.c: 123: bufferTx[2] = 0x00;
  6167  0CB2  01A2               	clrf	(_bufferTx^(0+128)+2)
  6168                           
  6169                           ;protocolo.c: 124: bufferTx[3] = checksumCalc(bufferTx,5);
  6170  0CB3  1283               	bcf	3,5	;RP0=0, select bank0
  6171  0CB4  00A0               	movwf	?_checksumCalc
  6172  0CB5  30A0               	movlw	_bufferTx& (0+255)
  6173  0CB6  118A  2757         	fcall	_checksumCalc
  6174  0CB8  1683               	bsf	3,5	;RP0=1, select bank1
  6175  0CB9  00A3               	movwf	(_bufferTx^(0+128)+3)
  6176                           
  6177                           ;protocolo.c: 125: bufferTx[4] = 0x0A;
  6178  0CBA  300A               	movlw	10
  6179  0CBB  00A4               	movwf	(_bufferTx^(0+128)+4)
  6180  0CBC  0008               	return
  6181  0CBD                     __end_of_stopLogCmd:	
  6182                           
  6183                           	psect	text1017
  6184  0D0D                     __ptext1017:	
  6185 ;; =============== function _stopLogCmd ends ============
  6186                           
  6187                           
  6188 ;; *************** function _getTimerCmd *****************
  6189 ;; Defined at:
  6190 ;;		line 46 in file "protocolo.c"
  6191 ;; Parameters:    Size  Location     Type
  6192 ;;		None
  6193 ;; Auto vars:     Size  Location     Type
  6194 ;;		None
  6195 ;; Return value:  Size  Location     Type
  6196 ;;		None               void
  6197 ;; Registers used:
  6198 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6199 ;; Tracked objects:
  6200 ;;		On entry : 0/120
  6201 ;;		On exit  : 60/20
  6202 ;;		Unchanged: FFE00/0
  6203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6204 ;;      Params:         0       0       0       0
  6205 ;;      Locals:         0       0       0       0
  6206 ;;      Temps:          0       0       0       0
  6207 ;;      Totals:         0       0       0       0
  6208 ;;Total ram usage:        0 bytes
  6209 ;; Hardware stack levels used:    1
  6210 ;; Hardware stack levels required when called:    4
  6211 ;; This function calls:
  6212 ;;		_checksumCalc
  6213 ;; This function is called by:
  6214 ;;		_comandoRx
  6215 ;; This function uses a non-reentrant model
  6216 ;;
  6217  0D0D                     _getTimerCmd:	
  6218                           
  6219                           ;protocolo.c: 47: bufferTxLen = 7;
  6220                           
  6221                           ; Regs used in _getTimerCmd: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6222  0D0D  3007               	movlw	7
  6223  0D0E  1283               	bcf	3,5	;RP0=0, select bank0
  6224  0D0F  1303               	bcf	3,6	;RP1=0, select bank0
  6225  0D10  00E0               	movwf	_bufferTxLen
  6226                           
  6227                           ;protocolo.c: 48: bufferTx[0] = 0x55;
  6228  0D11  3055               	movlw	85
  6229  0D12  1683               	bsf	3,5	;RP0=1, select bank1
  6230  0D13  00A0               	movwf	_bufferTx^(0+128)
  6231                           
  6232                           ;protocolo.c: 49: bufferTx[1] = 0x33;
  6233  0D14  3033               	movlw	51
  6234  0D15  00A1               	movwf	(_bufferTx^(0+128)+1)
  6235                           
  6236                           ;protocolo.c: 50: bufferTx[2] = 0x02;
  6237  0D16  3002               	movlw	2
  6238  0D17  00A2               	movwf	(_bufferTx^(0+128)+2)
  6239                           
  6240                           ;protocolo.c: 51: bufferTx[3] = timer>>8;
  6241  0D18  1283               	bcf	3,5	;RP0=0, select bank0
  6242  0D19  085B               	movf	_timer+1,w
  6243  0D1A  1683               	bsf	3,5	;RP0=1, select bank1
  6244  0D1B  00A3               	movwf	(_bufferTx^(0+128)+3)
  6245                           
  6246                           ;protocolo.c: 52: bufferTx[4] = timer;
  6247  0D1C  1283               	bcf	3,5	;RP0=0, select bank0
  6248  0D1D  085A               	movf	_timer,w
  6249  0D1E  1683               	bsf	3,5	;RP0=1, select bank1
  6250  0D1F  00A4               	movwf	(_bufferTx^(0+128)+4)
  6251                           
  6252                           ;protocolo.c: 53: bufferTx[5] = checksumCalc(bufferTx,7);
  6253  0D20  3007               	movlw	7
  6254  0D21  1283               	bcf	3,5	;RP0=0, select bank0
  6255  0D22  00A0               	movwf	?_checksumCalc
  6256  0D23  30A0               	movlw	_bufferTx& (0+255)
  6257  0D24  118A  2757         	fcall	_checksumCalc
  6258  0D26  1683               	bsf	3,5	;RP0=1, select bank1
  6259  0D27  00A5               	movwf	(_bufferTx^(0+128)+5)
  6260                           
  6261                           ;protocolo.c: 54: bufferTx[6] = 0x0A;
  6262  0D28  300A               	movlw	10
  6263  0D29  00A6               	movwf	(_bufferTx^(0+128)+6)
  6264  0D2A  0008               	return
  6265  0D2B                     __end_of_getTimerCmd:	
  6266                           
  6267                           	psect	text1018
  6268  0D2B                     __ptext1018:	
  6269 ;; =============== function _getTimerCmd ends ============
  6270                           
  6271                           
  6272 ;; *************** function _setTimerCmd *****************
  6273 ;; Defined at:
  6274 ;;		line 29 in file "protocolo.c"
  6275 ;; Parameters:    Size  Location     Type
  6276 ;;		None
  6277 ;; Auto vars:     Size  Location     Type
  6278 ;;		None
  6279 ;; Return value:  Size  Location     Type
  6280 ;;		None               void
  6281 ;; Registers used:
  6282 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6283 ;; Tracked objects:
  6284 ;;		On entry : 0/120
  6285 ;;		On exit  : 60/20
  6286 ;;		Unchanged: FFE00/0
  6287 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6288 ;;      Params:         0       0       0       0
  6289 ;;      Locals:         0       0       0       0
  6290 ;;      Temps:          0       0       0       0
  6291 ;;      Totals:         0       0       0       0
  6292 ;;Total ram usage:        0 bytes
  6293 ;; Hardware stack levels used:    1
  6294 ;; Hardware stack levels required when called:    4
  6295 ;; This function calls:
  6296 ;;		_checksumCalc
  6297 ;; This function is called by:
  6298 ;;		_comandoRx
  6299 ;; This function uses a non-reentrant model
  6300 ;;
  6301  0D2B                     _setTimerCmd:	
  6302                           
  6303                           ;protocolo.c: 31: newTimer = cmd[3];
  6304                           
  6305                           ; Regs used in _setTimerCmd: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6306  0D2B  1683               	bsf	3,5	;RP0=1, select bank1
  6307  0D2C  1303               	bcf	3,6	;RP1=0, select bank1
  6308  0D2D  084B               	movf	(_cmd^(0+128)+3),w
  6309  0D2E  1283               	bcf	3,5	;RP0=0, select bank0
  6310  0D2F  00D8               	movwf	_newTimer
  6311  0D30  01D9               	clrf	_newTimer+1
  6312                           
  6313                           ;protocolo.c: 32: newTimer<<=8;
  6314  0D31  00D9               	movwf	_newTimer+1
  6315  0D32  01D8               	clrf	_newTimer
  6316                           
  6317                           ;protocolo.c: 33: newTimer += cmd[4];
  6318  0D33  1683               	bsf	3,5	;RP0=1, select bank1
  6319  0D34  084C               	movf	(_cmd^(0+128)+4),w
  6320  0D35  1283               	bcf	3,5	;RP0=0, select bank0
  6321  0D36  07D8               	addwf	_newTimer,f
  6322  0D37  1803               	skipnc
  6323  0D38  0AD9               	incf	_newTimer+1,f
  6324                           
  6325                           ;protocolo.c: 36: bufferTxLen = 5;
  6326  0D39  3005               	movlw	5
  6327  0D3A  00E0               	movwf	_bufferTxLen
  6328                           
  6329                           ;protocolo.c: 37: bufferTx[0] = 0x55;
  6330  0D3B  3055               	movlw	85
  6331  0D3C  1683               	bsf	3,5	;RP0=1, select bank1
  6332  0D3D  00A0               	movwf	_bufferTx^(0+128)
  6333                           
  6334                           ;protocolo.c: 38: bufferTx[1] = 0x32;
  6335  0D3E  3032               	movlw	50
  6336  0D3F  00A1               	movwf	(_bufferTx^(0+128)+1)
  6337  0D40  3005               	movlw	5
  6338                           
  6339                           ;protocolo.c: 39: bufferTx[2] = 0x00;
  6340  0D41  01A2               	clrf	(_bufferTx^(0+128)+2)
  6341                           
  6342                           ;protocolo.c: 40: bufferTx[3] = checksumCalc(bufferTx,5);
  6343  0D42  1283               	bcf	3,5	;RP0=0, select bank0
  6344  0D43  00A0               	movwf	?_checksumCalc
  6345  0D44  30A0               	movlw	_bufferTx& (0+255)
  6346  0D45  118A  2757         	fcall	_checksumCalc
  6347  0D47  1683               	bsf	3,5	;RP0=1, select bank1
  6348  0D48  00A3               	movwf	(_bufferTx^(0+128)+3)
  6349                           
  6350                           ;protocolo.c: 41: bufferTx[4] = 0x0A;
  6351  0D49  300A               	movlw	10
  6352  0D4A  00A4               	movwf	(_bufferTx^(0+128)+4)
  6353  0D4B  0008               	return
  6354  0D4C                     __end_of_setTimerCmd:	
  6355                           
  6356                           	psect	text1019
  6357  0DA6                     __ptext1019:	
  6358 ;; =============== function _setTimerCmd ends ============
  6359                           
  6360                           
  6361 ;; *************** function _getClockCmd *****************
  6362 ;; Defined at:
  6363 ;;		line 13 in file "protocolo.c"
  6364 ;; Parameters:    Size  Location     Type
  6365 ;;		None
  6366 ;; Auto vars:     Size  Location     Type
  6367 ;;		None
  6368 ;; Return value:  Size  Location     Type
  6369 ;;		None               void
  6370 ;; Registers used:
  6371 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6372 ;; Tracked objects:
  6373 ;;		On entry : 0/120
  6374 ;;		On exit  : 60/0
  6375 ;;		Unchanged: FFE00/0
  6376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6377 ;;      Params:         0       0       0       0
  6378 ;;      Locals:         0       0       0       0
  6379 ;;      Temps:          0       2       0       0
  6380 ;;      Totals:         0       2       0       0
  6381 ;;Total ram usage:        2 bytes
  6382 ;; Hardware stack levels used:    1
  6383 ;; Hardware stack levels required when called:    4
  6384 ;; This function calls:
  6385 ;;		_checksumCalc
  6386 ;; This function is called by:
  6387 ;;		_comandoRx
  6388 ;; This function uses a non-reentrant model
  6389 ;;
  6390  0DA6                     _getClockCmd:	
  6391                           
  6392                           ;protocolo.c: 15: bufferTx[0] = 0x55;
  6393                           
  6394                           ; Regs used in _getClockCmd: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6395  0DA6  3055               	movlw	85
  6396  0DA7  1683               	bsf	3,5	;RP0=1, select bank1
  6397  0DA8  1303               	bcf	3,6	;RP1=0, select bank1
  6398  0DA9  00A0               	movwf	_bufferTx^(0+128)
  6399                           
  6400                           ;protocolo.c: 16: bufferTx[1] = 0x31;
  6401  0DAA  3031               	movlw	49
  6402  0DAB  00A1               	movwf	(_bufferTx^(0+128)+1)
  6403                           
  6404                           ;protocolo.c: 17: bufferTx[2] = 0x04;
  6405  0DAC  3004               	movlw	4
  6406  0DAD  00A2               	movwf	(_bufferTx^(0+128)+2)
  6407                           
  6408                           ;protocolo.c: 18: bufferTx[3] = timeNow>>24;
  6409  0DAE  1283               	bcf	3,5	;RP0=0, select bank0
  6410  0DAF  0857               	movf	_timeNow+3,w
  6411  0DB0  1683               	bsf	3,5	;RP0=1, select bank1
  6412  0DB1  00A3               	movwf	(_bufferTx^(0+128)+3)
  6413                           
  6414                           ;protocolo.c: 19: bufferTx[4] = timeNow>>16;
  6415  0DB2  1283               	bcf	3,5	;RP0=0, select bank0
  6416  0DB3  0856               	movf	_timeNow+2,w
  6417  0DB4  1683               	bsf	3,5	;RP0=1, select bank1
  6418  0DB5  00A4               	movwf	(_bufferTx^(0+128)+4)
  6419                           
  6420                           ;protocolo.c: 20: bufferTx[5] = timeNow>>8;
  6421  0DB6  1283               	bcf	3,5	;RP0=0, select bank0
  6422  0DB7  0855               	movf	_timeNow+1,w
  6423  0DB8  1683               	bsf	3,5	;RP0=1, select bank1
  6424  0DB9  00A5               	movwf	(_bufferTx^(0+128)+5)
  6425                           
  6426                           ;protocolo.c: 21: bufferTx[6] = timeNow + (( TMR1H-0x61) >> 4);
  6427  0DBA  1283               	bcf	3,5	;RP0=0, select bank0
  6428  0DBB  080F               	movf	15,w	;volatile
  6429  0DBC  3E9F               	addlw	159
  6430  0DBD  00A6               	movwf	??_getClockCmd
  6431  0DBE  30FF               	movlw	255
  6432  0DBF  1803               	skipnc
  6433  0DC0  3000               	movlw	0
  6434  0DC1  00A7               	movwf	??_getClockCmd+1
  6435  0DC2  3004               	movlw	4
  6436  0DC3  00FF               	movwf	127
  6437  0DC4                     u1155:	
  6438  0DC4  0D27               	rlf	??_getClockCmd+1,w
  6439  0DC5  0CA7               	rrf	??_getClockCmd+1,f
  6440  0DC6  0CA6               	rrf	??_getClockCmd,f
  6441  0DC7  0BFF               	decfsz	127,f
  6442  0DC8  2DC4               	goto	u1155
  6443  0DC9  0854               	movf	_timeNow,w
  6444  0DCA  0726               	addwf	??_getClockCmd,w
  6445  0DCB  1683               	bsf	3,5	;RP0=1, select bank1
  6446  0DCC  00A6               	movwf	(_bufferTx^(0+128)+6)
  6447                           
  6448                           ;protocolo.c: 22: bufferTx[7] = checksumCalc(bufferTx,9);
  6449  0DCD  3009               	movlw	9
  6450  0DCE  1283               	bcf	3,5	;RP0=0, select bank0
  6451  0DCF  00A0               	movwf	?_checksumCalc
  6452  0DD0  30A0               	movlw	_bufferTx& (0+255)
  6453  0DD1  118A  2757         	fcall	_checksumCalc
  6454  0DD3  1683               	bsf	3,5	;RP0=1, select bank1
  6455  0DD4  00A7               	movwf	(_bufferTx^(0+128)+7)
  6456                           
  6457                           ;protocolo.c: 23: bufferTx[8] = 0x0A;
  6458  0DD5  300A               	movlw	10
  6459  0DD6  00A8               	movwf	(_bufferTx^(0+128)+8)
  6460                           
  6461                           ;protocolo.c: 24: bufferTxLen = 9;
  6462  0DD7  3009               	movlw	9
  6463  0DD8  1283               	bcf	3,5	;RP0=0, select bank0
  6464  0DD9  00E0               	movwf	_bufferTxLen
  6465  0DDA  0008               	return
  6466  0DDB                     __end_of_getClockCmd:	
  6467                           
  6468                           	psect	text1025
  6469  0CF0                     __ptext1025:	
  6470 ;; =============== function ___wmul ends ============
  6471                           
  6472                           
  6473 ;; *************** function _memcpy *****************
  6474 ;; Defined at:
  6475 ;;		line 10 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\memcpy.c"
  6476 ;; Parameters:    Size  Location     Type
  6477 ;;  d1              1    wreg     PTR void 
  6478 ;;		 -> cmd(30), 
  6479 ;;  s1              1    0[BANK0 ] PTR const void 
  6480 ;;		 -> rxBuffer(30), 
  6481 ;;  n               2    1[BANK0 ] unsigned int 
  6482 ;; Auto vars:     Size  Location     Type
  6483 ;;  d1              1    4[BANK0 ] PTR void 
  6484 ;;		 -> cmd(30), 
  6485 ;;  s               1    6[BANK0 ] PTR const unsigned char 
  6486 ;;		 -> rxBuffer(30), 
  6487 ;;  d               1    5[BANK0 ] PTR unsigned char 
  6488 ;;		 -> cmd(30), 
  6489 ;; Return value:  Size  Location     Type
  6490 ;;                  1    wreg      PTR void 
  6491 ;; Registers used:
  6492 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6493 ;; Tracked objects:
  6494 ;;		On entry : 160/100
  6495 ;;		On exit  : 60/0
  6496 ;;		Unchanged: FFE9F/0
  6497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6498 ;;      Params:         0       3       0       0
  6499 ;;      Locals:         0       3       0       0
  6500 ;;      Temps:          0       1       0       0
  6501 ;;      Totals:         0       7       0       0
  6502 ;;Total ram usage:        7 bytes
  6503 ;; Hardware stack levels used:    1
  6504 ;; Hardware stack levels required when called:    3
  6505 ;; This function calls:
  6506 ;;		Nothing
  6507 ;; This function is called by:
  6508 ;;		_comandoRx
  6509 ;; This function uses a non-reentrant model
  6510 ;;
  6511  0CF0                     _memcpy:	
  6512                           
  6513                           ; Regs used in _memcpy: [wreg-fsr0h+status,2+status,0]
  6514                           ;memcpy@d1 stored from wreg
  6515  0CF0  00A4               	movwf	memcpy@d1
  6516  0CF1  0820               	movf	memcpy@s1,w
  6517  0CF2  00A6               	movwf	memcpy@s
  6518  0CF3  0824               	movf	memcpy@d1,w
  6519  0CF4  00A5               	movwf	memcpy@d
  6520  0CF5                     l7664:	
  6521  0CF5  3001               	movlw	1
  6522  0CF6  02A1               	subwf	memcpy@n,f
  6523  0CF7  3000               	movlw	0
  6524  0CF8  1C03               	skipc
  6525  0CF9  03A2               	decf	memcpy@n+1,f
  6526  0CFA  02A2               	subwf	memcpy@n+1,f
  6527  0CFB  0A21               	incf	memcpy@n,w
  6528  0CFC  1903               	skipnz
  6529  0CFD  0A22               	incf	memcpy@n+1,w
  6530  0CFE  1903               	btfsc	3,2
  6531  0CFF  0008               	return
  6532  0D00  0826               	movf	memcpy@s,w
  6533  0D01  0084               	movwf	4
  6534  0D02  1783               	bsf	3,7	;select IRP bank2
  6535  0D03  0800               	movf	0,w
  6536  0D04  00A3               	movwf	??_memcpy
  6537  0D05  0825               	movf	memcpy@d,w
  6538  0D06  0084               	movwf	4
  6539  0D07  0823               	movf	??_memcpy,w
  6540  0D08  1383               	bcf	3,7	;select IRP bank0
  6541  0D09  0080               	movwf	0
  6542  0D0A  0AA6               	incf	memcpy@s,f
  6543  0D0B  0AA5               	incf	memcpy@d,f
  6544  0D0C  2CF5               	goto	l7664
  6545  0D0D                     __end_of_memcpy:	
  6546                           
  6547                           	psect	text1026
  6548  0D4C                     __ptext1026:	
  6549 ;; =============== function _memcpy ends ============
  6550                           
  6551                           
  6552 ;; *************** function _checksumVerify *****************
  6553 ;; Defined at:
  6554 ;;		line 410 in file "Main.c"
  6555 ;; Parameters:    Size  Location     Type
  6556 ;;		None
  6557 ;; Auto vars:     Size  Location     Type
  6558 ;;  i               1    4[BANK0 ] unsigned char 
  6559 ;;  len             1    3[BANK0 ] unsigned char 
  6560 ;;  checksum        1    2[BANK0 ] unsigned char 
  6561 ;; Return value:  Size  Location     Type
  6562 ;;		None               void
  6563 ;; Registers used:
  6564 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6565 ;; Tracked objects:
  6566 ;;		On entry : 160/100
  6567 ;;		On exit  : 160/100
  6568 ;;		Unchanged: FFE00/0
  6569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6570 ;;      Params:         0       0       0       0
  6571 ;;      Locals:         0       3       0       0
  6572 ;;      Temps:          0       2       0       0
  6573 ;;      Totals:         0       5       0       0
  6574 ;;Total ram usage:        5 bytes
  6575 ;; Hardware stack levels used:    1
  6576 ;; Hardware stack levels required when called:    3
  6577 ;; This function calls:
  6578 ;;		Nothing
  6579 ;; This function is called by:
  6580 ;;		_comandoRx
  6581 ;; This function uses a non-reentrant model
  6582 ;;
  6583  0D4C                     _checksumVerify:	
  6584                           
  6585                           ;Main.c: 411: unsigned char len = rxBufferLength;
  6586                           
  6587                           ; Regs used in _checksumVerify: [wreg-fsr0h+status,2+status,0]
  6588  0D4C  087B               	movf	_rxBufferLength,w
  6589  0D4D  00A3               	movwf	checksumVerify@len
  6590                           
  6591                           ;Main.c: 412: unsigned char checksum = 0;
  6592  0D4E  01A2               	clrf	checksumVerify@checksum
  6593                           
  6594                           ;Main.c: 414: for (unsigned char i=1 ;i<len-2;i++){
  6595  0D4F  01A4               	clrf	checksumVerify@i
  6596  0D50                     l7640:	
  6597  0D50  0AA4               	incf	checksumVerify@i,f
  6598  0D51  0823               	movf	checksumVerify@len,w
  6599  0D52  3EFE               	addlw	254
  6600  0D53  00A0               	movwf	??_checksumVerify
  6601  0D54  30FF               	movlw	255
  6602  0D55  1803               	skipnc
  6603  0D56  3000               	movlw	0
  6604  0D57  00A1               	movwf	??_checksumVerify+1
  6605  0D58  3A80               	xorlw	128
  6606  0D59  3C80               	sublw	128
  6607  0D5A  1D03               	skipz
  6608  0D5B  2D5E               	goto	u845
  6609  0D5C  0820               	movf	??_checksumVerify,w
  6610  0D5D  0224               	subwf	checksumVerify@i,w
  6611  0D5E                     u845:	
  6612  0D5E  1803               	btfsc	3,0
  6613  0D5F  2D69               	goto	l7644
  6614                           
  6615                           ;Main.c: 415: checksum ^= rxBuffer[i];
  6616  0D60  1283               	bcf	3,5	;RP0=0, select bank0
  6617  0D61  1303               	bcf	3,6	;RP1=0, select bank0
  6618  0D62  0824               	movf	checksumVerify@i,w
  6619  0D63  3E3E               	addlw	_rxBuffer& (0+255)
  6620  0D64  0084               	movwf	4
  6621  0D65  1783               	bsf	3,7	;select IRP bank2
  6622  0D66  0800               	movf	0,w
  6623  0D67  06A2               	xorwf	checksumVerify@checksum,f
  6624  0D68  2D50               	goto	l7640
  6625  0D69                     l7644:	
  6626                           
  6627                           ;Main.c: 416: }
  6628                           ;Main.c: 417: if(rxBuffer[len-2] == checksum){
  6629  0D69  1283               	bcf	3,5	;RP0=0, select bank0
  6630  0D6A  1303               	bcf	3,6	;RP1=0, select bank0
  6631  0D6B  0823               	movf	checksumVerify@len,w
  6632  0D6C  3E3C               	addlw	(_rxBuffer+-2)& (0+255)
  6633  0D6D  0084               	movwf	4
  6634  0D6E  1783               	bsf	3,7	;select IRP bank2
  6635  0D6F  0800               	movf	0,w
  6636  0D70  0622               	xorwf	checksumVerify@checksum,w
  6637  0D71  1D03               	skipz
  6638  0D72  2D75               	goto	l7652
  6639                           
  6640                           ;Main.c: 419: return 1;
  6641  0D73  1403               	setc
  6642  0D74  0008               	return
  6643  0D75                     l7652:	
  6644                           
  6645                           ;Main.c: 421: else
  6646                           ;Main.c: 422: return 0;
  6647  0D75  1003               	clrc
  6648  0D76  0008               	return
  6649  0D77                     __end_of_checksumVerify:	
  6650                           
  6651                           	psect	text1027
  6652  0CD3                     __ptext1027:	
  6653 ;; =============== function _checksumVerify ends ============
  6654                           
  6655                           
  6656 ;; *************** function _initInterrupt *****************
  6657 ;; Defined at:
  6658 ;;		line 506 in file "Main.c"
  6659 ;; Parameters:    Size  Location     Type
  6660 ;;		None
  6661 ;; Auto vars:     Size  Location     Type
  6662 ;;		None
  6663 ;; Return value:  Size  Location     Type
  6664 ;;		None               void
  6665 ;; Registers used:
  6666 ;;		wreg, status,2
  6667 ;; Tracked objects:
  6668 ;;		On entry : 17F/20
  6669 ;;		On exit  : 17F/0
  6670 ;;		Unchanged: FFE80/0
  6671 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6672 ;;      Params:         0       0       0       0
  6673 ;;      Locals:         0       0       0       0
  6674 ;;      Temps:          0       0       0       0
  6675 ;;      Totals:         0       0       0       0
  6676 ;;Total ram usage:        0 bytes
  6677 ;; Hardware stack levels used:    1
  6678 ;; Hardware stack levels required when called:    3
  6679 ;; This function calls:
  6680 ;;		Nothing
  6681 ;; This function is called by:
  6682 ;;		_main
  6683 ;; This function uses a non-reentrant model
  6684 ;;
  6685  0CD3                     _initInterrupt:	
  6686  0CD3  300C               	movlw	12
  6687                           
  6688                           ;Main.c: 507: GIE = 1;
  6689                           
  6690                           ; Regs used in _initInterrupt: [wreg+status,2]
  6691  0CD4  178B               	bsf	11,7
  6692                           
  6693                           ;Main.c: 508: PEIE = 1;
  6694  0CD5  170B               	bsf	11,6
  6695                           
  6696                           ;Main.c: 511: INTE = 1;
  6697  0CD6  160B               	bsf	11,4
  6698                           
  6699                           ;Main.c: 512: INTF = 0;
  6700  0CD7  108B               	bcf	11,1
  6701                           
  6702                           ;Main.c: 513: INTEDG = 1;
  6703  0CD8  1701               	bsf	1,6
  6704                           
  6705                           ;Main.c: 517: T0CS = 0;
  6706  0CD9  1281               	bcf	1,5
  6707                           
  6708                           ;Main.c: 518: PSA = 0;
  6709  0CDA  1181               	bcf	1,3
  6710                           
  6711                           ;Main.c: 519: PS0 = 1;
  6712  0CDB  1401               	bsf	1,0
  6713                           
  6714                           ;Main.c: 520: PS1 = 1;
  6715  0CDC  1481               	bsf	1,1
  6716                           
  6717                           ;Main.c: 521: PS2 = 1;
  6718  0CDD  1501               	bsf	1,2
  6719                           
  6720                           ;Main.c: 522: TMR0 = 12;
  6721  0CDE  1283               	bcf	3,5	;RP0=0, select bank0
  6722  0CDF  0081               	movwf	1	;volatile
  6723                           
  6724                           ;Main.c: 523: T0IF = 0;
  6725  0CE0  110B               	bcf	11,2
  6726                           
  6727                           ;Main.c: 524: T0IE = 1;
  6728  0CE1  168B               	bsf	11,5
  6729                           
  6730                           ;Main.c: 529: TMR1L = 0x00;
  6731  0CE2  018E               	clrf	14	;volatile
  6732                           
  6733                           ;Main.c: 530: TMR1H = 0x60;
  6734  0CE3  3060               	movlw	96
  6735  0CE4  008F               	movwf	15	;volatile
  6736                           
  6737                           ;Main.c: 531: T1CKPS0 = 1;
  6738  0CE5  1610               	bsf	16,4
  6739                           
  6740                           ;Main.c: 532: T1CKPS1 = 1;
  6741  0CE6  1690               	bsf	16,5
  6742                           
  6743                           ;Main.c: 533: TMR1CS = 1;
  6744  0CE7  1490               	bsf	16,1
  6745                           
  6746                           ;Main.c: 534: nT1SYNC = 1;
  6747  0CE8  1510               	bsf	16,2
  6748                           
  6749                           ;Main.c: 535: T1OSCEN = 1;
  6750  0CE9  1590               	bsf	16,3
  6751                           
  6752                           ;Main.c: 536: TMR1IF = 0;
  6753  0CEA  100C               	bcf	12,0
  6754                           
  6755                           ;Main.c: 537: TMR1IE = 1;
  6756  0CEB  1683               	bsf	3,5	;RP0=1, select bank1
  6757  0CEC  140C               	bsf	12,0
  6758                           
  6759                           ;Main.c: 538: TMR1ON = 1;
  6760  0CED  1283               	bcf	3,5	;RP0=0, select bank0
  6761  0CEE  1410               	bsf	16,0
  6762  0CEF  0008               	return
  6763  0CF0                     __end_of_initInterrupt:	
  6764                           
  6765                           	psect	text1028
  6766  0CBD                     __ptext1028:	
  6767 ;; =============== function _initInterrupt ends ============
  6768                           
  6769                           
  6770 ;; *************** function _initGPIO *****************
  6771 ;; Defined at:
  6772 ;;		line 487 in file "Main.c"
  6773 ;; Parameters:    Size  Location     Type
  6774 ;;		None
  6775 ;; Auto vars:     Size  Location     Type
  6776 ;;		None
  6777 ;; Return value:  Size  Location     Type
  6778 ;;		None               void
  6779 ;; Registers used:
  6780 ;;		wreg, status,2
  6781 ;; Tracked objects:
  6782 ;;		On entry : 17F/0
  6783 ;;		On exit  : 17F/0
  6784 ;;		Unchanged: FFE80/0
  6785 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6786 ;;      Params:         0       0       0       0
  6787 ;;      Locals:         0       0       0       0
  6788 ;;      Temps:          0       0       0       0
  6789 ;;      Totals:         0       0       0       0
  6790 ;;Total ram usage:        0 bytes
  6791 ;; Hardware stack levels used:    1
  6792 ;; Hardware stack levels required when called:    3
  6793 ;; This function calls:
  6794 ;;		Nothing
  6795 ;; This function is called by:
  6796 ;;		_main
  6797 ;; This function uses a non-reentrant model
  6798 ;;
  6799  0CBD                     _initGPIO:	
  6800                           
  6801                           ;Main.c: 488: ANSEL = 0x00;
  6802                           
  6803                           ; Regs used in _initGPIO: [wreg+status,2]
  6804  0CBD  1703               	bsf	3,6	;RP1=1, select bank2
  6805  0CBE  019E               	clrf	30	;volatile
  6806                           
  6807                           ;Main.c: 489: ANSELH = 0x00;
  6808  0CBF  019F               	clrf	31	;volatile
  6809                           
  6810                           ;Main.c: 490: PORTA = 0;
  6811  0CC0  1303               	bcf	3,6	;RP1=0, select bank0
  6812  0CC1  0185               	clrf	5	;volatile
  6813                           
  6814                           ;Main.c: 491: TRISA = 0b00000100;
  6815  0CC2  3004               	movlw	4
  6816  0CC3  1683               	bsf	3,5	;RP0=1, select bank1
  6817  0CC4  0085               	movwf	5	;volatile
  6818                           
  6819                           ;Main.c: 492: PORTA = 0;
  6820  0CC5  1283               	bcf	3,5	;RP0=0, select bank0
  6821  0CC6  0185               	clrf	5	;volatile
  6822                           
  6823                           ;Main.c: 494: PORTB = 0;
  6824  0CC7  0186               	clrf	6	;volatile
  6825                           
  6826                           ;Main.c: 495: TRISB = 0b00000000;
  6827  0CC8  1683               	bsf	3,5	;RP0=1, select bank1
  6828  0CC9  0186               	clrf	6	;volatile
  6829                           
  6830                           ;Main.c: 496: PORTB = 0;
  6831  0CCA  1283               	bcf	3,5	;RP0=0, select bank0
  6832  0CCB  0186               	clrf	6	;volatile
  6833                           
  6834                           ;Main.c: 498: PORTC = 0;
  6835  0CCC  0187               	clrf	7	;volatile
  6836                           
  6837                           ;Main.c: 499: TRISC = 0b00000001;
  6838  0CCD  3001               	movlw	1
  6839  0CCE  1683               	bsf	3,5	;RP0=1, select bank1
  6840  0CCF  0087               	movwf	7	;volatile
  6841                           
  6842                           ;Main.c: 500: PORTC = 0;
  6843  0CD0  1283               	bcf	3,5	;RP0=0, select bank0
  6844  0CD1  0187               	clrf	7	;volatile
  6845  0CD2  0008               	return
  6846  0CD3                     __end_of_initGPIO:	
  6847                           
  6848                           	psect	text1030
  6849  0C73                     __ptext1030:	
  6850 ;; =============== function _halfclockdelay ends ============
  6851                           
  6852                           
  6853 ;; *************** function _i2cInitialize *****************
  6854 ;; Defined at:
  6855 ;;		line 86 in file "I2c.c"
  6856 ;; Parameters:    Size  Location     Type
  6857 ;;  feq_K           4    0[BANK0 ] const unsigned long 
  6858 ;; Auto vars:     Size  Location     Type
  6859 ;;		None
  6860 ;; Return value:  Size  Location     Type
  6861 ;;		None               void
  6862 ;; Registers used:
  6863 ;;		None
  6864 ;; Tracked objects:
  6865 ;;		On entry : 17F/0
  6866 ;;		On exit  : 17F/20
  6867 ;;		Unchanged: FFE80/0
  6868 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6869 ;;      Params:         0       4       0       0
  6870 ;;      Locals:         0       0       0       0
  6871 ;;      Temps:          0       0       0       0
  6872 ;;      Totals:         0       4       0       0
  6873 ;;Total ram usage:        4 bytes
  6874 ;; Hardware stack levels used:    1
  6875 ;; Hardware stack levels required when called:    3
  6876 ;; This function calls:
  6877 ;;		Nothing
  6878 ;; This function is called by:
  6879 ;;		_main
  6880 ;; This function uses a non-reentrant model
  6881 ;;
  6882  0C73                     _i2cInitialize:	
  6883                           
  6884                           ;I2c.c: 87: TRISB4 = 1; TRISB6 = 1;
  6885                           
  6886                           ; Regs used in _i2cInitialize: []
  6887  0C73  1683               	bsf	3,5	;RP0=1, select bank1
  6888  0C74  1606               	bsf	6,4
  6889  0C75  1706               	bsf	6,6
  6890  0C76  0008               	return
  6891  0C77                     __end_of_i2cInitialize:	
  6892                           
  6893                           	psect	text1032
  6894  0C7F                     __ptext1032:	
  6895 ;; =============== function _checksumCalc ends ============
  6896                           
  6897                           
  6898 ;; *************** function _memset *****************
  6899 ;; Defined at:
  6900 ;;		line 10 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\memset.c"
  6901 ;; Parameters:    Size  Location     Type
  6902 ;;  p1              1    wreg     PTR void 
  6903 ;;		 -> rxBuffer(30), 
  6904 ;;  c               2    0[BANK0 ] int 
  6905 ;;  n               2    2[BANK0 ] unsigned int 
  6906 ;; Auto vars:     Size  Location     Type
  6907 ;;  p1              1    4[BANK0 ] PTR void 
  6908 ;;		 -> rxBuffer(30), 
  6909 ;;  p               1    5[BANK0 ] PTR unsigned char 
  6910 ;;		 -> rxBuffer(30), 
  6911 ;; Return value:  Size  Location     Type
  6912 ;;                  1    wreg      PTR void 
  6913 ;; Registers used:
  6914 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6915 ;; Tracked objects:
  6916 ;;		On entry : 60/0
  6917 ;;		On exit  : 60/0
  6918 ;;		Unchanged: FFE9F/0
  6919 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6920 ;;      Params:         0       4       0       0
  6921 ;;      Locals:         0       2       0       0
  6922 ;;      Temps:          0       0       0       0
  6923 ;;      Totals:         0       6       0       0
  6924 ;;Total ram usage:        6 bytes
  6925 ;; Hardware stack levels used:    1
  6926 ;; Hardware stack levels required when called:    3
  6927 ;; This function calls:
  6928 ;;		Nothing
  6929 ;; This function is called by:
  6930 ;;		_main
  6931 ;; This function uses a non-reentrant model
  6932 ;;
  6933  0C7F                     _memset:	
  6934                           
  6935                           ; Regs used in _memset: [wreg-fsr0h+status,2+status,0]
  6936                           ;memset@p1 stored from wreg
  6937  0C7F  00A4               	movwf	memset@p1
  6938  0C80  00A5               	movwf	memset@p
  6939  0C81                     l7546:	
  6940  0C81  3001               	movlw	1
  6941  0C82  02A2               	subwf	memset@n,f
  6942  0C83  3000               	movlw	0
  6943  0C84  1C03               	skipc
  6944  0C85  03A3               	decf	memset@n+1,f
  6945  0C86  02A3               	subwf	memset@n+1,f
  6946  0C87  0A22               	incf	memset@n,w
  6947  0C88  1903               	skipnz
  6948  0C89  0A23               	incf	memset@n+1,w
  6949  0C8A  1903               	btfsc	3,2
  6950  0C8B  0008               	return
  6951  0C8C  0825               	movf	memset@p,w
  6952  0C8D  0084               	movwf	4
  6953  0C8E  0820               	movf	memset@c,w
  6954  0C8F  1783               	bsf	3,7	;select IRP bank2
  6955  0C90  0080               	movwf	0
  6956  0C91  0AA5               	incf	memset@p,f
  6957  0C92  2C81               	goto	l7546
  6958  0C93                     __end_of_memset:	
  6959                           
  6960                           	psect	text1034
  6961  0C93                     __ptext1034:	
  6962 ;; =============== function _UART_send_char ends ============
  6963                           
  6964                           
  6965 ;; *************** function _initUART *****************
  6966 ;; Defined at:
  6967 ;;		line 7 in file "uart.c"
  6968 ;; Parameters:    Size  Location     Type
  6969 ;;		None
  6970 ;; Auto vars:     Size  Location     Type
  6971 ;;		None
  6972 ;; Return value:  Size  Location     Type
  6973 ;;		None               void
  6974 ;; Registers used:
  6975 ;;		wreg, status,2
  6976 ;; Tracked objects:
  6977 ;;		On entry : 17F/0
  6978 ;;		On exit  : 17F/0
  6979 ;;		Unchanged: FFE80/0
  6980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6981 ;;      Params:         0       0       0       0
  6982 ;;      Locals:         0       0       0       0
  6983 ;;      Temps:          0       0       0       0
  6984 ;;      Totals:         0       0       0       0
  6985 ;;Total ram usage:        0 bytes
  6986 ;; Hardware stack levels used:    1
  6987 ;; Hardware stack levels required when called:    3
  6988 ;; This function calls:
  6989 ;;		Nothing
  6990 ;; This function is called by:
  6991 ;;		_main
  6992 ;; This function uses a non-reentrant model
  6993 ;;
  6994  0C93                     _initUART:	
  6995                           
  6996                           ;uart.c: 9: TRISB5 = 1;
  6997                           
  6998                           ; Regs used in _initUART: [wreg+status,2]
  6999  0C93  1683               	bsf	3,5	;RP0=1, select bank1
  7000  0C94  1686               	bsf	6,5
  7001                           
  7002                           ;uart.c: 10: TRISB7 = 0;
  7003  0C95  1386               	bcf	6,7
  7004                           
  7005                           ;uart.c: 13: BRG16 = 0;
  7006  0C96  119B               	bcf	27,3
  7007                           
  7008                           ;uart.c: 14: BRGH = 1;
  7009  0C97  1518               	bsf	24,2
  7010                           
  7011                           ;uart.c: 15: SPBRGH = 0;
  7012  0C98  019A               	clrf	26	;volatile
  7013                           
  7014                           ;uart.c: 16: SPBRG = 25;
  7015  0C99  3019               	movlw	25
  7016  0C9A  0099               	movwf	25	;volatile
  7017                           
  7018                           ;uart.c: 19: SYNC = 0;
  7019  0C9B  1218               	bcf	24,4
  7020                           
  7021                           ;uart.c: 20: SPEN = 1;
  7022  0C9C  1283               	bcf	3,5	;RP0=0, select bank0
  7023  0C9D  1798               	bsf	24,7
  7024                           
  7025                           ;uart.c: 23: RCIE = 1;
  7026  0C9E  1683               	bsf	3,5	;RP0=1, select bank1
  7027  0C9F  168C               	bsf	12,5
  7028                           
  7029                           ;uart.c: 24: TXEN = 1;
  7030  0CA0  1698               	bsf	24,5
  7031                           
  7032                           ;uart.c: 25: CREN = 1;
  7033  0CA1  1283               	bcf	3,5	;RP0=0, select bank0
  7034  0CA2  1618               	bsf	24,4
  7035                           
  7036                           ;uart.c: 28: TX9 = 0;
  7037  0CA3  1683               	bsf	3,5	;RP0=1, select bank1
  7038  0CA4  1318               	bcf	24,6
  7039                           
  7040                           ;uart.c: 29: RX9 = 0;
  7041  0CA5  1283               	bcf	3,5	;RP0=0, select bank0
  7042  0CA6  1318               	bcf	24,6
  7043  0CA7  0008               	return
  7044  0CA8                     __end_of_initUART:	
  7045                           
  7046                           	psect	text1035
  7047  0E80                     __ptext1035:	
  7048 ;; =============== function _initUART ends ============
  7049                           
  7050                           
  7051 ;; *************** function _isr *****************
  7052 ;; Defined at:
  7053 ;;		line 439 in file "Main.c"
  7054 ;; Parameters:    Size  Location     Type
  7055 ;;		None
  7056 ;; Auto vars:     Size  Location     Type
  7057 ;;		None
  7058 ;; Return value:  Size  Location     Type
  7059 ;;		None               void
  7060 ;; Registers used:
  7061 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7062 ;; Tracked objects:
  7063 ;;		On entry : 0/0
  7064 ;;		On exit  : 40/0
  7065 ;;		Unchanged: FFE9F/0
  7066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7067 ;;      Params:         0       0       0       0
  7068 ;;      Locals:         0       0       0       0
  7069 ;;      Temps:          3       0       0       0
  7070 ;;      Totals:         3       0       0       0
  7071 ;;Total ram usage:        3 bytes
  7072 ;; Hardware stack levels used:    1
  7073 ;; Hardware stack levels required when called:    2
  7074 ;; This function calls:
  7075 ;;		_UART_get_char
  7076 ;;		_bufferCreator2
  7077 ;;		i1_memset
  7078 ;; This function is called by:
  7079 ;;		Interrupt level 1
  7080 ;; This function uses a non-reentrant model
  7081 ;;
  7082  0E80                     _isr:	
  7083                           
  7084                           ;Main.c: 440: if(RCIE == 1 && RCIF == 1){
  7085  0E80  1683               	bsf	3,5	;RP0=1, select bank1
  7086  0E81  1303               	bcf	3,6	;RP1=0, select bank1
  7087  0E82  1E8C               	btfss	12,5
  7088  0E83  2E8C               	goto	i1l7674
  7089  0E84  1283               	bcf	3,5	;RP0=0, select bank0
  7090  0E85  1E8C               	btfss	12,5
  7091  0E86  2E8C               	goto	i1l7674
  7092                           
  7093                           ;Main.c: 441: dataRX = UART_get_char();
  7094  0E87  26DF  158A         	fcall	_UART_get_char
  7095  0E89  00E1               	movwf	_dataRX
  7096                           
  7097                           ;Main.c: 442: bufferCreator2(dataRX);
  7098  0E8A  26F9  158A         	fcall	_bufferCreator2
  7099  0E8C                     i1l7674:	
  7100                           
  7101                           ;Main.c: 443: }
  7102                           ;Main.c: 444: if (INTE == 1 && INTF == 1){
  7103  0E8C  1A0B               	btfsc	11,4
  7104  0E8D  1C8B               	btfss	11,1
  7105  0E8E  2E97               	goto	i1l7684
  7106  0E8F  30C8               	movlw	200
  7107                           
  7108                           ;Main.c: 445: INTF = 0;
  7109  0E90  108B               	bcf	11,1
  7110                           
  7111                           ;Main.c: 447: flagTryConnect = 1;
  7112  0E91  167A               	bsf	_flagTryConnect/(0+8),_flagTryConnect& (0+7)
  7113                           
  7114                           ;Main.c: 448: timeToConnect = 200;
  7115  0E92  1283               	bcf	3,5	;RP0=0, select bank0
  7116  0E93  00E6               	movwf	_timeToConnect
  7117                           
  7118                           ;Main.c: 449: timeBlinkLed = 5;
  7119  0E94  3005               	movlw	5
  7120  0E95  00E5               	movwf	_timeBlinkLed
  7121                           
  7122                           ;Main.c: 450: RC4 = 0;
  7123  0E96  1207               	bcf	7,4
  7124  0E97                     i1l7684:	
  7125                           
  7126                           ;Main.c: 451: }
  7127                           ;Main.c: 452: if (T0IE == 1 && T0IF == 1){
  7128  0E97  1A8B               	btfsc	11,5
  7129  0E98  1D0B               	btfss	11,2
  7130  0E99  2EB7               	goto	i1l7710
  7131  0E9A  303C               	movlw	60
  7132                           
  7133                           ;Main.c: 453: T0IE = 1;
  7134  0E9B  168B               	bsf	11,5
  7135                           
  7136                           ;Main.c: 454: T0IF = 0;
  7137  0E9C  110B               	bcf	11,2
  7138                           
  7139                           ;Main.c: 455: TMR0 = 60;
  7140  0E9D  1283               	bcf	3,5	;RP0=0, select bank0
  7141  0E9E  0081               	movwf	1	;volatile
  7142                           
  7143                           ;Main.c: 456: if (serialTimeOut > 0){serialTimeOut--;}
  7144  0E9F  087D               	movf	_serialTimeOut,w
  7145  0EA0  1D03               	skipz
  7146  0EA1  03FD               	decf	_serialTimeOut,f
  7147                           
  7148                           ;Main.c: 457: if (serialTimeOut == 0){
  7149  0EA2  08FD               	movf	_serialTimeOut,f
  7150  0EA3  1D03               	skipz
  7151  0EA4  2EB1               	goto	i1l7702
  7152                           
  7153                           ;Main.c: 458: serialTimeOut = 10;
  7154  0EA5  300A               	movlw	10
  7155  0EA6  00FD               	movwf	_serialTimeOut
  7156                           
  7157                           ;Main.c: 459: rxBufferPos = 0;
  7158  0EA7  01FC               	clrf	_rxBufferPos
  7159                           
  7160                           ;Main.c: 460: rxBufferLength = 0;
  7161  0EA8  01FB               	clrf	_rxBufferLength
  7162                           
  7163                           ;Main.c: 461: memset(rxBuffer,0,rxBufferLength);
  7164  0EA9  01F0               	clrf	?i1_memset
  7165  0EAA  01F1               	clrf	?i1_memset+1
  7166  0EAB  087B               	movf	_rxBufferLength,w
  7167  0EAC  00F2               	movwf	?i1_memset+2
  7168  0EAD  303E               	movlw	_rxBuffer& (0+255)
  7169  0EAE  01F3               	clrf	?i1_memset+3
  7170  0EAF  26E5  158A         	fcall	i1_memset
  7171  0EB1                     i1l7702:	
  7172                           
  7173                           ;Main.c: 462: }
  7174                           ;Main.c: 463: if (timeToConnect>0){
  7175  0EB1  0866               	movf	_timeToConnect,w
  7176  0EB2  1D03               	skipz
  7177                           
  7178                           ;Main.c: 464: timeToConnect--;
  7179  0EB3  03E6               	decf	_timeToConnect,f
  7180                           
  7181                           ;Main.c: 465: }
  7182                           ;Main.c: 467: if (timeBlinkLed>0){
  7183  0EB4  0865               	movf	_timeBlinkLed,w
  7184  0EB5  1D03               	skipz
  7185                           
  7186                           ;Main.c: 468: timeBlinkLed--;
  7187  0EB6  03E5               	decf	_timeBlinkLed,f
  7188  0EB7                     i1l7710:	
  7189                           
  7190                           ;Main.c: 469: }
  7191                           ;Main.c: 470: }
  7192                           ;Main.c: 471: if (TMR1IE == 1 && TMR1IF == 1){
  7193  0EB7  1683               	bsf	3,5	;RP0=1, select bank1
  7194  0EB8  1C0C               	btfss	12,0
  7195  0EB9  2ED6               	goto	i1l4947
  7196  0EBA  1283               	bcf	3,5	;RP0=0, select bank0
  7197  0EBB  1C0C               	btfss	12,0
  7198  0EBC  2ED6               	goto	i1l4947
  7199                           
  7200                           ;Main.c: 472: TMR1IF = 0;
  7201  0EBD  100C               	bcf	12,0
  7202                           
  7203                           ;Main.c: 473: TMR1ON = 0;
  7204  0EBE  1010               	bcf	16,0
  7205                           
  7206                           ;Main.c: 474: TMR1L = 0x00;
  7207  0EBF  018E               	clrf	14	;volatile
  7208                           
  7209                           ;Main.c: 475: TMR1H = 0x60;
  7210  0EC0  3060               	movlw	96
  7211  0EC1  008F               	movwf	15	;volatile
  7212  0EC2  300A               	movlw	10
  7213                           
  7214                           ;Main.c: 476: TMR1ON = 1;
  7215  0EC3  1410               	bsf	16,0
  7216                           
  7217                           ;Main.c: 477: timeNow += 10;
  7218  0EC4  07D4               	addwf	_timeNow,f
  7219  0EC5  3001               	movlw	1
  7220  0EC6  1803               	skipnc
  7221  0EC7  07D5               	addwf	_timeNow+1,f
  7222  0EC8  1803               	skipnc
  7223  0EC9  07D6               	addwf	_timeNow+2,f
  7224  0ECA  1803               	skipnc
  7225  0ECB  07D7               	addwf	_timeNow+3,f
  7226                           
  7227                           ;Main.c: 478: if (contTimer > 0){
  7228  0ECC  085D               	movf	_contTimer+1,w
  7229  0ECD  045C               	iorwf	_contTimer,w
  7230  0ECE  1903               	skipnz
  7231  0ECF  2ED6               	goto	i1l4947
  7232                           
  7233                           ;Main.c: 479: contTimer --;
  7234  0ED0  3001               	movlw	1
  7235  0ED1  02DC               	subwf	_contTimer,f
  7236  0ED2  3000               	movlw	0
  7237  0ED3  1C03               	skipc
  7238  0ED4  03DD               	decf	_contTimer+1,f
  7239  0ED5  02DD               	subwf	_contTimer+1,f
  7240  0ED6                     i1l4947:	
  7241  0ED6  0879               	movf	??_isr+2,w
  7242  0ED7  008A               	movwf	10
  7243  0ED8  0878               	movf	??_isr+1,w
  7244  0ED9  0084               	movwf	4
  7245  0EDA  0E77               	swapf	??_isr^(0+-128),w
  7246  0EDB  0083               	movwf	3
  7247  0EDC  0EFE               	swapf	126,f
  7248  0EDD  0E7E               	swapf	126,w
  7249  0EDE  0009               	retfie
  7250  0EDF                     __end_of_isr:	
  7251  0EDF                     __ptext1038:	
  7252 ;; =============== function i1_memset ends ============
  7253                           
  7254                           
  7255 ;; *************** function _UART_get_char *****************
  7256 ;; Defined at:
  7257 ;;		line 66 in file "uart.c"
  7258 ;; Parameters:    Size  Location     Type
  7259 ;;		None
  7260 ;; Auto vars:     Size  Location     Type
  7261 ;;		None
  7262 ;; Return value:  Size  Location     Type
  7263 ;;                  1    wreg      unsigned char 
  7264 ;; Registers used:
  7265 ;;		wreg
  7266 ;; Tracked objects:
  7267 ;;		On entry : 60/0
  7268 ;;		On exit  : 60/0
  7269 ;;		Unchanged: FFF9F/0
  7270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7271 ;;      Params:         0       0       0       0
  7272 ;;      Locals:         0       0       0       0
  7273 ;;      Temps:          0       0       0       0
  7274 ;;      Totals:         0       0       0       0
  7275 ;;Total ram usage:        0 bytes
  7276 ;; Hardware stack levels used:    1
  7277 ;; This function calls:
  7278 ;;		Nothing
  7279 ;; This function is called by:
  7280 ;;		_isr
  7281 ;; This function uses a non-reentrant model
  7282 ;;
  7283  0EDF                     _UART_get_char:	
  7284                           
  7285                           ;uart.c: 67: if(OERR){
  7286                           
  7287                           ; Regs used in _UART_get_char: [wreg]
  7288  0EDF  1C98               	btfss	24,1
  7289  0EE0  2EE3               	goto	i1l7536
  7290                           
  7291                           ;uart.c: 68: CREN = 0;
  7292  0EE1  1218               	bcf	24,4
  7293                           
  7294                           ;uart.c: 69: CREN = 1;
  7295  0EE2  1618               	bsf	24,4
  7296  0EE3                     i1l7536:	
  7297                           
  7298                           ;uart.c: 70: }
  7299                           ;uart.c: 71: return RCREG;
  7300  0EE3  081A               	movf	26,w	;volatile
  7301  0EE4  0008               	return
  7302  0EE5                     __end_of_UART_get_char:	
  7303  0EE5                     __ptext1037:	
  7304 ;; =============== function _bufferCreator2 ends ============
  7305                           
  7306                           
  7307 ;; *************** function i1_memset *****************
  7308 ;; Defined at:
  7309 ;;		line 10 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\memset.c"
  7310 ;; Parameters:    Size  Location     Type
  7311 ;;  memset          1    wreg     PTR void 
  7312 ;;		 -> rxBuffer(30), 
  7313 ;;  memset          2    0[COMMON] int 
  7314 ;;  memset          2    2[COMMON] unsigned int 
  7315 ;; Auto vars:     Size  Location     Type
  7316 ;;  memset          1    4[COMMON] PTR void 
  7317 ;;		 -> rxBuffer(30), 
  7318 ;;  memset          1    5[COMMON] PTR unsigned char 
  7319 ;; Return value:  Size  Location     Type
  7320 ;;                  1    wreg      PTR void 
  7321 ;; Registers used:
  7322 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7323 ;; Tracked objects:
  7324 ;;		On entry : 60/0
  7325 ;;		On exit  : 60/0
  7326 ;;		Unchanged: FFE9F/0
  7327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7328 ;;      Params:         4       0       0       0
  7329 ;;      Locals:         2       0       0       0
  7330 ;;      Temps:          0       0       0       0
  7331 ;;      Totals:         6       0       0       0
  7332 ;;Total ram usage:        6 bytes
  7333 ;; Hardware stack levels used:    1
  7334 ;; This function calls:
  7335 ;;		Nothing
  7336 ;; This function is called by:
  7337 ;;		_bufferCreator2
  7338 ;;		_isr
  7339 ;; This function uses a non-reentrant model
  7340 ;;
  7341  0EE5                     i1_memset:	
  7342                           
  7343                           ; Regs used in i1_memset: [wreg-fsr0h+status,2+status,0]
  7344                           ;i1memset@p1 stored from wreg
  7345  0EE5  00F4               	movwf	i1memset@p1
  7346  0EE6  00F5               	movwf	i1memset@p
  7347  0EE7                     i1l7808:	
  7348  0EE7  3001               	movlw	1
  7349  0EE8  02F2               	subwf	i1memset@n,f
  7350  0EE9  3000               	movlw	0
  7351  0EEA  1C03               	skipc
  7352  0EEB  03F3               	decf	i1memset@n+1,f
  7353  0EEC  02F3               	subwf	i1memset@n+1,f
  7354  0EED  0A72               	incf	i1memset@n,w
  7355  0EEE  1903               	skipnz
  7356  0EEF  0A73               	incf	i1memset@n+1,w
  7357  0EF0  1903               	btfsc	3,2
  7358  0EF1  0008               	return
  7359  0EF2  0875               	movf	i1memset@p,w
  7360  0EF3  0084               	movwf	4
  7361  0EF4  0870               	movf	i1memset@c,w
  7362  0EF5  1783               	bsf	3,7	;select IRP bank2
  7363  0EF6  0080               	movwf	0
  7364  0EF7  0AF5               	incf	i1memset@p,f
  7365  0EF8  2EE7               	goto	i1l7808
  7366  0EF9                     __end_ofi1_memset:	
  7367  0EF9                     __ptext1036:	
  7368 ;; =============== function _isr ends ============
  7369                           
  7370                           
  7371 ;; *************** function _bufferCreator2 *****************
  7372 ;; Defined at:
  7373 ;;		line 107 in file "uart.c"
  7374 ;; Parameters:    Size  Location     Type
  7375 ;;  ch              1    wreg     unsigned char 
  7376 ;; Auto vars:     Size  Location     Type
  7377 ;;  ch              1    6[COMMON] unsigned char 
  7378 ;; Return value:  Size  Location     Type
  7379 ;;		None               void
  7380 ;; Registers used:
  7381 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7382 ;; Tracked objects:
  7383 ;;		On entry : 60/0
  7384 ;;		On exit  : 60/0
  7385 ;;		Unchanged: FFE9F/0
  7386 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7387 ;;      Params:         0       0       0       0
  7388 ;;      Locals:         1       0       0       0
  7389 ;;      Temps:          0       0       0       0
  7390 ;;      Totals:         1       0       0       0
  7391 ;;Total ram usage:        1 bytes
  7392 ;; Hardware stack levels used:    1
  7393 ;; Hardware stack levels required when called:    1
  7394 ;; This function calls:
  7395 ;;		i1_memset
  7396 ;; This function is called by:
  7397 ;;		_isr
  7398 ;; This function uses a non-reentrant model
  7399 ;;
  7400  0EF9                     _bufferCreator2:	
  7401                           
  7402 ;; hardware stack exceeded
  7403                           ; Regs used in _bufferCreator2: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7404                           ;bufferCreator2@ch stored from wreg
  7405  0EF9  00F6               	movwf	bufferCreator2@ch
  7406                           
  7407                           ;uart.c: 117: if (rxBufferPos < 30-1){
  7408  0EFA  301D               	movlw	29
  7409  0EFB  027C               	subwf	_rxBufferPos,w
  7410  0EFC  1803               	skipnc
  7411  0EFD  2F0B               	goto	i1l7560
  7412                           
  7413                           ;uart.c: 119: rxBuffer[rxBufferPos] = ch;
  7414  0EFE  087C               	movf	_rxBufferPos,w
  7415  0EFF  3E3E               	addlw	_rxBuffer& (0+255)
  7416  0F00  0084               	movwf	4
  7417  0F01  0876               	movf	bufferCreator2@ch,w
  7418  0F02  1783               	bsf	3,7	;select IRP bank2
  7419  0F03  0080               	movwf	0
  7420                           
  7421                           ;uart.c: 120: rxBufferPos++;
  7422  0F04  0AFC               	incf	_rxBufferPos,f
  7423                           
  7424                           ;uart.c: 121: rxBufferLength = rxBufferPos;
  7425  0F05  087C               	movf	_rxBufferPos,w
  7426  0F06  00FB               	movwf	_rxBufferLength
  7427  0F07  300A               	movlw	10
  7428                           
  7429                           ;uart.c: 122: flagRxBufferOk = 1;
  7430  0F08  15FA               	bsf	_flagRxBufferOk/(0+8),_flagRxBufferOk& (0+7)
  7431                           
  7432                           ;uart.c: 123: serialTimeOut = 10;
  7433  0F09  00FD               	movwf	_serialTimeOut
  7434                           
  7435                           ;uart.c: 124: }
  7436  0F0A  0008               	return
  7437  0F0B                     i1l7560:	
  7438                           
  7439                           ;uart.c: 125: else{
  7440                           ;uart.c: 126: rxBufferPos = 0;
  7441  0F0B  01FC               	clrf	_rxBufferPos
  7442                           
  7443                           ;uart.c: 127: memset(rxBuffer,0,rxBufferLength);
  7444  0F0C  01F0               	clrf	?i1_memset
  7445  0F0D  01F1               	clrf	?i1_memset+1
  7446  0F0E  087B               	movf	_rxBufferLength,w
  7447  0F0F  00F2               	movwf	?i1_memset+2
  7448  0F10  303E               	movlw	_rxBuffer& (0+255)
  7449  0F11  01F3               	clrf	?i1_memset+3
  7450  0F12  26E5               	fcall	i1_memset
  7451  0F13  0008               	return
  7452  0F14                     __end_of_bufferCreator2:	
  7453                           
  7454                           	psect	intentry
  7455  0004                     __pintentry:	
  7456 ;; hardware stack exceeded
  7457                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7458                           
  7459  0004                     interrupt_function:	
  7460  007E                     saved_w	set	btemp
  7461  0004  00FE               	movwf	btemp
  7462  0005  0E03               	swapf	3,w
  7463  0006  00F7               	movwf	??_isr
  7464  0007  0804               	movf	4,w
  7465  0008  00F8               	movwf	??_isr+1
  7466  0009  080A               	movf	10,w
  7467  000A  00F9               	movwf	??_isr+2
  7468  000B  158A  2E80         	ljmp	_isr
  7469                           
  7470                           	psect	text1039
  7471  0000                     __ptext1039:	
  7472 ;; =============== function _UART_get_char ends ============
  7473                           
  7474  007E                     btemp	set	126	;btemp
  7475  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.83 build 10920 
Symbol Table                                                                                   Mon Nov 20 08:56:21 2023

                 _eepromReadLogPage 047B                                   pc 0002  
                ?_eepromReadLogPage 0026                         _startLogCmd 0284  
                                fsr 0004                 ___wmul@multiplicand 0022  
                  i2cRead@read_data 0023                        comandoRx@chk 003C  
                i2cInitialize@feq_K 0020                                 l921 0000  
                               l924 074E                                 l933 0000  
                               l927 0000                                 _GIE 005F  
                               _RC0 0038                                 _RC1 0039  
                               _RB4 0034                                 _RC4 003C  
                               _RB6 0036                                 _PS0 0408  
                               _PS1 0409                                 _PS2 040A  
                               _PSA 040B                                 u825 0768  
                               u845 0D5E                                 _RX9 00C6  
                               _TX9 04C6                                 _cmd 00C8  
               ??_eepromReadLogPage 0029                                 _isr 0E80  
                               fsr0 0004                                 indf 0000  
                              S8542 083F                                l6003 0000  
                              l1880 0000                                l3800 0000  
                              l2841 0000                                l2827 0000  
                              l2835 0000                                l1883 0000  
                              l1892 0000                                l2844 0000  
                              l2860 0000                                l1877 0000  
                              l2854 0000                                l2838 0000  
                              l1886 0000                                l3806 0000  
                              l2863 0721                                l2871 0737  
                              l2864 071D                                l8000 0000  
                              l1889 0000                                l2873 0000  
                              l2849 0000                                l2857 0000  
                              l3841 0000                                l8010 0000  
                              l8002 0000                                l2868 0000  
                              l8020 0000                                l8012 0000  
                              l8004 0000                                l8100 0000  
                              l8030 0000                                l8022 0000  
                              l8014 0000                                l8006 0000  
                              l3854 0000                                l8102 0000  
                              l8110 0000                                l4902 00FF  
                              l3847 0000                                l8032 0000  
                              l8024 0000                                l8016 0000  
                              l8008 0000                                l8040 0000  
                              l8112 0000                                l8104 0000  
                              l8120 0000                                l8200 0000  
                              l4921 0000                                l8026 0000  
                              l8018 0000                                l8050 0000  
                              l8042 0000                                l8106 0000  
                              l3794 0000                                l8114 0000  
                              l8130 0000                                l8122 0000  
                              l8202 0000                                l8210 0000  
                              l8028 0000                                l8060 0000  
                              l8052 0000                                l8044 0000  
                              l8036 0000                                l8108 0000  
                              l8116 0000                                l8140 0000  
                              l8204 0000                                l8300 0000  
                              l3797 0000                                l7510 0000  
                              l4950 0000                                l5902 0000  
                              l4918 0000                                l8070 0000  
                              l8062 0000                                l8054 0000  
                              l8046 0000                                l8038 0000  
                              l8134 04A4                                l8150 0000  
                              l8310 0000                                l8302 0000  
                              l8230 0000                                l8222 0051  
                              l8214 003F                                l8206 0000  
                              l5815 0000                                l4935 0000  
                              l7520 0000                                l7512 0000  
                              l7600 0000                                l8080 0000  
                              l8072 0000                                l8064 0000  
                              l8056 0000                                l8048 0000  
                              l8136 0000                                l8128 048D  
                              l8160 0000                                l8152 0000  
                              l8144 0000                                l8400 0000  
                              l8320 0000                                l8312 0000  
                              l8304 0000                                l8240 007E  
                              l8232 0000                                l8224 0000  
                              l8216 0000                                l8208 0000  
                              l4953 0000                                l5809 0000  
                              l7522 0000                                l7514 0000  
                              l7530 0000                                l7602 0000  
                              l7610 0000                                l4882 0000  
                              l8090 0000                                l8082 0000  
                              l8074 0000                                l8066 0000  
                              l8058 0000                                l8170 0000  
                              l8162 0000                                l8154 0000  
                              l8146 0000                                l8330 0000  
                              l8322 0000                                l8314 0000  
                              l8306 0000                                l8242 0081  
                              l8234 0000                                l8226 0000  
                              l8410 01DD                                l5827 0000  
                              l7524 0000                                l7516 0000  
                              l7508 0000                                l7540 0000  
                              l7620 0000                                l7612 0000  
                              l7604 0000                                l8092 0000  
                              l8084 0000                                l8076 0000  
                              l8068 0000                                l8172 0000  
                              l8164 0000                                l8156 0000  
                              l8148 0000                                l8180 0000  
                              l8404 0000                                l8340 0000  
                              l8324 0000                                l8316 0000  
                              l8308 0000                                l8260 0092  
                              l8252 008B                                l8244 0083  
                              l8236 0000                                l8500 0000  
                              ?_isr 0070                                l4869 0FB8  
                              l7526 0000                                l7518 0000  
                              l7630 0000                                l7622 0000  
                              l7614 0000                                l7606 0000  
                              l8094 0000                                l8086 0000  
                              l8078 0000                                l8166 0000  
                              l8158 0000                                l8190 0000  
                              l8182 0000                                l8174 0000  
                              l8414 0000                                l8350 0000  
                              l8342 0000                                l8334 0000  
                              l8326 0000                                l8318 0000  
                              l8270 0000                                l4894 01ED  
                              l8238 007B                                l8502 0000  
                              l8430 0000                                l7528 0000  
                              l7544 0000                                l7624 0000  
                              l7616 0000                                l7608 0000  
                              l7640 0D50                                l7632 0000  
                              l8096 0000                                l8088 0000  
                              l8168 0000                                l8192 0000  
                              l8184 0000                                l8176 0000  
                              l8360 0000                                l8352 013A  
                              l8344 0000                                l8336 0000  
                              l8328 0000                                l8280 0000  
                              l8272 0000                                l8264 0096  
                              l8256 008E                                l8248 0087  
                              l8416 01F1                                l8504 0FE3  
                              l8440 0000                                l8432 0000  
                              l8424 0000                                l7546 0C81  
                              l7570 075A                                l7626 0000  
                              l7618 0000                                l7634 0000  
                              l7730 038C                                l7810 0000  
                              l8098 0000                                l8194 0000  
                              l8186 0000                                l8178 0000  
                              l8370 0000                                l8362 0000  
                              l8346 0000                                l8338 0000  
                              l8290 0000                                l8282 0000  
                              l8274 0000                                l8266 0000  
                              l8506 0000                                l8450 0F69  
                              l8442 0F5A                                l8434 0000  
                              l8426 0000                                l7564 0000  
                              l7580 07FA                                l7628 0000  
                              l7652 0D75                                l7644 0D69  
                              l7636 0000                                l7660 0000  
                              l7820 0000                                l7900 0000  
                              l8196 0000                                l8188 0000  
                              l8380 0000                                l8372 0000  
                              l8364 0000                                l8356 0143  
                              l8348 0000                                l8292 0000  
                              l8284 0000                                l8276 0000  
                              l8268 0000                                l8508 0FFE  
                              l8436 0000                                l8428 0000  
                              l7574 0774                                l7566 0000  
                              l7590 0000                                l7662 0000  
                              l7734 0394                                l7750 0000  
                              l7814 0000                                l7822 0000  
                              l7830 0000                                l7902 0000  
                              l8198 0000                                l8390 0000  
                              l8382 0000                                l8366 0000  
                              l8358 0000                                l8294 0000  
                              l8286 0000                                l8278 0000  
                              l8454 0000                                l8438 0000  
                              l7592 0000                                l7664 0CF5  
                              l7656 0000                                l7736 0000  
                              l7728 0000                                l7744 0000  
                              l5984 0000                                l7816 0000  
                              l7824 0000                                l7832 0000  
                              l7840 0000                                l7920 0000  
                              l7912 0000                                l8384 0000  
                              l8376 0184                                l8368 0000  
                              l8296 0000                                l8288 0000  
                              l8472 0000                                l8464 0000  
                              l8448 0000                                l7578 0000  
                              l7586 07FD                                l7594 0000  
                              l7738 0000                                l7770 0000  
                              l7818 0E67                                l7826 0000  
                              l7834 0000                                l7842 0000  
                              l7850 0000                                l7906 0000  
                              l7922 0000                                l7930 0000  
                              l8386 0000                                l8378 0000  
                              l8298 0000                                l8482 0000  
                              l8474 0000                                l8466 0000  
                              l5899 07CA                                l7596 0000  
                              l7588 0000                                l7748 07E0  
                              l7764 0788                                l7772 07AD  
                              l7756 0000                                l7828 0000  
                              l7836 0000                                l7852 0000  
                              l7844 0000                                l7860 0000  
                              l7908 0000                                l7924 0000  
                              l7932 0000                                l7940 0000  
                              l8396 01B5                                l8388 0000  
                              l8476 0000                                l8468 0F9A  
                              l7598 0000                                l7838 0000  
                              l7846 0000                                l7862 0000  
                              l7854 0000                                l7870 0723  
                              l7918 0000                                l7942 0000  
                              l7934 0000                                l7950 0000  
                              l8398 0000                                l8494 0000  
                              l8486 0FAE                                l8478 0FA2  
                              l7792 0000                                l7776 0000  
                              l7848 0000                                l7864 0000  
                              l7856 0000                                l7872 0000  
                              l7944 0000                                l7936 0000  
                              l7952 0000                                l7960 0000  
                              l8496 0000                                l7786 06B4  
                              l7778 0000                                l7858 0000  
                              l7866 0000                                l7874 0000  
                              l7882 0000                                l7890 0000  
                              l7946 0000                                l7938 0000  
                              l7954 0000                                l7970 04FE  
                              l7796 0000                                l7788 0000  
                              l7876 0739                                l7884 07B9  
                              l7948 0000                                l7956 0000  
                              l7980 0000                                l7972 0000  
                              l7964 04FB                                l7798 06DF  
                              l7878 07B6                                l7886 073A  
                              l7990 0000                                l7982 0000  
                              l7974 0000                                l7958 0000  
              __end_of_checksumCalc 0778                                l7888 0745  
                              l7896 06F5                                l7992 0000  
                              l7984 0000                                l7976 0000  
                              l7898 0000                                l7994 0000  
                              l7986 0000                                l7978 0000  
                              l7996 0000                                l7988 0000  
                              l7998 0000                                STR_1 082A  
                              STR_2 081E                                STR_3 0810  
                              STR_4 0836                                _BRGH 04C2  
                              _T0IE 005D                                _T0IF 005A  
                              _CREN 00C4                                _T0CS 040D  
                              u1115 06C7                                u1225 04EA  
                              u1305 04A0                                u1075 0796  
                              u1155 0DC4                                u1315 04B2  
                              u1255 0541                                u1265 0561  
                              u1275 05D4                                u1355 0105  
                              u1285 05F4                                u1365 01CF  
                              u1607 03B2                                u1617 03C4  
                              u1707 0248                                u1627 03E5  
                              u1547 0F2C                                u1717 025A  
                              u1637 0403                                u1557 0F3B  
                              u1807 0350                                u1727 026E  
                              u1647 0421                                u1567 0F48  
                              u1817 0363                                u1737 027F  
                              u1657 0438                                u1577 0FC1  
                              u1827 0E20                                u1747 02E6  
                              u1667 0449                                u1587 0FDC  
                              u1837 0E32                                u1757 02F6  
                              u1677 045E                                u1597 0FF4  
                              u1847 0E46                                u1767 0307  
                              u1687 021D                                u1857 0E5A  
                              u1777 0318                                u1697 0233  
                              u1787 032A                                _PEIE 005E  
                              u1797 033D                                _INTE 005C  
                              _INTF 0059                                _RCIE 0465  
                              _RCIF 0065                                _OERR 00C1  
                              _TMR0 0001                                _SPEN 00C7  
                              _TXEN 04C5                                _TXIF 0064  
                              _SYNC 04C4             halfclockdelay@downcount 0021  
                              _main 0F14                                btemp 007E  
         __size_of_UART_send_String 0014                                start 000D  
         __end_of_eepromReadLogPage 04B7                     ??_eepromReadLog 0029  
                   __end_of_i2cNack 072F                     __end_of_i2cRead 06A0  
                       i2cWrite@ack 0024                     ??_i2cInitialize 0024  
                   __end_of_i2cStop 074D                               ??_isr 0077  
                             ?_main 0049                               _BRG16 04DB  
                             _ANSEL 011E                     __end_of___lldiv 06E8  
                   __end_of___llmod 07B6                               i1l937 0000  
                             _RCREG 001A                               _TMR1H 000F  
                             _TMR1L 000E                               _SPBRG 0099  
                             _PORTA 0005                               _PORTB 0006  
                             _PORTC 0007                               _TRISA 0085  
                             _TRISB 0086                               _TRISC 0087  
                             _TXREG 0019                          i1memset@p1 0074  
               ___lmul@multiplicand 0024                     __end_of_logSave 0284  
                   __end_of_sda_out 073A                               _timer 005A  
                   __end_of_scl_out 0724                      __pbitbssCOMMON 03D0  
                             pclath 000A                          _i2cRestart 07F9  
                             status 0003                               wtemp0 007E  
                  __end_ofi1_memset 0EF9                    ??_eepromReadByte 0028  
                    _checksumVerify 0D4C              __size_of_initInterrupt 001D  
                      __end_of_main 1000                     comandoRx@i_6106 0033  
                   comandoRx@i_6109 0039                        i2cWrite@data 0023  
                  __end_of_i2cStart 0745                    __end_of_i2cWrite 0715  
              __size_of_getClockCmd 0035                              ??_main 004D  
            __size_of_readLogStatus 003E                     _readTemperature 0062  
                  ___llmod@dividend 0031                        ?_setTimerCmd 0070  
          __size_of_eepromWriteByte 000F                              _ANSELH 011F  
                            i1l5815 0000                __size_of_getTimerCmd 001E  
                            i1l4947 0ED6                              _INTEDG 040E  
                            i1l7532 0000                              i1l7700 0000  
                            i1l7702 0EB1                              i1l7710 0EB7  
                            i1l7536 0EE3                              i1l7552 0000  
                            i1l7560 0F0B                              i1l7720 0000  
                            i1l7704 0000                              i1l7802 0000  
                            i1l7562 0000                              i1l7554 0000  
                            i1l7722 0000                              i1l7556 0000  
                            i1l7548 0000                              i1l7724 0000  
                            i1l7716 0000                              i1l7708 0000  
                            i1l7806 0000                              i1l7558 0000  
                            i1l7718 0000                              i1l7808 0EE7  
                            i1l7680 0000                              i1l7672 0000  
                            i1l7690 0000                              i1l7682 0000  
                            i1l7674 0E8C                              i1l7666 0000  
                            i1l7692 0000                              i1l7684 0E97  
                            i1l7696 0000                              i1l7698 0000  
                            _TMR1IE 0460                              _TMR1IF 0060  
                            _TMR1CS 0081                              _SPBRGH 009A  
                            _TMR1ON 0080                              _TRISB4 0434  
                            _TRISB5 0435                              _TRISB6 0436  
                            _TRISB7 0437                           ??_i2cNack 0023  
            __end_of_checksumVerify 0D77                           ??_i2cRead 0023  
                  ??_bufferCreator2 0076                           ??_i2cStop 0023  
__size_of_sendTriggerMeasurementCmd 000F                              _i2cAck 06E8  
        __size_of_eepromReadLogPage 003C                              ___lmul 07C6  
                            ___wmul 038A                              _dataRX 0061  
                  __end_of_initGPIO 0CD3                         readTemp@aux 0041  
                         ??___lldiv 0028                    __end_of_initUART 0CA8  
                         ??___llmod 0035               eepromReadLogPage@addr 0026  
             eepromReadLogPage@buff 0028                    __end_of_initVars 0463  
                  __end_of_readTemp 068B                              _memcpy 0CF0  
                            _memset 0C7F                              clrloop 0C78  
                         ??_logSave 0045                           ??_sda_out 0022  
             __size_of_checksumCalc 0021                    __end_of_resposta 07C6  
                         ??_scl_out 0022                              saved_w 007E  
                    _rxBufferLength 007B                       _initInterrupt 0CD3  
                       ?_i2cRestart 0070                     ?_checksumVerify 0070  
                  _UART_send_String 0E66                       _readLogStatus 0DDB  
 __end_of_sendTriggerMeasurementCmd 001E                      __pcstackCOMMON 0070  
                      __pidataBANK0 0000                        _checksumCalc 0757  
                      ?_startLogCmd 0070               __end_of_UART_get_char 0EE5  
                         ?i1_memset 0070                      ?_initInterrupt 0070  
                __size_of_comandoRx 01D2                  __size_of_jdyConfig 004D  
           __size_of_halfclockdelay 0006                          __pbssBANK0 005C  
                        __pbssBANK1 00A0                          __pbssBANK2 0120  
                         ?_i2cStart 0070                           ?_i2cWrite 0070  
                _readTemperatureDec 0063                  __size_of_initAht10 000F  
                    _flagChangeName 03D0                   eepromReadLog@addr 0026  
                    ?_readLogStatus 0070                   eepromReadLog@buff 0028  
                 ??_eepromWriteByte 0029                             ?_i2cAck 0070  
                        __pmaintext 0F14                             ?___lmul 0020  
                           ?___wmul 0020                          __pintentry 0004  
                        _deviceName 015C                          __ptext1000 04E0  
                        __ptext1001 000F                          __ptext1010 0745  
                        __ptext1002 001E                          __ptext1011 073A  
                        __ptext1003 07F9                          __ptext1020 0E66  
                        __ptext1012 07B6                          __ptext1004 037B  
                        __ptext1021 06A0                          __ptext1013 072F  
                        __ptext1005 0E19                          __ptext1030 0C73  
                        __ptext1022 0778                          __ptext1014 0715  
                        __ptext1006 0724                          __ptext1031 0757  
                        __ptext1023 07C6                          __ptext1015 0DDB  
                        __ptext1007 06E8                          __ptext1032 0C7F  
                        __ptext1024 038A                          __ptext1016 0CA8  
                        __ptext1008 068B                          __ptext1033 074D  
                        __ptext1025 0CF0                          __ptext1017 0D0D  
                        __ptext1009 06F3                          __ptext1034 0C93  
                        __ptext1026 0D4C                          __ptext1018 0D2B  
                        __ptext1035 0E80                          __ptext1027 0CD3  
                        __ptext1019 0DA6                          __ptext1036 0EF9  
                        __ptext1028 0CBD                             ?_memcpy 0020  
                        __ptext1037 0EE5                          __ptext1029 07FA  
                        __ptext1038 0EDF                          __ptext1039 0000  
                           ?_memset 0020                      ___lmul@product 0028  
                           _T1CKPS0 0084                             _T1CKPS1 0085  
                 UART_send_String@i 0024                 __size_of_i2cRestart 0001  
                           _T1OSCEN 0083                          ??i1_memset 0074  
                checksumCalc@buffer 0023             __size_of_UART_send_char 000A  
                         ?_initGPIO 0070                          ??_i2cStart 0023  
                        ??_i2cWrite 0023                           ?_initUART 0070  
              __size_of_setTimerCmd 0021                           ?_initVars 0070  
                         ?_readTemp 0070                       checksumCalc@i 0025  
                           _i2cNack 0724                             _i2cRead 068B  
                           _i2cStop 0745                     __size_of_i2cAck 000B  
                           _nT1SYNC 0082                   checksumVerify@len 0023  
                 __end_of_comandoRx 01FF                           ?_resposta 0070  
             __end_of_eepromReadLog 04E0                   __end_of_jdyConfig 0E66  
                   __size_of___lmul 0033                             ___lldiv 06A0  
                   __size_of___wmul 0019                             ___llmod 0778  
                    _readDataBuffer 0120               __end_of_i2cInitialize 0C77  
                      readTemp@aux2 0040                        readTemp@buff 003A  
                   __size_of_memcpy 001D                     __size_of_memset 0014  
                 __end_of_initAht10 002D                     ??_initInterrupt 0020  
                           _logSave 01FF                        __size_of_isr 005F  
                           _sda_out 072F                             _scl_out 0715  
                           _timeNow 0054                end_of_initialization 0DA3  
                        ??_initGPIO 0020                          ??_initUART 0020  
                   ??_readLogStatus 0026                             memcpy@d 0025  
                           memcpy@n 0021                             memcpy@s 0026  
                        ??_initVars 0029                             memset@c 0020  
                           memset@n 0022                             memset@p 0025  
                        ??_readTemp 0036                      _flagRxBufferOk 03D3  
                   ___lldiv@divisor 0020                     ___lldiv@counter 002C  
                     ??_getClockCmd 0026                          ??_resposta 0021  
                    logSave@auxAddr 0047                __size_of_startLogCmd 00F7  
          __end_of_UART_send_String 0E7A                 eepromWriteByte@addr 0026  
               eepromWriteByte@data 0028                       ??_getTimerCmd 0026  
                        comandoRx@i 003B                    ??_checksumVerify 0020  
                    _halfclockdelay 07FA                        ??_i2cRestart 0023  
                         i2cWrite@x 0025                      _flagTryConnect 03D4  
               comandoRx@logsToSend 003D                          _stopLogCmd 0CA8  
                    __end_of_i2cAck 06F3                 comandoRx@numOfBytes 0035  
                    __end_of___lmul 07F9                     checksumCalc@chk 0024  
                   checksumCalc@len 0020                      __end_of___wmul 03A3  
                         i1memset@c 0070                           i1memset@n 0072  
                         i1memset@p 0075                        sda_out@value 0022  
           __size_of_eepromReadByte 0018                      __end_of_memcpy 0D0D  
                    __end_of_memset 0C93                 __end_of_getClockCmd 0DDB  
                __end_of_i2cRestart 07FA                 start_initialization 0D77  
                    _UART_send_char 074D              __end_of_halfclockdelay 0800  
                   _eepromWriteByte 037B                         __end_of_isr 0EDF  
                 __size_ofi1_memset 0014                 __end_of_getTimerCmd 0D2B  
                   ___llmod@divisor 002D                   __size_of_i2cStart 000B  
                   ___llmod@counter 0035                   __size_of_i2cWrite 0022  
                          ??_i2cAck 0023                     checksumVerify@i 0024  
        ?_sendTriggerMeasurementCmd 0070                            ??___lmul 0028  
                          ??___wmul 0024                         __pdataBANK0 0050  
                          ??_memcpy 0023             __size_of_bufferCreator2 001B  
                          ??_memset 0024                   comandoRx@readData 002D  
            __end_of_UART_send_char 0757                         __pbssCOMMON 007B  
                     __pcstackBANK0 0020                     ?_halfclockdelay 0070  
                  bufferCreator2@ch 0076                  eepromReadByte@addr 0026  
                eepromReadByte@buff 0028                  eepromReadLogPage@i 002A  
                       ?_stopLogCmd 0070                            ?_i2cNack 0070  
                          ?_i2cRead 0070                   __size_of_initGPIO 0016  
                          ?_i2cStop 0070                   __size_of_initUART 0015  
            __size_of_UART_get_char 0006                   __size_of_initVars 00C0  
                 __size_of_readTemp 01AB               UART_send_String@lenth 0023  
                       _getClockCmd 0DA6                           __ptext993 002D  
                         __ptext994 03A3                           __ptext995 01FF  
                         __ptext996 047B                           __ptext997 0463  
                         __ptext998 04B7                           __ptext999 0284  
                          ?___lldiv 0020                            ?___llmod 002D  
                 __size_of_resposta 0010                           _comandoRx 002D  
                  UART_send_char@ch 0020                           __pstrings 0800  
                         _jdyConfig 0E19                       _flagConection 03D1  
                         _contTimer 005C                           __pswtext1 083F  
           __end_of_eepromWriteByte 038A                     ?_UART_send_char 0070  
                          ?_logSave 0070                            ?_sda_out 0070  
                         _initAht10 001E                            ?_scl_out 0070  
                      scl_out@value 0022                         _getTimerCmd 0D0D  
                     ??_setTimerCmd 0026                           _logStatus 03D5  
                UART_send_String@ch 0021                   interrupt_function 0004  
                    ___wmul@product 0024                           _numOfLogs 005E  
            checksumVerify@checksum 0022                       _serialTimeOut 007D  
                       _bufferTxLen 0060                          ?_comandoRx 0070  
                          i2cRead@x 0024                      _eepromReadByte 0463  
                     _timeToConnect 0066                          ?_jdyConfig 0070  
                       __stringbase 080F                   ___wmul@multiplier 0020  
                         _startTime 0050                 __size_of_stopLogCmd 0015  
                     _UART_get_char 0EDF                            i1_memset 0EE5  
                 ?_UART_send_String 0021                          ?_initAht10 0070  
             __end_of_initInterrupt 0CF0                  ??_UART_send_String 0024  
                 ___lmul@multiplier 0020              __size_of_eepromReadLog 0029  
                          _i2cStart 073A                            _i2cWrite 06F3  
            __size_of_i2cInitialize 0004               __end_of_readLogStatus 0E19  
               __end_of_setTimerCmd 0D4C                    __size_of_i2cNack 000B  
                  __size_of_i2cRead 0015                    __size_of_i2cStop 0008  
            __end_of_eepromReadByte 047B                      _bufferCreator2 0EF9  
                     ?_checksumCalc 0020                       ??_startLogCmd 0029  
                  __size_of___lldiv 0048                    __size_of___llmod 003E  
                  ?_eepromWriteByte 0026                      ?_UART_get_char 0070  
                       _readUmidity 0064                    __size_of_logSave 0085  
                  __size_of_sda_out 000B                    __size_of_scl_out 000F  
                          _bufferTx 00A0                            _initGPIO 0CBD  
                          _initUART 0C93                        _timeBlinkLed 0065  
                          _initVars 03A3                            _readTemp 04E0  
                     __size_of_main 00EC                            _newTimer 0058  
                          clear_ram 0C77                            _rxBuffer 013E  
            __end_of_bufferCreator2 0F14                            _resposta 07B6  
                         resposta@i 0021         ??_sendTriggerMeasurementCmd 0026  
                    ??_checksumCalc 0021                       _eepromReadLog 04B7  
                   ?_eepromReadByte 0026                            main@argc 0049  
                       ??_comandoRx 002C                            main@argv 004B  
                     _i2cInitialize 0C73                         ??_jdyConfig 0025  
                  ??_halfclockdelay 0020                         ??_initAht10 0026  
               __end_of_startLogCmd 037B                            memcpy@d1 0024  
                          memcpy@s1 0020                            memset@p1 0024  
                       _rxBufferPos 007C                         _setTimerCmd 0D2B  
                          intlevel1 0000                        ??_stopLogCmd 0026  
            comandoRx@readData_6108 0030                    ___lldiv@dividend 0024  
                         stringcode 080A             __size_of_checksumVerify 002B  
                   ?_bufferCreator2 0070                        ?_getClockCmd 0070  
                    ?_eepromReadLog 0026                    ??_UART_send_char 0020  
                    ?_i2cInitialize 0020                     ??_UART_get_char 0070  
                  ___lldiv@quotient 0028                  __end_of_stopLogCmd 0CBD  
                   _flagRespostaBLE 03D2                            stringdir 080A  
                          stringtab 0800           _sendTriggerMeasurementCmd 000F  
                      ?_getTimerCmd 0070  
