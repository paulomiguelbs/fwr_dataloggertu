

HI-TECH Software PIC PRO Macro Assembler V9.83 build 10920 
                                                                                               Sun Oct 29 19:21:58 2023

HI-TECH Software Omniscient Code Generator (PRO mode) build 10920
     1                           	processor	16F690
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	config,global,class=CONFIG,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	strings,global,class=STRING,delta=2
     7                           	psect	cinit,global,class=CODE,delta=2
     8                           	psect	bitbssCOMMON,global,bit,class=COMMON,space=1,delta=1
     9                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    14                           	psect	clrtext,global,class=CODE,delta=2
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,delta=2
    18                           	psect	swtext1,local,class=CONST,delta=2
    19                           	psect	text1000,local,class=CODE,delta=2
    20                           	psect	text1004,local,class=CODE,delta=2
    21                           	psect	text1014,local,class=CODE,delta=2
    22                           	psect	text1015,local,class=CODE,delta=2
    23                           	psect	text1016,local,class=CODE,delta=2
    24                           	psect	text1017,local,class=CODE,delta=2
    25                           	psect	text1018,local,class=CODE,delta=2
    26                           	psect	text1026,local,class=CODE,delta=2
    27                           	psect	text1027,local,class=CODE,delta=2
    28                           	psect	text1029,local,class=CODE,delta=2
    29                           	psect	text1031,local,class=CODE,delta=2
    30                           	psect	text1033,local,class=CODE,delta=2
    31                           	psect	text1034,local,class=CODE,delta=2
    32                           	psect	intentry,global,class=CODE,delta=2
    33                           	psect	text1038,local,class=CODE,delta=2
    34                           	psect	pa_nodes,global,class=CODE,delta=2
    35                           	dabs	1,0x7E,2
    36  000A                     	;#
    37                           
    38                           	psect	config
    39  2007  FFD4               	dw	65492	;#
    40                           
    41                           	psect	idataBANK0
    42  0000                     __pidataBANK0:	
    43  0005                     _PORTA	set	5
    44  0006                     _PORTB	set	6
    45  0007                     _PORTC	set	7
    46  001A                     _RCREG	set	26
    47  0001                     _TMR0	set	1
    48  000F                     _TMR1H	set	15
    49  000E                     _TMR1L	set	14
    50  0019                     _TXREG	set	25
    51  00C4                     _CREN	set	196
    52  005F                     _GIE	set	95
    53  005C                     _INTE	set	92
    54  0059                     _INTF	set	89
    55  00C1                     _OERR	set	193
    56  005E                     _PEIE	set	94
    57  0034                     _RB4	set	52
    58  0036                     _RB6	set	54
    59  0038                     _RC0	set	56
    60  0039                     _RC1	set	57
    61  003C                     _RC4	set	60
    62  0065                     _RCIF	set	101
    63  00C6                     _RX9	set	198
    64  00C7                     _SPEN	set	199
    65  005D                     _T0IE	set	93
    66  005A                     _T0IF	set	90
    67  0084                     _T1CKPS0	set	132
    68  0085                     _T1CKPS1	set	133
    69  0083                     _T1OSCEN	set	131
    70  0081                     _TMR1CS	set	129
    71  0060                     _TMR1IF	set	96
    72  0080                     _TMR1ON	set	128
    73  0064                     _TXIF	set	100
    74  0082                     _nT1SYNC	set	130
    75  0099                     _SPBRG	set	153
    76  009A                     _SPBRGH	set	154
    77  0085                     _TRISA	set	133
    78  0086                     _TRISB	set	134
    79  0087                     _TRISC	set	135
    80  04DB                     _BRG16	set	1243
    81  04C2                     _BRGH	set	1218
    82  040E                     _INTEDG	set	1038
    83  0408                     _PS0	set	1032
    84  0409                     _PS1	set	1033
    85  040A                     _PS2	set	1034
    86  040B                     _PSA	set	1035
    87  0465                     _RCIE	set	1125
    88  04C4                     _SYNC	set	1220
    89  040D                     _T0CS	set	1037
    90  0460                     _TMR1IE	set	1120
    91  0434                     _TRISB4	set	1076
    92  0435                     _TRISB5	set	1077
    93  0436                     _TRISB6	set	1078
    94  0437                     _TRISB7	set	1079
    95  04C6                     _TX9	set	1222
    96  04C5                     _TXEN	set	1221
    97  011E                     _ANSEL	set	286
    98  011F                     _ANSELH	set	287
    99                           
   100                           	psect	strings
   101  0205                     __pstrings:	
   102  0205                     stringtab:	
   103                           ;	global	stringdir,stringtab,__stringbase
   104                           
   105  0205                     stringcode:	
   106                           ;	String table - string pointers are 1 byte each
   107                           
   108  0205                     stringdir:	
   109  0205  3002               	movlw	high stringdir
   110  0206  008A               	movwf	10
   111  0207  0804               	movf	4,w
   112  0208  0A84               	incf	4,f
   113  0209  0782               	addwf	2,f
   114  020A                     __stringbase:	
   115  020A  3400               	retlw	0
   116  020B                     STR_3:	
   117  020B  3441               	retlw	65	;'A'
   118  020C  3454               	retlw	84	;'T'
   119  020D  342B               	retlw	43	;'+'
   120  020E  3453               	retlw	83	;'S'
   121  020F  3454               	retlw	84	;'T'
   122  0210  3441               	retlw	65	;'A'
   123  0211  3452               	retlw	82	;'R'
   124  0212  3454               	retlw	84	;'T'
   125  0213  3445               	retlw	69	;'E'
   126  0214  344E               	retlw	78	;'N'
   127  0215  3431               	retlw	49	;'1'
   128  0216  340D               	retlw	13
   129  0217  340A               	retlw	10
   130  0218  3400               	retlw	0
   131  0219                     STR_2:	
   132  0219  3441               	retlw	65	;'A'
   133  021A  3454               	retlw	84	;'T'
   134  021B  342B               	retlw	43	;'+'
   135  021C  3441               	retlw	65	;'A'
   136  021D  3444               	retlw	68	;'D'
   137  021E  3456               	retlw	86	;'V'
   138  021F  3449               	retlw	73	;'I'
   139  0220  344E               	retlw	78	;'N'
   140  0221  3431               	retlw	49	;'1'
   141  0222  340D               	retlw	13
   142  0223  340A               	retlw	10
   143  0224  3400               	retlw	0
   144  0225                     STR_1:	
   145  0225  3441               	retlw	65	;'A'
   146  0226  3454               	retlw	84	;'T'
   147  0227  342B               	retlw	43	;'+'
   148  0228  3453               	retlw	83	;'S'
   149  0229  344C               	retlw	76	;'L'
   150  022A  3445               	retlw	69	;'E'
   151  022B  3445               	retlw	69	;'E'
   152  022C  3450               	retlw	80	;'P'
   153  022D  3432               	retlw	50	;'2'
   154  022E  340D               	retlw	13
   155  022F  340A               	retlw	10
   156  0230  3400               	retlw	0
   157  0231                     STR_4:	
   158  0231  3441               	retlw	65	;'A'
   159  0232  3454               	retlw	84	;'T'
   160  0233  342B               	retlw	43	;'+'
   161  0234  3452               	retlw	82	;'R'
   162  0235  3453               	retlw	83	;'S'
   163  0236  3454               	retlw	84	;'T'
   164  0237  340D               	retlw	13
   165  0238  340A               	retlw	10
   166  0239  3400               	retlw	0
   167                           
   168                           	psect	cinit
   169  026F                     start_initialization:	
   170  026F  305C               	movlw	low __pbssBANK0
   171                           
   172                           ; Clear objects allocated to BITCOMMON
   173  0270  01FA               	clrf	(__pbitbssCOMMON/(0+8))& (0+127)
   174                           
   175                           ; Clear objects allocated to COMMON
   176  0271  01FB               	clrf	__pbssCOMMON& (0+127)
   177  0272  01FC               	clrf	(__pbssCOMMON+1)& (0+127)
   178  0273  01FD               	clrf	(__pbssCOMMON+2)& (0+127)
   179                           
   180                           ; Clear objects allocated to BANK0
   181  0274  1383               	bcf	3,7	;select IRP bank0
   182  0275  0084               	movwf	4
   183  0276  3067               	movlw	low (__pbssBANK0+11)
   184  0277  118A  2360  118A   	fcall	clear_ram
   185                           
   186                           ; Clear objects allocated to BANK1
   187  027A  30A0               	movlw	low __pbssBANK1
   188  027B  0084               	movwf	4
   189  027C  30E6               	movlw	low (__pbssBANK1+70)
   190  027D  118A  2360  118A   	fcall	clear_ram
   191  0280  3020               	movlw	low __pbssBANK2
   192                           
   193                           ; Clear objects allocated to BANK2
   194  0281  1783               	bsf	3,7	;select IRP bank2
   195  0282  0084               	movwf	4
   196  0283  305C               	movlw	low (__pbssBANK2+60)
   197  0284  118A  2360         	fcall	clear_ram
   198                           
   199                           ;initializer for _startTime
   200  0286  30B0               	movlw	176
   201  0287  00D0               	movwf	__pdataBANK0& (0+127)
   202  0288  30C3               	movlw	195
   203  0289  00D1               	movwf	(__pdataBANK0+1)& (0+127)
   204  028A  30CF               	movlw	207
   205  028B  00D2               	movwf	(__pdataBANK0+2)& (0+127)
   206  028C  3061               	movlw	97
   207  028D  00D3               	movwf	(__pdataBANK0+3)& (0+127)
   208                           
   209                           ;initializer for _timeNow
   210  028E  30B0               	movlw	176
   211  028F  00D4               	movwf	(__pdataBANK0+4)& (0+127)
   212  0290  30C3               	movlw	195
   213  0291  00D5               	movwf	(__pdataBANK0+5)& (0+127)
   214  0292  30CF               	movlw	207
   215  0293  00D6               	movwf	(__pdataBANK0+6)& (0+127)
   216  0294  3061               	movlw	97
   217  0295  00D7               	movwf	(__pdataBANK0+7)& (0+127)
   218                           
   219                           ;initializer for _newTimer
   220  0296  3001               	movlw	1
   221  0297  00D8               	movwf	(__pdataBANK0+8)& (0+127)
   222  0298  01D9               	clrf	(__pdataBANK0+9)& (0+127)
   223                           
   224                           ;initializer for _timer
   225  0299  00DA               	movwf	(__pdataBANK0+10)& (0+127)
   226  029A  01DB               	clrf	(__pdataBANK0+11)& (0+127)
   227  029B                     end_of_initialization:	
   228                           ;End of C runtime variable initialization code
   229                           
   230  029B  0183               	clrf	3
   231  029C  118A  280F         	ljmp	_main	;jump to C main() function
   232                           
   233                           	psect	bitbssCOMMON
   234  03D0                     __pbitbssCOMMON:	
   235  03D0                     _flagConection:	
   236  03D0                     	ds	1
   237  03D1                     _flagRespostaBLE:	
   238  03D1                     	ds	1
   239  03D2                     _flagRxBufferOk:	
   240  03D2                     	ds	1
   241  03D3                     _flagTryConnect:	
   242  03D3                     	ds	1
   243  03D4                     _logStatus:	
   244  03D4                     	ds	1
   245                           
   246                           	psect	bssCOMMON
   247  007B                     __pbssCOMMON:	
   248  007B                     _rxBufferLength:	
   249  007B                     	ds	1
   250  007C                     _rxBufferPos:	
   251  007C                     	ds	1
   252  007D                     _serialTimeOut:	
   253  007D                     	ds	1
   254                           
   255                           	psect	bssBANK0
   256  005C                     __pbssBANK0:	
   257  005C                     _contTimer:	
   258  005C                     	ds	2
   259  005E                     _numOfLogs:	
   260  005E                     	ds	2
   261  0060                     _bufferTxLen:	
   262  0060                     	ds	1
   263  0061                     _dataRX:	
   264  0061                     	ds	1
   265  0062                     _readTemperature:	
   266  0062                     	ds	1
   267  0063                     _readTemperatureDec:	
   268  0063                     	ds	1
   269  0064                     _readUmidity:	
   270  0064                     	ds	1
   271  0065                     _timeBlinkLed:	
   272  0065                     	ds	1
   273  0066                     _timeToConnect:	
   274  0066                     	ds	1
   275                           
   276                           	psect	dataBANK0
   277  0050                     __pdataBANK0:	
   278  0050                     _startTime:	
   279  0050                     	ds	4
   280  0054                     _timeNow:	
   281  0054                     	ds	4
   282  0058                     _newTimer:	
   283  0058                     	ds	2
   284  005A                     _timer:	
   285  005A                     	ds	2
   286                           
   287                           	psect	bssBANK1
   288  00A0                     __pbssBANK1:	
   289  00A0                     _bufferTx:	
   290  00A0                     	ds	40
   291  00C8                     _cmd:	
   292  00C8                     	ds	30
   293                           
   294                           	psect	bssBANK2
   295  0120                     __pbssBANK2:	
   296  0120                     _readDataBuffer:	
   297  0120                     	ds	30
   298  013E                     _rxBuffer:	
   299  013E                     	ds	30
   300                           
   301                           	psect	clrtext
   302  0360                     clear_ram:	
   303                           ;	Called with FSR containing the base address, and
   304                           ;	W with the last address+1
   305                           
   306  0360  0064               	clrwdt	;clear the watchdog before getting into this loop
   307  0361                     clrloop:	
   308  0361  0180               	clrf	0	;clear RAM location pointed to by FSR
   309  0362  0A84               	incf	4,f	;increment pointer
   310  0363  0604               	xorwf	4,w	;XOR with final address
   311  0364  1903               	btfsc	3,2	;have we reached the end yet?
   312  0365  3400               	retlw	0	;all done for this memory range, return
   313  0366  0604               	xorwf	4,w	;XOR again to restore value
   314  0367  2B61               	goto	clrloop	;do the next byte
   315                           
   316                           	psect	cstackCOMMON
   317  0070                     __pcstackCOMMON:	
   318  0070                     ?_i2cStart:	
   319  0070                     ?_scl_out:	
   320                           ; 0 bytes @ 0x0
   321                           
   322  0070                     ?_sda_out:	
   323                           ; 0 bytes @ 0x0
   324                           
   325  0070                     ?_initGPIO:	
   326                           ; 0 bytes @ 0x0
   327                           
   328  0070                     ?_initInterrupt:	
   329                           ; 0 bytes @ 0x0
   330                           
   331  0070                     ?_initVars:	
   332                           ; 0 bytes @ 0x0
   333                           
   334  0070                     ?_jdyConfig:	
   335                           ; 0 bytes @ 0x0
   336                           
   337  0070                     ?_logSave:	
   338                           ; 0 bytes @ 0x0
   339                           
   340  0070                     ?_comandoRx:	
   341                           ; 0 bytes @ 0x0
   342                           
   343  0070                     ?_checksumVerify:	
   344                           ; 0 bytes @ 0x0
   345                           
   346  0070                     ?_resposta:	
   347                           ; 1 bit 
   348                           
   349  0070                     ?_initUART:	
   350                           ; 0 bytes @ 0x0
   351                           
   352  0070                     ?_UART_send_char:	
   353                           ; 0 bytes @ 0x0
   354                           
   355  0070                     ??_UART_get_char:	
   356                           ; 0 bytes @ 0x0
   357                           
   358  0070                     ?_bufferCreator2:	
   359                           ; 0 bytes @ 0x0
   360                           
   361  0070                     ?_getClockCmd:	
   362                           ; 0 bytes @ 0x0
   363                           
   364  0070                     ?_setTimerCmd:	
   365                           ; 0 bytes @ 0x0
   366                           
   367  0070                     ?_getTimerCmd:	
   368                           ; 0 bytes @ 0x0
   369                           
   370  0070                     ?_startLogCmd:	
   371                           ; 0 bytes @ 0x0
   372                           
   373  0070                     ?_stopLogCmd:	
   374                           ; 0 bytes @ 0x0
   375                           
   376  0070                     ?_readLogStatus:	
   377                           ; 0 bytes @ 0x0
   378                           
   379  0070                     ?_halfclockdelay:	
   380                           ; 0 bytes @ 0x0
   381                           
   382  0070                     ?_i2cRestart:	
   383                           ; 0 bytes @ 0x0
   384                           
   385  0070                     ?_i2cStop:	
   386                           ; 0 bytes @ 0x0
   387                           
   388  0070                     ?_i2cAck:	
   389                           ; 0 bytes @ 0x0
   390                           
   391  0070                     ?_i2cNack:	
   392                           ; 0 bytes @ 0x0
   393                           
   394  0070                     ?_initAht10:	
   395                           ; 0 bytes @ 0x0
   396                           
   397  0070                     ?_sendTriggerMeasurementCmd:	
   398                           ; 0 bytes @ 0x0
   399                           
   400  0070                     ?_isr:	
   401                           ; 0 bytes @ 0x0
   402                           
   403  0070                     ?_UART_get_char:	
   404                           ; 0 bytes @ 0x0
   405                           
   406  0070                     ?_i2cWrite:	
   407                           ; 1 bytes @ 0x0
   408                           
   409  0070                     ?_i2cRead:	
   410                           ; 1 bytes @ 0x0
   411                           
   412  0070                     ?_readTemp:	
   413                           ; 1 bytes @ 0x0
   414                           
   415  0070                     ?i1_memset:	
   416                           ; 1 bytes @ 0x0
   417                           
   418  0070                     i1memset@c:	
   419                           ; 1 bytes @ 0x0
   420                           
   421                           
   422                           ; 2 bytes @ 0x0
   423  0070                     	ds	2
   424  0072                     i1memset@n:	
   425                           
   426                           ; 2 bytes @ 0x2
   427  0072                     	ds	2
   428  0074                     ??i1_memset:	
   429  0074                     i1memset@p1:	
   430                           ; 0 bytes @ 0x4
   431                           
   432                           
   433                           ; 1 bytes @ 0x4
   434  0074                     	ds	1
   435  0075                     i1memset@p:	
   436                           
   437                           ; 1 bytes @ 0x5
   438  0075                     	ds	1
   439  0076                     ??_bufferCreator2:	
   440  0076                     bufferCreator2@ch:	
   441                           ; 0 bytes @ 0x6
   442                           
   443                           
   444                           ; 1 bytes @ 0x6
   445  0076                     	ds	1
   446  0077                     ??_isr:	
   447                           
   448                           ; 0 bytes @ 0x7
   449  0077                     	ds	3
   450                           
   451                           	psect	cstackBANK0
   452  0020                     __pcstackBANK0:	
   453  0020                     ??_initGPIO:	
   454  0020                     ??_initInterrupt:	
   455                           ; 0 bytes @ 0x0
   456                           
   457  0020                     ??_checksumVerify:	
   458                           ; 0 bytes @ 0x0
   459                           
   460  0020                     ??_initUART:	
   461                           ; 0 bytes @ 0x0
   462                           
   463  0020                     ??_UART_send_char:	
   464                           ; 0 bytes @ 0x0
   465                           
   466  0020                     ?_i2cInitialize:	
   467                           ; 0 bytes @ 0x0
   468                           
   469  0020                     ??_halfclockdelay:	
   470                           ; 0 bytes @ 0x0
   471                           
   472  0020                     ?_memset:	
   473                           ; 0 bytes @ 0x0
   474                           
   475  0020                     ?_checksumCalc:	
   476                           ; 1 bytes @ 0x0
   477                           
   478  0020                     ?_memcpy:	
   479                           ; 1 bytes @ 0x0
   480                           
   481  0020                     ?___wmul:	
   482                           ; 1 bytes @ 0x0
   483                           
   484  0020                     ?___lmul:	
   485                           ; 2 bytes @ 0x0
   486                           
   487  0020                     ?___lldiv:	
   488                           ; 4 bytes @ 0x0
   489                           
   490  0020                     UART_send_char@ch:	
   491                           ; 4 bytes @ 0x0
   492                           
   493  0020                     checksumCalc@len:	
   494                           ; 1 bytes @ 0x0
   495                           
   496  0020                     memcpy@s1:	
   497                           ; 1 bytes @ 0x0
   498                           
   499  0020                     memset@c:	
   500                           ; 1 bytes @ 0x0
   501                           
   502  0020                     ___wmul@multiplier:	
   503                           ; 2 bytes @ 0x0
   504                           
   505  0020                     i2cInitialize@feq_K:	
   506                           ; 2 bytes @ 0x0
   507                           
   508  0020                     ___lmul@multiplier:	
   509                           ; 4 bytes @ 0x0
   510                           
   511  0020                     ___lldiv@divisor:	
   512                           ; 4 bytes @ 0x0
   513                           
   514                           
   515                           ; 4 bytes @ 0x0
   516  0020                     	ds	1
   517  0021                     ??_checksumCalc:	
   518  0021                     ??_resposta:	
   519                           ; 0 bytes @ 0x1
   520                           
   521  0021                     ?_UART_send_String:	
   522                           ; 0 bytes @ 0x1
   523                           
   524  0021                     UART_send_String@lenth:	
   525                           ; 0 bytes @ 0x1
   526                           
   527  0021                     halfclockdelay@downcount:	
   528                           ; 1 bytes @ 0x1
   529                           
   530  0021                     resposta@i:	
   531                           ; 1 bytes @ 0x1
   532                           
   533  0021                     memcpy@n:	
   534                           ; 1 bytes @ 0x1
   535                           
   536                           
   537                           ; 2 bytes @ 0x1
   538  0021                     	ds	1
   539  0022                     ??_scl_out:	
   540  0022                     ??_sda_out:	
   541                           ; 0 bytes @ 0x2
   542                           
   543  0022                     ??_UART_send_String:	
   544                           ; 0 bytes @ 0x2
   545                           
   546  0022                     UART_send_String@ch:	
   547                           ; 0 bytes @ 0x2
   548                           
   549  0022                     scl_out@value:	
   550                           ; 1 bytes @ 0x2
   551                           
   552  0022                     sda_out@value:	
   553                           ; 1 bytes @ 0x2
   554                           
   555  0022                     checksumVerify@checksum:	
   556                           ; 1 bytes @ 0x2
   557                           
   558  0022                     memset@n:	
   559                           ; 1 bytes @ 0x2
   560                           
   561  0022                     ___wmul@multiplicand:	
   562                           ; 2 bytes @ 0x2
   563                           
   564                           
   565                           ; 2 bytes @ 0x2
   566  0022                     	ds	1
   567  0023                     ??_i2cStart:	
   568  0023                     ??_memcpy:	
   569                           ; 0 bytes @ 0x3
   570                           
   571  0023                     ??_i2cRestart:	
   572                           ; 0 bytes @ 0x3
   573                           
   574  0023                     ??_i2cStop:	
   575                           ; 0 bytes @ 0x3
   576                           
   577  0023                     ??_i2cWrite:	
   578                           ; 0 bytes @ 0x3
   579                           
   580  0023                     ??_i2cRead:	
   581                           ; 0 bytes @ 0x3
   582                           
   583  0023                     ??_i2cAck:	
   584                           ; 0 bytes @ 0x3
   585                           
   586  0023                     ??_i2cNack:	
   587                           ; 0 bytes @ 0x3
   588                           
   589  0023                     UART_send_String@i:	
   590                           ; 0 bytes @ 0x3
   591                           
   592  0023                     i2cWrite@data:	
   593                           ; 1 bytes @ 0x3
   594                           
   595  0023                     i2cRead@read_data:	
   596                           ; 1 bytes @ 0x3
   597                           
   598  0023                     checksumVerify@len:	
   599                           ; 1 bytes @ 0x3
   600                           
   601  0023                     checksumCalc@buffer:	
   602                           ; 1 bytes @ 0x3
   603                           
   604                           
   605                           ; 1 bytes @ 0x3
   606  0023                     	ds	1
   607  0024                     ??_memset:	
   608  0024                     ??_jdyConfig:	
   609                           ; 0 bytes @ 0x4
   610                           
   611  0024                     ??_i2cInitialize:	
   612                           ; 0 bytes @ 0x4
   613                           
   614  0024                     ??___wmul:	
   615                           ; 0 bytes @ 0x4
   616                           
   617  0024                     i2cWrite@ack:	
   618                           ; 0 bytes @ 0x4
   619                           
   620  0024                     i2cRead@x:	
   621                           ; 1 bytes @ 0x4
   622                           
   623  0024                     checksumVerify@i:	
   624                           ; 1 bytes @ 0x4
   625                           
   626  0024                     checksumCalc@chk:	
   627                           ; 1 bytes @ 0x4
   628                           
   629  0024                     memcpy@d1:	
   630                           ; 1 bytes @ 0x4
   631                           
   632  0024                     memset@p1:	
   633                           ; 1 bytes @ 0x4
   634                           
   635  0024                     ___wmul@product:	
   636                           ; 1 bytes @ 0x4
   637                           
   638  0024                     ___lmul@multiplicand:	
   639                           ; 2 bytes @ 0x4
   640                           
   641  0024                     ___lldiv@dividend:	
   642                           ; 4 bytes @ 0x4
   643                           
   644                           
   645                           ; 4 bytes @ 0x4
   646  0024                     	ds	1
   647  0025                     i2cWrite@x:	
   648  0025                     checksumCalc@i:	
   649                           ; 1 bytes @ 0x5
   650                           
   651  0025                     memcpy@d:	
   652                           ; 1 bytes @ 0x5
   653                           
   654  0025                     memset@p:	
   655                           ; 1 bytes @ 0x5
   656                           
   657                           
   658                           ; 1 bytes @ 0x5
   659  0025                     	ds	1
   660  0026                     ?_eepromWriteByte:	
   661  0026                     ?_eepromReadLog:	
   662                           ; 0 bytes @ 0x6
   663                           
   664  0026                     ??_getClockCmd:	
   665                           ; 0 bytes @ 0x6
   666                           
   667  0026                     ??_setTimerCmd:	
   668                           ; 0 bytes @ 0x6
   669                           
   670  0026                     ??_getTimerCmd:	
   671                           ; 0 bytes @ 0x6
   672                           
   673  0026                     ??_stopLogCmd:	
   674                           ; 0 bytes @ 0x6
   675                           
   676  0026                     ??_readLogStatus:	
   677                           ; 0 bytes @ 0x6
   678                           
   679  0026                     ?_eepromReadLogPage:	
   680                           ; 0 bytes @ 0x6
   681                           
   682  0026                     ??_initAht10:	
   683                           ; 0 bytes @ 0x6
   684                           
   685  0026                     ??_sendTriggerMeasurementCmd:	
   686                           ; 0 bytes @ 0x6
   687                           
   688  0026                     ?_eepromReadByte:	
   689                           ; 0 bytes @ 0x6
   690                           
   691  0026                     memcpy@s:	
   692                           ; 1 bytes @ 0x6
   693                           
   694  0026                     eepromReadByte@addr:	
   695                           ; 1 bytes @ 0x6
   696                           
   697  0026                     eepromWriteByte@addr:	
   698                           ; 2 bytes @ 0x6
   699                           
   700  0026                     eepromReadLog@addr:	
   701                           ; 2 bytes @ 0x6
   702                           
   703  0026                     eepromReadLogPage@addr:	
   704                           ; 2 bytes @ 0x6
   705                           
   706                           
   707                           ; 2 bytes @ 0x6
   708  0026                     	ds	2
   709  0028                     ??_eepromReadByte:	
   710  0028                     ??___lmul:	
   711                           ; 0 bytes @ 0x8
   712                           
   713  0028                     ??___lldiv:	
   714                           ; 0 bytes @ 0x8
   715                           
   716  0028                     eepromReadByte@buff:	
   717                           ; 0 bytes @ 0x8
   718                           
   719  0028                     eepromWriteByte@data:	
   720                           ; 1 bytes @ 0x8
   721                           
   722  0028                     eepromReadLog@buff:	
   723                           ; 1 bytes @ 0x8
   724                           
   725  0028                     eepromReadLogPage@buff:	
   726                           ; 1 bytes @ 0x8
   727                           
   728  0028                     ___lmul@product:	
   729                           ; 1 bytes @ 0x8
   730                           
   731  0028                     ___lldiv@quotient:	
   732                           ; 4 bytes @ 0x8
   733                           
   734                           
   735                           ; 4 bytes @ 0x8
   736  0028                     	ds	1
   737  0029                     ??_eepromWriteByte:	
   738  0029                     ??_eepromReadLog:	
   739                           ; 0 bytes @ 0x9
   740                           
   741  0029                     ??_initVars:	
   742                           ; 0 bytes @ 0x9
   743                           
   744  0029                     ??_startLogCmd:	
   745                           ; 0 bytes @ 0x9
   746                           
   747  0029                     ??_eepromReadLogPage:	
   748                           ; 0 bytes @ 0x9
   749                           
   750                           
   751                           ; 0 bytes @ 0x9
   752  0029                     	ds	1
   753  002A                     eepromReadLogPage@i:	
   754                           
   755                           ; 2 bytes @ 0xA
   756  002A                     	ds	2
   757  002C                     ??_comandoRx:	
   758  002C                     ___lldiv@counter:	
   759                           ; 0 bytes @ 0xC
   760                           
   761                           
   762                           ; 1 bytes @ 0xC
   763  002C                     	ds	1
   764  002D                     ?___llmod:	
   765  002D                     comandoRx@readData:	
   766                           ; 4 bytes @ 0xD
   767                           
   768  002D                     ___llmod@divisor:	
   769                           ; 3 bytes @ 0xD
   770                           
   771                           
   772                           ; 4 bytes @ 0xD
   773  002D                     	ds	3
   774  0030                     comandoRx@readData_6105:	
   775                           
   776                           ; 3 bytes @ 0x10
   777  0030                     	ds	1
   778  0031                     ___llmod@dividend:	
   779                           
   780                           ; 4 bytes @ 0x11
   781  0031                     	ds	2
   782  0033                     comandoRx@i:	
   783                           
   784                           ; 2 bytes @ 0x13
   785  0033                     	ds	2
   786  0035                     ??___llmod:	
   787  0035                     ___llmod@counter:	
   788                           ; 0 bytes @ 0x15
   789                           
   790  0035                     comandoRx@numOfBytes:	
   791                           ; 1 bytes @ 0x15
   792                           
   793                           
   794                           ; 4 bytes @ 0x15
   795  0035                     	ds	1
   796  0036                     ??_readTemp:	
   797                           
   798                           ; 0 bytes @ 0x16
   799  0036                     	ds	3
   800  0039                     comandoRx@i_6106:	
   801                           
   802                           ; 2 bytes @ 0x19
   803  0039                     	ds	1
   804  003A                     readTemp@buff:	
   805                           
   806                           ; 6 bytes @ 0x1A
   807  003A                     	ds	1
   808  003B                     comandoRx@chk:	
   809                           
   810                           ; 1 bytes @ 0x1B
   811  003B                     	ds	1
   812  003C                     comandoRx@logsToSend:	
   813                           
   814                           ; 2 bytes @ 0x1C
   815  003C                     	ds	4
   816  0040                     readTemp@aux2:	
   817                           
   818                           ; 1 bytes @ 0x20
   819  0040                     	ds	1
   820  0041                     readTemp@aux:	
   821                           
   822                           ; 4 bytes @ 0x21
   823  0041                     	ds	4
   824  0045                     ??_logSave:	
   825                           
   826                           ; 0 bytes @ 0x25
   827  0045                     	ds	2
   828  0047                     logSave@auxAddr:	
   829                           
   830                           ; 2 bytes @ 0x27
   831  0047                     	ds	2
   832  0049                     ?_main:	
   833  0049                     main@argc:	
   834                           ; 2 bytes @ 0x29
   835                           
   836                           
   837                           ; 2 bytes @ 0x29
   838  0049                     	ds	2
   839  004B                     main@argv:	
   840                           
   841                           ; 2 bytes @ 0x2B
   842  004B                     	ds	2
   843  004D                     ??_main:	
   844                           
   845                           ; 0 bytes @ 0x2D
   846  004D                     	ds	3
   847                           
   848                           	psect	maintext
   849  000F                     __pmaintext:	
   850 ;;Data sizes: Strings 47, constant 0, data 12, bss 144, persistent 0 stack 0
   851 ;;Auto spaces:   Size  Autos    Used
   852 ;; COMMON          14     10      14
   853 ;; BANK0           80     48      71
   854 ;; BANK1           80      0      70
   855 ;; BANK2           80      0      60
   856 ;;
   857 ;; Pointer list with targets:
   858 ;; ?i1_memset	PTR void  size(1) Largest target is 30
   859 ;;		 -> rxBuffer(BANK2[30]), 
   860 ;;
   861 ;; i1memset@p1	PTR void  size(1) Largest target is 30
   862 ;;		 -> rxBuffer(BANK2[30]), 
   863 ;;
   864 ;; sp_i1_memset	PTR void  size(1) Largest target is 30
   865 ;;		 -> rxBuffer(BANK2[30]), 
   866 ;;
   867 ;; ?_memcpy	PTR void  size(1) Largest target is 30
   868 ;;		 -> cmd(BANK1[30]), 
   869 ;;
   870 ;; ?___llmod	unsigned long  size(1) Largest target is 0
   871 ;;
   872 ;; ?___lldiv	unsigned long  size(1) Largest target is 0
   873 ;;
   874 ;; ?___lmul	unsigned long  size(1) Largest target is 0
   875 ;;
   876 ;; ?___wmul	unsigned int  size(1) Largest target is 0
   877 ;;
   878 ;; ?_memset	PTR void  size(1) Largest target is 30
   879 ;;		 -> rxBuffer(BANK2[30]), 
   880 ;;
   881 ;; memset@p1	PTR void  size(1) Largest target is 30
   882 ;;		 -> rxBuffer(BANK2[30]), 
   883 ;;
   884 ;; memset@p	PTR unsigned char  size(1) Largest target is 30
   885 ;;		 -> rxBuffer(BANK2[30]), 
   886 ;;
   887 ;; memcpy@d1	PTR void  size(1) Largest target is 30
   888 ;;		 -> cmd(BANK1[30]), 
   889 ;;
   890 ;; memcpy@d	PTR unsigned char  size(1) Largest target is 30
   891 ;;		 -> cmd(BANK1[30]), 
   892 ;;
   893 ;; memcpy@s1	PTR const void  size(1) Largest target is 30
   894 ;;		 -> rxBuffer(BANK2[30]), 
   895 ;;
   896 ;; memcpy@s	PTR const unsigned char  size(1) Largest target is 30
   897 ;;		 -> rxBuffer(BANK2[30]), 
   898 ;;
   899 ;; checksumCalc@buffer	PTR unsigned char  size(1) Largest target is 40
   900 ;;		 -> bufferTx(BANK1[40]), 
   901 ;;
   902 ;; sp__memcpy	PTR void  size(1) Largest target is 30
   903 ;;		 -> cmd(BANK1[30]), 
   904 ;;
   905 ;; eepromReadLogPage@buff	PTR unsigned char  size(1) Largest target is 30
   906 ;;		 -> readDataBuffer(BANK2[30]), 
   907 ;;
   908 ;; eepromReadLog@buff	PTR unsigned char  size(1) Largest target is 3
   909 ;;		 -> comandoRx@readData_6105(BANK0[3]), comandoRx@readData(BANK0[3]), readLogData@readData(COMMON[3]), 
   910 ;;
   911 ;; sp__memset	PTR void  size(1) Largest target is 30
   912 ;;		 -> rxBuffer(BANK2[30]), 
   913 ;;
   914 ;; UART_send_String@ch	PTR unsigned char  size(1) Largest target is 14
   915 ;;		 -> STR_4(CODE[9]), STR_3(CODE[14]), STR_2(CODE[12]), STR_1(CODE[12]), 
   916 ;;
   917 ;;
   918 ;; Critical Paths under _main in COMMON
   919 ;;
   920 ;;   None.
   921 ;;
   922 ;; Critical Paths under _isr in COMMON
   923 ;;
   924 ;;   _isr->_bufferCreator2
   925 ;;   _bufferCreator2->i1_memset
   926 ;;
   927 ;; Critical Paths under _main in BANK0
   928 ;;
   929 ;;   _main->_logSave
   930 ;;   _comandoRx->_eepromReadLogPage
   931 ;;   _initVars->_eepromReadByte
   932 ;;   _logSave->_readTemp
   933 ;;   _eepromReadLogPage->_i2cWrite
   934 ;;   _eepromReadByte->_i2cWrite
   935 ;;   _eepromReadLog->_i2cWrite
   936 ;;   _startLogCmd->_eepromWriteByte
   937 ;;   _readTemp->___llmod
   938 ;;   _sendTriggerMeasurementCmd->_i2cWrite
   939 ;;   _initAht10->_i2cWrite
   940 ;;   _eepromWriteByte->_i2cWrite
   941 ;;   _jdyConfig->_UART_send_String
   942 ;;   _i2cNack->_sda_out
   943 ;;   _i2cNack->_scl_out
   944 ;;   _i2cAck->_sda_out
   945 ;;   _i2cAck->_scl_out
   946 ;;   _i2cRead->_scl_out
   947 ;;   _i2cWrite->_sda_out
   948 ;;   _i2cWrite->_scl_out
   949 ;;   _i2cStop->_sda_out
   950 ;;   _i2cStop->_scl_out
   951 ;;   _i2cStart->_scl_out
   952 ;;   _i2cStart->_sda_out
   953 ;;   _resposta->_UART_send_char
   954 ;;   _sda_out->_halfclockdelay
   955 ;;   _scl_out->_halfclockdelay
   956 ;;   _readLogStatus->_checksumCalc
   957 ;;   _stopLogCmd->_checksumCalc
   958 ;;   _getTimerCmd->_checksumCalc
   959 ;;   _setTimerCmd->_checksumCalc
   960 ;;   _getClockCmd->_checksumCalc
   961 ;;   _UART_send_String->_UART_send_char
   962 ;;   ___llmod->___lldiv
   963 ;;
   964 ;; Critical Paths under _isr in BANK0
   965 ;;
   966 ;;   None.
   967 ;;
   968 ;; Critical Paths under _main in BANK1
   969 ;;
   970 ;;   None.
   971 ;;
   972 ;; Critical Paths under _isr in BANK1
   973 ;;
   974 ;;   None.
   975 ;;
   976 ;; Critical Paths under _main in BANK2
   977 ;;
   978 ;;   None.
   979 ;;
   980 ;; Critical Paths under _isr in BANK2
   981 ;;
   982 ;;   None.
   983 ;;
   984 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   985 ;;
   986 ;;
   987 ;;Call Graph Tables:
   988 ;;
   989 ;; ---------------------------------------------------------------------------------
   990 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   991 ;; ---------------------------------------------------------------------------------
   992 ;; (0) _main                                                 7     3      4   11273
   993 ;;                                             41 BANK0      7     3      4
   994 ;;                           _initGPIO
   995 ;;                           _initUART
   996 ;;                      _i2cInitialize
   997 ;;                      _initInterrupt
   998 ;;                           _initVars
   999 ;;                          _initAht10
  1000 ;;                          _jdyConfig
  1001 ;;                             _memset
  1002 ;;                            _logSave
  1003 ;;                          _comandoRx
  1004 ;;                   _UART_send_String
  1005 ;; ---------------------------------------------------------------------------------
  1006 ;; (1) _comandoRx                                           18    18      0    5454
  1007 ;;                                             12 BANK0     18    18      0
  1008 ;;                     _checksumVerify
  1009 ;;                             _memcpy
  1010 ;;                        _getClockCmd
  1011 ;;                        _setTimerCmd
  1012 ;;                        _getTimerCmd
  1013 ;;                        _startLogCmd
  1014 ;;                         _stopLogCmd
  1015 ;;                      _readLogStatus
  1016 ;;                             ___wmul
  1017 ;;                           _resposta
  1018 ;;                      _eepromReadLog
  1019 ;;                       _checksumCalc
  1020 ;;                  _eepromReadLogPage
  1021 ;;                     _UART_send_char
  1022 ;; ---------------------------------------------------------------------------------
  1023 ;; (1) _initVars                                             2     2      0    1231
  1024 ;;                                              9 BANK0      2     2      0
  1025 ;;                     _eepromReadByte
  1026 ;; ---------------------------------------------------------------------------------
  1027 ;; (1) _logSave                                              4     4      0    3672
  1028 ;;                                             37 BANK0      4     4      0
  1029 ;;                             ___wmul
  1030 ;;          _sendTriggerMeasurementCmd
  1031 ;;                           _readTemp
  1032 ;;                    _eepromWriteByte
  1033 ;; ---------------------------------------------------------------------------------
  1034 ;; (2) _eepromReadLogPage                                    6     3      3    1502
  1035 ;;                                              6 BANK0      6     3      3
  1036 ;;                           _i2cStart
  1037 ;;                           _i2cWrite
  1038 ;;                         _i2cRestart
  1039 ;;                            _i2cRead
  1040 ;;                             _i2cAck
  1041 ;;                            _i2cNack
  1042 ;;                            _i2cStop
  1043 ;; ---------------------------------------------------------------------------------
  1044 ;; (2) _eepromReadByte                                       3     1      2    1231
  1045 ;;                                              6 BANK0      3     1      2
  1046 ;;                           _i2cStart
  1047 ;;                           _i2cWrite
  1048 ;;                         _i2cRestart
  1049 ;;                            _i2cRead
  1050 ;;                            _i2cNack
  1051 ;;                            _i2cStop
  1052 ;; ---------------------------------------------------------------------------------
  1053 ;; (2) _eepromReadLog                                        3     0      3    1456
  1054 ;;                                              6 BANK0      3     0      3
  1055 ;;                           _i2cStart
  1056 ;;                           _i2cWrite
  1057 ;;                         _i2cRestart
  1058 ;;                            _i2cRead
  1059 ;;                             _i2cAck
  1060 ;;                            _i2cNack
  1061 ;;                            _i2cStop
  1062 ;; ---------------------------------------------------------------------------------
  1063 ;; (2) _startLogCmd                                          2     2      0     818
  1064 ;;                                              9 BANK0      2     2      0
  1065 ;;                    _eepromWriteByte
  1066 ;;                       _checksumCalc
  1067 ;; ---------------------------------------------------------------------------------
  1068 ;; (2) _readTemp                                            15    15      0    2168
  1069 ;;                                             22 BANK0     15    15      0
  1070 ;;                           _i2cStart
  1071 ;;                           _i2cWrite
  1072 ;;                            _i2cRead
  1073 ;;                            _i2cNack
  1074 ;;                            _i2cStop
  1075 ;;                             _i2cAck
  1076 ;;                             ___lmul
  1077 ;;                            ___lldiv
  1078 ;;                            ___llmod
  1079 ;; ---------------------------------------------------------------------------------
  1080 ;; (2) _sendTriggerMeasurementCmd                            0     0      0     638
  1081 ;;                           _i2cStart
  1082 ;;                           _i2cWrite
  1083 ;;                            _i2cStop
  1084 ;; ---------------------------------------------------------------------------------
  1085 ;; (1) _initAht10                                            0     0      0     638
  1086 ;;                           _i2cStart
  1087 ;;                           _i2cWrite
  1088 ;;                            _i2cStop
  1089 ;; ---------------------------------------------------------------------------------
  1090 ;; (3) _i2cRestart                                           0     0      0     182
  1091 ;;                           _i2cStart
  1092 ;; ---------------------------------------------------------------------------------
  1093 ;; (3) _eepromWriteByte                                      3     0      3     704
  1094 ;;                                              6 BANK0      3     0      3
  1095 ;;                           _i2cStart
  1096 ;;                           _i2cWrite
  1097 ;;                            _i2cStop
  1098 ;; ---------------------------------------------------------------------------------
  1099 ;; (1) _jdyConfig                                            3     3      0      91
  1100 ;;                                              4 BANK0      3     3      0
  1101 ;;                   _UART_send_String
  1102 ;; ---------------------------------------------------------------------------------
  1103 ;; (3) _i2cNack                                              0     0      0     182
  1104 ;;                            _sda_out
  1105 ;;                            _scl_out
  1106 ;; ---------------------------------------------------------------------------------
  1107 ;; (3) _i2cAck                                               0     0      0     182
  1108 ;;                            _sda_out
  1109 ;;                            _scl_out
  1110 ;; ---------------------------------------------------------------------------------
  1111 ;; (3) _i2cRead                                              2     2      0     162
  1112 ;;                                              3 BANK0      2     2      0
  1113 ;;                            _scl_out
  1114 ;; ---------------------------------------------------------------------------------
  1115 ;; (3) _i2cWrite                                             3     3      0     274
  1116 ;;                                              3 BANK0      3     3      0
  1117 ;;                            _sda_out
  1118 ;;                            _scl_out
  1119 ;; ---------------------------------------------------------------------------------
  1120 ;; (3) _i2cStop                                              0     0      0     182
  1121 ;;                            _sda_out
  1122 ;;                            _scl_out
  1123 ;; ---------------------------------------------------------------------------------
  1124 ;; (4) _i2cStart                                             0     0      0     182
  1125 ;;                            _scl_out
  1126 ;;                            _sda_out
  1127 ;; ---------------------------------------------------------------------------------
  1128 ;; (2) _resposta                                             1     1      0      68
  1129 ;;                                              1 BANK0      1     1      0
  1130 ;;                     _UART_send_char
  1131 ;; ---------------------------------------------------------------------------------
  1132 ;; (4) _sda_out                                              1     1      0      91
  1133 ;;                                              2 BANK0      1     1      0
  1134 ;;                     _halfclockdelay
  1135 ;; ---------------------------------------------------------------------------------
  1136 ;; (4) _scl_out                                              1     1      0      91
  1137 ;;                                              2 BANK0      1     1      0
  1138 ;;                     _halfclockdelay
  1139 ;; ---------------------------------------------------------------------------------
  1140 ;; (2) _readLogStatus                                        0     0      0     114
  1141 ;;                       _checksumCalc
  1142 ;; ---------------------------------------------------------------------------------
  1143 ;; (2) _stopLogCmd                                           0     0      0     114
  1144 ;;                       _checksumCalc
  1145 ;; ---------------------------------------------------------------------------------
  1146 ;; (2) _getTimerCmd                                          0     0      0     114
  1147 ;;                       _checksumCalc
  1148 ;; ---------------------------------------------------------------------------------
  1149 ;; (2) _setTimerCmd                                          0     0      0     114
  1150 ;;                       _checksumCalc
  1151 ;; ---------------------------------------------------------------------------------
  1152 ;; (2) _getClockCmd                                          2     2      0     114
  1153 ;;                                              6 BANK0      2     2      0
  1154 ;;                       _checksumCalc
  1155 ;; ---------------------------------------------------------------------------------
  1156 ;; (1) _UART_send_String                                     3     2      1      91
  1157 ;;                                              1 BANK0      3     2      1
  1158 ;;                     _UART_send_char
  1159 ;; ---------------------------------------------------------------------------------
  1160 ;; (3) ___lldiv                                             13     5      8     162
  1161 ;;                                              0 BANK0     13     5      8
  1162 ;; ---------------------------------------------------------------------------------
  1163 ;; (3) ___llmod                                              9     1      8     159
  1164 ;;                                             13 BANK0      9     1      8
  1165 ;;                            ___lldiv (ARG)
  1166 ;; ---------------------------------------------------------------------------------
  1167 ;; (3) ___lmul                                              12     4      8      92
  1168 ;;                                              0 BANK0     12     4      8
  1169 ;; ---------------------------------------------------------------------------------
  1170 ;; (2) ___wmul                                               6     2      4      92
  1171 ;;                                              0 BANK0      6     2      4
  1172 ;; ---------------------------------------------------------------------------------
  1173 ;; (2) _memcpy                                               7     4      3     120
  1174 ;;                                              0 BANK0      7     4      3
  1175 ;; ---------------------------------------------------------------------------------
  1176 ;; (2) _checksumVerify                                       5     5      0     115
  1177 ;;                                              0 BANK0      5     5      0
  1178 ;; ---------------------------------------------------------------------------------
  1179 ;; (1) _initInterrupt                                        0     0      0       0
  1180 ;; ---------------------------------------------------------------------------------
  1181 ;; (1) _initGPIO                                             0     0      0       0
  1182 ;; ---------------------------------------------------------------------------------
  1183 ;; (5) _halfclockdelay                                       2     2      0      69
  1184 ;;                                              0 BANK0      2     2      0
  1185 ;; ---------------------------------------------------------------------------------
  1186 ;; (1) _i2cInitialize                                        4     0      4       0
  1187 ;;                                              0 BANK0      4     0      4
  1188 ;; ---------------------------------------------------------------------------------
  1189 ;; (2) _checksumCalc                                         6     5      1     114
  1190 ;;                                              0 BANK0      6     5      1
  1191 ;; ---------------------------------------------------------------------------------
  1192 ;; (1) _memset                                               6     2      4      96
  1193 ;;                                              0 BANK0      6     2      4
  1194 ;; ---------------------------------------------------------------------------------
  1195 ;; (2) _UART_send_char                                       1     1      0      22
  1196 ;;                                              0 BANK0      1     1      0
  1197 ;; ---------------------------------------------------------------------------------
  1198 ;; (1) _initUART                                             0     0      0       0
  1199 ;; ---------------------------------------------------------------------------------
  1200 ;; Estimated maximum stack depth 5
  1201 ;; ---------------------------------------------------------------------------------
  1202 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
  1203 ;; ---------------------------------------------------------------------------------
  1204 ;; (7) _isr                                                  3     3      0     658
  1205 ;;                                              7 COMMON     3     3      0
  1206 ;;                      _UART_get_char
  1207 ;;                     _bufferCreator2
  1208 ;;                           i1_memset
  1209 ;; ---------------------------------------------------------------------------------
  1210 ;; (8) _bufferCreator2                                       1     1      0     340
  1211 ;;                                              6 COMMON     1     1      0
  1212 ;;                           i1_memset
  1213 ;; ---------------------------------------------------------------------------------
  1214 ;; (8) i1_memset                                             6     2      4     318
  1215 ;;                                              0 COMMON     6     2      4
  1216 ;; ---------------------------------------------------------------------------------
  1217 ;; (8) _UART_get_char                                        0     0      0       0
  1218 ;; ---------------------------------------------------------------------------------
  1219 ;; Estimated maximum stack depth 8
  1220 ;; ---------------------------------------------------------------------------------
  1221 ;; Call Graph Graphs:
  1222 ;; _main (ROOT)
  1223 ;;   _initGPIO
  1224 ;;   _initUART
  1225 ;;   _i2cInitialize
  1226 ;;   _initInterrupt
  1227 ;;   _initVars
  1228 ;;     _eepromReadByte
  1229 ;;       _i2cStart
  1230 ;;         _scl_out
  1231 ;;           _halfclockdelay
  1232 ;;         _sda_out
  1233 ;;           _halfclockdelay
  1234 ;;       _i2cWrite
  1235 ;;         _sda_out
  1236 ;;           _halfclockdelay
  1237 ;;         _scl_out
  1238 ;;           _halfclockdelay
  1239 ;;       _i2cRestart
  1240 ;;         _i2cStart
  1241 ;;           _scl_out
  1242 ;;             _halfclockdelay
  1243 ;;           _sda_out
  1244 ;;             _halfclockdelay
  1245 ;;       _i2cRead
  1246 ;;         _scl_out
  1247 ;;           _halfclockdelay
  1248 ;;       _i2cNack
  1249 ;;         _sda_out
  1250 ;;           _halfclockdelay
  1251 ;;         _scl_out
  1252 ;;           _halfclockdelay
  1253 ;;       _i2cStop
  1254 ;;         _sda_out
  1255 ;;           _halfclockdelay
  1256 ;;         _scl_out
  1257 ;;           _halfclockdelay
  1258 ;;   _initAht10
  1259 ;;     _i2cStart
  1260 ;;       _scl_out
  1261 ;;         _halfclockdelay
  1262 ;;       _sda_out
  1263 ;;         _halfclockdelay
  1264 ;;     _i2cWrite
  1265 ;;       _sda_out
  1266 ;;         _halfclockdelay
  1267 ;;       _scl_out
  1268 ;;         _halfclockdelay
  1269 ;;     _i2cStop
  1270 ;;       _sda_out
  1271 ;;         _halfclockdelay
  1272 ;;       _scl_out
  1273 ;;         _halfclockdelay
  1274 ;;   _jdyConfig
  1275 ;;     _UART_send_String
  1276 ;;       _UART_send_char
  1277 ;;   _memset
  1278 ;;   _logSave
  1279 ;;     ___wmul
  1280 ;;     _sendTriggerMeasurementCmd
  1281 ;;       _i2cStart
  1282 ;;         _scl_out
  1283 ;;           _halfclockdelay
  1284 ;;         _sda_out
  1285 ;;           _halfclockdelay
  1286 ;;       _i2cWrite
  1287 ;;         _sda_out
  1288 ;;           _halfclockdelay
  1289 ;;         _scl_out
  1290 ;;           _halfclockdelay
  1291 ;;       _i2cStop
  1292 ;;         _sda_out
  1293 ;;           _halfclockdelay
  1294 ;;         _scl_out
  1295 ;;           _halfclockdelay
  1296 ;;     _readTemp
  1297 ;;       _i2cStart
  1298 ;;         _scl_out
  1299 ;;           _halfclockdelay
  1300 ;;         _sda_out
  1301 ;;           _halfclockdelay
  1302 ;;       _i2cWrite
  1303 ;;         _sda_out
  1304 ;;           _halfclockdelay
  1305 ;;         _scl_out
  1306 ;;           _halfclockdelay
  1307 ;;       _i2cRead
  1308 ;;         _scl_out
  1309 ;;           _halfclockdelay
  1310 ;;       _i2cNack
  1311 ;;         _sda_out
  1312 ;;           _halfclockdelay
  1313 ;;         _scl_out
  1314 ;;           _halfclockdelay
  1315 ;;       _i2cStop
  1316 ;;         _sda_out
  1317 ;;           _halfclockdelay
  1318 ;;         _scl_out
  1319 ;;           _halfclockdelay
  1320 ;;       _i2cAck
  1321 ;;         _sda_out
  1322 ;;           _halfclockdelay
  1323 ;;         _scl_out
  1324 ;;           _halfclockdelay
  1325 ;;       ___lmul
  1326 ;;       ___lldiv
  1327 ;;       ___llmod
  1328 ;;         ___lldiv (ARG)
  1329 ;;     _eepromWriteByte
  1330 ;;       _i2cStart
  1331 ;;         _scl_out
  1332 ;;           _halfclockdelay
  1333 ;;         _sda_out
  1334 ;;           _halfclockdelay
  1335 ;;       _i2cWrite
  1336 ;;         _sda_out
  1337 ;;           _halfclockdelay
  1338 ;;         _scl_out
  1339 ;;           _halfclockdelay
  1340 ;;       _i2cStop
  1341 ;;         _sda_out
  1342 ;;           _halfclockdelay
  1343 ;;         _scl_out
  1344 ;;           _halfclockdelay
  1345 ;;   _comandoRx
  1346 ;;     _checksumVerify
  1347 ;;     _memcpy
  1348 ;;     _getClockCmd
  1349 ;;       _checksumCalc
  1350 ;;     _setTimerCmd
  1351 ;;       _checksumCalc
  1352 ;;     _getTimerCmd
  1353 ;;       _checksumCalc
  1354 ;;     _startLogCmd
  1355 ;;       _eepromWriteByte
  1356 ;;         _i2cStart
  1357 ;;           _scl_out
  1358 ;;             _halfclockdelay
  1359 ;;           _sda_out
  1360 ;;             _halfclockdelay
  1361 ;;         _i2cWrite
  1362 ;;           _sda_out
  1363 ;;             _halfclockdelay
  1364 ;;           _scl_out
  1365 ;;             _halfclockdelay
  1366 ;;         _i2cStop
  1367 ;;           _sda_out
  1368 ;;             _halfclockdelay
  1369 ;;           _scl_out
  1370 ;;             _halfclockdelay
  1371 ;;       _checksumCalc
  1372 ;;     _stopLogCmd
  1373 ;;       _checksumCalc
  1374 ;;     _readLogStatus
  1375 ;;       _checksumCalc
  1376 ;;     ___wmul
  1377 ;;     _resposta
  1378 ;;       _UART_send_char
  1379 ;;     _eepromReadLog
  1380 ;;       _i2cStart
  1381 ;;         _scl_out
  1382 ;;           _halfclockdelay
  1383 ;;         _sda_out
  1384 ;;           _halfclockdelay
  1385 ;;       _i2cWrite
  1386 ;;         _sda_out
  1387 ;;           _halfclockdelay
  1388 ;;         _scl_out
  1389 ;;           _halfclockdelay
  1390 ;;       _i2cRestart
  1391 ;;         _i2cStart
  1392 ;;           _scl_out
  1393 ;;             _halfclockdelay
  1394 ;;           _sda_out
  1395 ;;             _halfclockdelay
  1396 ;;       _i2cRead
  1397 ;;         _scl_out
  1398 ;;           _halfclockdelay
  1399 ;;       _i2cAck
  1400 ;;         _sda_out
  1401 ;;           _halfclockdelay
  1402 ;;         _scl_out
  1403 ;;           _halfclockdelay
  1404 ;;       _i2cNack
  1405 ;;         _sda_out
  1406 ;;           _halfclockdelay
  1407 ;;         _scl_out
  1408 ;;           _halfclockdelay
  1409 ;;       _i2cStop
  1410 ;;         _sda_out
  1411 ;;           _halfclockdelay
  1412 ;;         _scl_out
  1413 ;;           _halfclockdelay
  1414 ;;     _checksumCalc
  1415 ;;     _eepromReadLogPage
  1416 ;;       _i2cStart
  1417 ;;         _scl_out
  1418 ;;           _halfclockdelay
  1419 ;;         _sda_out
  1420 ;;           _halfclockdelay
  1421 ;;       _i2cWrite
  1422 ;;         _sda_out
  1423 ;;           _halfclockdelay
  1424 ;;         _scl_out
  1425 ;;           _halfclockdelay
  1426 ;;       _i2cRestart
  1427 ;;         _i2cStart
  1428 ;;           _scl_out
  1429 ;;             _halfclockdelay
  1430 ;;           _sda_out
  1431 ;;             _halfclockdelay
  1432 ;;       _i2cRead
  1433 ;;         _scl_out
  1434 ;;           _halfclockdelay
  1435 ;;       _i2cAck
  1436 ;;         _sda_out
  1437 ;;           _halfclockdelay
  1438 ;;         _scl_out
  1439 ;;           _halfclockdelay
  1440 ;;       _i2cNack
  1441 ;;         _sda_out
  1442 ;;           _halfclockdelay
  1443 ;;         _scl_out
  1444 ;;           _halfclockdelay
  1445 ;;       _i2cStop
  1446 ;;         _sda_out
  1447 ;;           _halfclockdelay
  1448 ;;         _scl_out
  1449 ;;           _halfclockdelay
  1450 ;;     _UART_send_char
  1451 ;;   _UART_send_String
  1452 ;;     _UART_send_char
  1453 ;;
  1454 ;; _isr (ROOT)
  1455 ;;   _UART_get_char
  1456 ;;   _bufferCreator2
  1457 ;;     i1_memset
  1458 ;;   i1_memset
  1459 ;;
  1460 ;; Address spaces:
  1461 ;;Name               Size   Autos  Total    Cost      Usage
  1462 ;;SFR3                 0      0       0       4        0.0%
  1463 ;;BITSFR3              0      0       0       4        0.0%
  1464 ;;BANK2               50      0      3C       7       75.0%
  1465 ;;BITBANK2            50      0       0       6        0.0%
  1466 ;;SFR2                 0      0       0       5        0.0%
  1467 ;;BITSFR2              0      0       0       5        0.0%
  1468 ;;SFR1                 0      0       0       2        0.0%
  1469 ;;BITSFR1              0      0       0       2        0.0%
  1470 ;;BANK1               50      0      46       5       87.5%
  1471 ;;BITBANK1            50      0       0       4        0.0%
  1472 ;;CODE                 0      0       0       0        0.0%
  1473 ;;DATA                 0      0      E3      10        0.0%
  1474 ;;ABS                  0      0      D7       8        0.0%
  1475 ;;NULL                 0      0       0       0        0.0%
  1476 ;;STACK                0      0       C       2        0.0%
  1477 ;;BANK0               50     30      47       3       88.8%
  1478 ;;BITBANK0            50      0       0       9        0.0%
  1479 ;;SFR0                 0      0       0       1        0.0%
  1480 ;;BITSFR0              0      0       0       1        0.0%
  1481 ;;COMMON               E      A       E       1      100.0%
  1482 ;;BITCOMMON            E      0       1       0        7.1%
  1483 ;;EEDATA             100      0       0       0        0.0%
  1484                           
  1485                           
  1486 ;; *************** function _main *****************
  1487 ;; Defined at:
  1488 ;;		line 56 in file "Main.c"
  1489 ;; Parameters:    Size  Location     Type
  1490 ;;  argc            2   41[BANK0 ] int 
  1491 ;;  argv            2   43[BANK0 ] PTR PTR unsigned char 
  1492 ;; Auto vars:     Size  Location     Type
  1493 ;;		None
  1494 ;; Return value:  Size  Location     Type
  1495 ;;                  2   41[BANK0 ] int 
  1496 ;; Registers used:
  1497 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1498 ;; Tracked objects:
  1499 ;;		On entry : 17F/0
  1500 ;;		On exit  : 0/0
  1501 ;;		Unchanged: 0/0
  1502 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1503 ;;      Params:         0       4       0       0
  1504 ;;      Locals:         0       0       0       0
  1505 ;;      Temps:          0       3       0       0
  1506 ;;      Totals:         0       7       0       0
  1507 ;;Total ram usage:        7 bytes
  1508 ;; Hardware stack levels required when called:    9
  1509 ;; This function calls:
  1510 ;;		_initGPIO
  1511 ;;		_initUART
  1512 ;;		_i2cInitialize
  1513 ;;		_initInterrupt
  1514 ;;		_initVars
  1515 ;;		_initAht10
  1516 ;;		_jdyConfig
  1517 ;;		_memset
  1518 ;;		_logSave
  1519 ;;		_comandoRx
  1520 ;;		_UART_send_String
  1521 ;; This function is called by:
  1522 ;;		Startup code after reset
  1523 ;; This function uses a non-reentrant model
  1524 ;;
  1525  000F                     _main:	
  1526                           
  1527                           ;Main.c: 57: initGPIO();
  1528                           
  1529 ;; hardware stack exceeded
  1530                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1531  000F  118A  22FA  118A   	fcall	_initGPIO
  1532                           
  1533                           ;Main.c: 58: initUART();
  1534  0012  118A  2325  118A   	fcall	_initUART
  1535                           
  1536                           ;Main.c: 59: i2cInitialize(1000);
  1537  0015  3000               	movlw	0
  1538  0016  00A3               	movwf	?_i2cInitialize+3
  1539  0017  00A2               	movwf	?_i2cInitialize+2
  1540  0018  3003               	movlw	3
  1541  0019  00A1               	movwf	?_i2cInitialize+1
  1542  001A  30E8               	movlw	232
  1543  001B  00A0               	movwf	?_i2cInitialize
  1544  001C  118A  2368  118A   	fcall	_i2cInitialize
  1545                           
  1546                           ;Main.c: 60: initInterrupt();
  1547  001F  118A  22DD  118A   	fcall	_initInterrupt
  1548  0022  3082               	movlw	130
  1549                           
  1550                           ;Main.c: 61: RC4 = 1;
  1551  0023  1607               	bsf	7,4
  1552                           
  1553                           ;Main.c: 62: _delay((unsigned long)((100)*(4000000/4000.0)));
  1554  0024  00CE               	movwf	??_main+1
  1555  0025  30DD               	movlw	221
  1556  0026  00CD               	movwf	??_main
  1557  0027                     u1507:	
  1558  0027  0BCD               	decfsz	??_main,f
  1559  0028  2827               	goto	u1507
  1560  0029  0BCE               	decfsz	??_main+1,f
  1561  002A  2827               	goto	u1507
  1562  002B  282C               	nop2
  1563                           
  1564                           ;Main.c: 63: initVars();
  1565  002C  158A  235B  118A   	fcall	_initVars
  1566                           
  1567                           ;Main.c: 64: initAht10();
  1568  002F  158A  2015  118A   	fcall	_initAht10
  1569                           
  1570                           ;Main.c: 65: _delay((unsigned long)((5)*(4000000/4000.0)));
  1571  0032  3007               	movlw	7
  1572  0033  00CE               	movwf	??_main+1
  1573  0034  307D               	movlw	125
  1574  0035  00CD               	movwf	??_main
  1575  0036                     u1517:	
  1576  0036  0BCD               	decfsz	??_main,f
  1577  0037  2836               	goto	u1517
  1578  0038  0BCE               	decfsz	??_main+1,f
  1579  0039  2836               	goto	u1517
  1580                           
  1581                           ;Main.c: 66: jdyConfig();
  1582  003A  118A  216D  118A   	fcall	_jdyConfig
  1583                           
  1584                           ;Main.c: 67: _delay((unsigned long)((250)*(4000000/4000.0)));
  1585  003D  3002               	movlw	2
  1586  003E  00CF               	movwf	??_main+2
  1587  003F  3045               	movlw	69
  1588  0040  00CE               	movwf	??_main+1
  1589  0041  30A9               	movlw	169
  1590  0042  00CD               	movwf	??_main
  1591  0043                     u1527:	
  1592  0043  0BCD               	decfsz	??_main,f
  1593  0044  2843               	goto	u1527
  1594  0045  0BCE               	decfsz	??_main+1,f
  1595  0046  2843               	goto	u1527
  1596  0047  0BCF               	decfsz	??_main+2,f
  1597  0048  2843               	goto	u1527
  1598  0049  284A               	nop2
  1599                           
  1600                           ;Main.c: 68: memset(rxBuffer,0,30);
  1601  004A  1283               	bcf	3,5	;RP0=0, select bank0
  1602  004B  301E               	movlw	30
  1603  004C  1303               	bcf	3,6	;RP1=0, select bank0
  1604  004D  01A0               	clrf	?_memset
  1605  004E  01A1               	clrf	?_memset+1
  1606  004F  00A2               	movwf	?_memset+2
  1607  0050  303E               	movlw	_rxBuffer& (0+255)
  1608  0051  01A3               	clrf	?_memset+3
  1609  0052  118A  233A  118A   	fcall	_memset
  1610  0055                     l8364:	
  1611                           
  1612                           ;Main.c: 71: if(logStatus == 1 && contTimer == 0){
  1613  0055  1E7A               	btfss	_logStatus/(0+8),_logStatus& (0+7)
  1614  0056  2864               	goto	l8372
  1615  0057  1283               	bcf	3,5	;RP0=0, select bank0
  1616  0058  1303               	bcf	3,6	;RP1=0, select bank0
  1617  0059  085D               	movf	_contTimer+1,w
  1618  005A  045C               	iorwf	_contTimer,w
  1619  005B  1D03               	skipz
  1620  005C  2864               	goto	l8372
  1621                           
  1622                           ;Main.c: 72: contTimer = timer;
  1623  005D  085B               	movf	_timer+1,w
  1624  005E  00DD               	movwf	_contTimer+1
  1625  005F  085A               	movf	_timer,w
  1626  0060  00DC               	movwf	_contTimer
  1627                           
  1628                           ;Main.c: 74: logSave();
  1629  0061  158A  21B7  118A   	fcall	_logSave
  1630  0064                     l8372:	
  1631                           
  1632                           ;Main.c: 75: }
  1633                           ;Main.c: 77: if (flagRxBufferOk){
  1634  0064  1D7A               	btfss	_flagRxBufferOk/(0+8),_flagRxBufferOk& (0+7)
  1635  0065  2895               	goto	l8390
  1636  0066  3003               	movlw	3
  1637                           
  1638                           ;Main.c: 78: flagRxBufferOk = 0;
  1639  0067  117A               	bcf	_flagRxBufferOk/(0+8),_flagRxBufferOk& (0+7)
  1640                           
  1641                           ;Main.c: 79: if (rxBufferLength >= 3){
  1642  0068  027B               	subwf	_rxBufferLength,w
  1643  0069  1C03               	skipc
  1644  006A  2895               	goto	l8390
  1645                           
  1646                           ;Main.c: 80: if (rxBuffer[2]+5 == rxBufferLength){
  1647  006B  1283               	bcf	3,5	;RP0=0, select bank2
  1648  006C  1703               	bsf	3,6	;RP1=1, select bank2
  1649  006D  0840               	movf	(_rxBuffer^(0+256)+2),w
  1650  006E  3E05               	addlw	5
  1651  006F  1303               	bcf	3,6	;RP1=0, select bank0
  1652  0070  00CD               	movwf	??_main
  1653  0071  3000               	movlw	0
  1654  0072  1803               	skipnc
  1655  0073  3001               	movlw	1
  1656  0074  00CE               	movwf	??_main+1
  1657  0075  087B               	movf	_rxBufferLength,w
  1658  0076  064D               	xorwf	??_main,w
  1659  0077  044E               	iorwf	??_main+1,w
  1660  0078  1D03               	skipz
  1661  0079  2895               	goto	l8390
  1662                           
  1663                           ;Main.c: 81: if (rxBuffer[0] == 0x55 && rxBuffer[rxBufferLength-1] == 0x0A){
  1664  007A  1703               	bsf	3,6	;RP1=1, select bank2
  1665  007B  083E               	movf	_rxBuffer^(0+256),w
  1666  007C  3A55               	xorlw	85
  1667  007D  1D03               	skipz
  1668  007E  2895               	goto	l8390
  1669  007F  087B               	movf	_rxBufferLength,w
  1670  0080  3E3D               	addlw	(_rxBuffer+-1)& (0+255)
  1671  0081  0084               	movwf	4
  1672  0082  1783               	bsf	3,7	;select IRP bank2
  1673  0083  0800               	movf	0,w
  1674  0084  3A0A               	xorlw	10
  1675  0085  1D03               	skipz
  1676  0086  2895               	goto	l8390
  1677                           
  1678                           ;Main.c: 82: comandoRx();
  1679  0087  158A  2024  118A   	fcall	_comandoRx
  1680                           
  1681                           ;Main.c: 83: rxBufferPos = 0;
  1682  008A  01FC               	clrf	_rxBufferPos
  1683                           
  1684                           ;Main.c: 84: memset(rxBuffer,0,rxBufferLength);
  1685  008B  1283               	bcf	3,5	;RP0=0, select bank0
  1686  008C  01A0               	clrf	?_memset
  1687  008D  01A1               	clrf	?_memset+1
  1688  008E  087B               	movf	_rxBufferLength,w
  1689  008F  00A2               	movwf	?_memset+2
  1690  0090  303E               	movlw	_rxBuffer& (0+255)
  1691  0091  01A3               	clrf	?_memset+3
  1692  0092  118A  233A  118A   	fcall	_memset
  1693  0095                     l8390:	
  1694                           
  1695                           ;Main.c: 85: }
  1696                           ;Main.c: 86: }
  1697                           ;Main.c: 87: }
  1698                           ;Main.c: 88: }
  1699                           ;Main.c: 90: if(RC0 == 1){
  1700  0095  1283               	bcf	3,5	;RP0=0, select bank0
  1701  0096  1303               	bcf	3,6	;RP1=0, select bank0
  1702  0097  1C07               	btfss	7,0
  1703  0098  289D               	goto	l8400
  1704                           
  1705                           ;Main.c: 91: flagConection = 1;
  1706  0099  147A               	bsf	_flagConection/(0+8),_flagConection& (0+7)
  1707                           
  1708                           ;Main.c: 92: timeToConnect = 0;
  1709  009A  01E6               	clrf	_timeToConnect
  1710                           
  1711                           ;Main.c: 93: RC4 = 1;
  1712  009B  1607               	bsf	7,4
  1713                           
  1714                           ;Main.c: 94: RC1 = 0;
  1715  009C  1087               	bcf	7,1
  1716  009D                     l8400:	
  1717                           
  1718                           ;Main.c: 95: }
  1719                           ;Main.c: 96: if (RC0 == 0 && timeToConnect > 0){
  1720  009D  1807               	btfsc	7,0
  1721  009E  28A9               	goto	l8408
  1722  009F  0866               	movf	_timeToConnect,w
  1723  00A0  1903               	btfsc	3,2
  1724  00A1  28A9               	goto	l8408
  1725                           
  1726                           ;Main.c: 97: if (timeBlinkLed == 0){
  1727  00A2  08E5               	movf	_timeBlinkLed,f
  1728  00A3  1D03               	skipz
  1729  00A4  28A9               	goto	l8408
  1730                           
  1731                           ;Main.c: 98: timeBlinkLed = 5;
  1732  00A5  3005               	movlw	5
  1733  00A6  00E5               	movwf	_timeBlinkLed
  1734                           
  1735                           ;Main.c: 99: RC1 = !RC1;
  1736  00A7  3002               	movlw	2
  1737  00A8  0687               	xorwf	7,f
  1738  00A9                     l8408:	
  1739                           
  1740                           ;Main.c: 101: }
  1741                           ;Main.c: 102: }
  1742                           ;Main.c: 105: if(RC0 == 0 && timeToConnect == 0){
  1743  00A9  1807               	btfsc	7,0
  1744  00AA  2855               	goto	l8364
  1745  00AB  08E6               	movf	_timeToConnect,f
  1746  00AC  1D03               	skipz
  1747  00AD  2855               	goto	l8364
  1748                           
  1749                           ;Main.c: 106: RC1 = 1;
  1750  00AE  1487               	bsf	7,1
  1751                           
  1752                           ;Main.c: 107: if (flagTryConnect == 1 || flagConection == 1){
  1753  00AF  19FA               	btfsc	_flagTryConnect/(0+8),_flagTryConnect& (0+7)
  1754  00B0  28B3               	goto	l4865
  1755  00B1  1C7A               	btfss	_flagConection/(0+8),_flagConection& (0+7)
  1756  00B2  28D7               	goto	l8424
  1757  00B3                     l4865:	
  1758  00B3  3082               	movlw	130
  1759                           
  1760                           ;Main.c: 108: flagConection = 0;
  1761  00B4  107A               	bcf	_flagConection/(0+8),_flagConection& (0+7)
  1762                           
  1763                           ;Main.c: 109: flagTryConnect = 0;
  1764  00B5  11FA               	bcf	_flagTryConnect/(0+8),_flagTryConnect& (0+7)
  1765                           
  1766                           ;Main.c: 110: RC4 = 0;
  1767  00B6  1207               	bcf	7,4
  1768                           
  1769                           ;Main.c: 111: _delay((unsigned long)((100)*(4000000/4000.0)));
  1770  00B7  00CE               	movwf	??_main+1
  1771  00B8  30DD               	movlw	221
  1772  00B9  00CD               	movwf	??_main
  1773  00BA                     u1537:	
  1774  00BA  0BCD               	decfsz	??_main,f
  1775  00BB  28BA               	goto	u1537
  1776  00BC  0BCE               	decfsz	??_main+1,f
  1777  00BD  28BA               	goto	u1537
  1778  00BE  28BF               	nop2
  1779                           
  1780                           ;Main.c: 112: UART_send_String("AT+SLEEP2\r\n",11);
  1781  00BF  300B               	movlw	11
  1782  00C0  1283               	bcf	3,5	;RP0=0, select bank0
  1783  00C1  1303               	bcf	3,6	;RP1=0, select bank0
  1784  00C2  00A1               	movwf	?_UART_send_String
  1785  00C3  301B               	movlw	(STR_1-__stringbase)& (0+255)
  1786  00C4  118A  21BA  118A   	fcall	_UART_send_String
  1787                           
  1788                           ;Main.c: 113: _delay((unsigned long)((350)*(4000000/4000.0)));
  1789  00C7  3002               	movlw	2
  1790  00C8  00CF               	movwf	??_main+2
  1791  00C9  30C7               	movlw	199
  1792  00CA  00CE               	movwf	??_main+1
  1793  00CB  3088               	movlw	136
  1794  00CC  00CD               	movwf	??_main
  1795  00CD                     u1547:	
  1796  00CD  0BCD               	decfsz	??_main,f
  1797  00CE  28CD               	goto	u1547
  1798  00CF  0BCE               	decfsz	??_main+1,f
  1799  00D0  28CD               	goto	u1547
  1800  00D1  0BCF               	decfsz	??_main+2,f
  1801  00D2  28CD               	goto	u1547
  1802  00D3  0064               	clrwdt
  1803                           
  1804                           ;Main.c: 114: RC4 = 1;
  1805  00D4  1283               	bcf	3,5	;RP0=0, select bank0
  1806  00D5  1303               	bcf	3,6	;RP1=0, select bank0
  1807  00D6  1607               	bsf	7,4
  1808  00D7                     l8424:	
  1809  00D7  0063               	sleep	;#
  1810  00D8  2855               	goto	l8364
  1811  00D9                     __end_of_main:	
  1812                           
  1813                           	psect	swtext1
  1814  034E                     __pswtext1:	
  1815  034E                     S8458:	
  1816  034E  158A  2834         	ljmp	l8162
  1817  0350  158A  2839         	ljmp	l8166
  1818  0352  158A  283D         	ljmp	l8170
  1819  0354  158A  2841         	ljmp	l8174
  1820  0356  158A  2844         	ljmp	l8178
  1821  0358  158A  2848         	ljmp	l8182
  1822  035A  158A  284C         	ljmp	l8186
  1823  035C  158A  28FB         	ljmp	l8278
  1824  035E  158A  293C         	ljmp	l8298
  1825                           
  1826                           	psect	text1000
  1827  0806                     __ptext1000:	
  1828 ;; =============== function _readTemp ends ============
  1829                           
  1830                           
  1831 ;; *************** function _sendTriggerMeasurementCmd *****************
  1832 ;; Defined at:
  1833 ;;		line 33 in file "aht10.c"
  1834 ;; Parameters:    Size  Location     Type
  1835 ;;		None
  1836 ;; Auto vars:     Size  Location     Type
  1837 ;;		None
  1838 ;; Return value:  Size  Location     Type
  1839 ;;		None               void
  1840 ;; Registers used:
  1841 ;;		wreg, status,2, status,0, pclath, cstack
  1842 ;; Tracked objects:
  1843 ;;		On entry : 60/0
  1844 ;;		On exit  : 60/0
  1845 ;;		Unchanged: FFF9F/0
  1846 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1847 ;;      Params:         0       0       0       0
  1848 ;;      Locals:         0       0       0       0
  1849 ;;      Temps:          0       0       0       0
  1850 ;;      Totals:         0       0       0       0
  1851 ;;Total ram usage:        0 bytes
  1852 ;; Hardware stack levels used:    1
  1853 ;; Hardware stack levels required when called:    6
  1854 ;; This function calls:
  1855 ;;		_i2cStart
  1856 ;;		_i2cWrite
  1857 ;;		_i2cStop
  1858 ;; This function is called by:
  1859 ;;		_logSave
  1860 ;; This function uses a non-reentrant model
  1861 ;;
  1862  0806                     _sendTriggerMeasurementCmd:	
  1863                           
  1864                           ;aht10.c: 34: i2cStart();
  1865                           
  1866                           ; Regs used in _sendTriggerMeasurementCmd: [wreg+status,2+status,0+pclath+cstack]
  1867  0806  26F2  158A         	fcall	_i2cStart
  1868                           
  1869                           ;aht10.c: 35: i2cWrite(0x70);
  1870  0808  3070               	movlw	112
  1871  0809  26AB  158A         	fcall	_i2cWrite
  1872                           
  1873                           ;aht10.c: 36: i2cWrite(0xAC);
  1874  080B  30AC               	movlw	172
  1875  080C  26AB  158A         	fcall	_i2cWrite
  1876                           
  1877                           ;aht10.c: 37: i2cWrite(0x33);
  1878  080E  3033               	movlw	51
  1879  080F  26AB  158A         	fcall	_i2cWrite
  1880                           
  1881                           ;aht10.c: 38: i2cWrite(0x00);
  1882  0811  3000               	movlw	0
  1883  0812  26AB  158A         	fcall	_i2cWrite
  1884                           
  1885                           ;aht10.c: 39: i2cStop();
  1886  0814  2EFD               	ljmp	l7836
  1887  0815                     __end_of_sendTriggerMeasurementCmd:	
  1888  0815                     __ptext1001:	
  1889 ;; =============== function _sendTriggerMeasurementCmd ends ============
  1890                           
  1891                           
  1892 ;; *************** function _initAht10 *****************
  1893 ;; Defined at:
  1894 ;;		line 12 in file "aht10.c"
  1895 ;; Parameters:    Size  Location     Type
  1896 ;;		None
  1897 ;; Auto vars:     Size  Location     Type
  1898 ;;		None
  1899 ;; Return value:  Size  Location     Type
  1900 ;;		None               void
  1901 ;; Registers used:
  1902 ;;		wreg, status,2, status,0, pclath, cstack
  1903 ;; Tracked objects:
  1904 ;;		On entry : 0/0
  1905 ;;		On exit  : 60/0
  1906 ;;		Unchanged: FFF9F/0
  1907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1908 ;;      Params:         0       0       0       0
  1909 ;;      Locals:         0       0       0       0
  1910 ;;      Temps:          0       0       0       0
  1911 ;;      Totals:         0       0       0       0
  1912 ;;Total ram usage:        0 bytes
  1913 ;; Hardware stack levels used:    1
  1914 ;; Hardware stack levels required when called:    6
  1915 ;; This function calls:
  1916 ;;		_i2cStart
  1917 ;;		_i2cWrite
  1918 ;;		_i2cStop
  1919 ;; This function is called by:
  1920 ;;		_main
  1921 ;; This function uses a non-reentrant model
  1922 ;;
  1923  0815                     _initAht10:	
  1924                           
  1925                           ;aht10.c: 13: i2cStart();
  1926                           
  1927                           ; Regs used in _initAht10: [wreg+status,2+status,0+pclath+cstack]
  1928  0815  26F2  158A         	fcall	_i2cStart
  1929                           
  1930                           ;aht10.c: 14: i2cWrite(0x70);
  1931  0817  3070               	movlw	112
  1932  0818  26AB  158A         	fcall	_i2cWrite
  1933                           
  1934                           ;aht10.c: 15: i2cWrite(0xE1);
  1935  081A  30E1               	movlw	225
  1936  081B  26AB  158A         	fcall	_i2cWrite
  1937                           
  1938                           ;aht10.c: 16: i2cWrite(0x08);
  1939  081D  3008               	movlw	8
  1940  081E  26AB  158A         	fcall	_i2cWrite
  1941                           
  1942                           ;aht10.c: 17: i2cWrite(0x00);
  1943  0820  3000               	movlw	0
  1944  0821  26AB  158A         	fcall	_i2cWrite
  1945                           
  1946                           ;aht10.c: 18: i2cStop();
  1947  0823  2EFD               	ljmp	l7836
  1948  0824                     __end_of_initAht10:	
  1949  0824                     __ptext992:	
  1950 ;; =============== function _main ends ============
  1951                           
  1952                           
  1953 ;; *************** function _comandoRx *****************
  1954 ;; Defined at:
  1955 ;;		line 187 in file "Main.c"
  1956 ;; Parameters:    Size  Location     Type
  1957 ;;		None
  1958 ;; Auto vars:     Size  Location     Type
  1959 ;;  readData        3   13[BANK0 ] unsigned char [3]
  1960 ;;  i               2   25[BANK0 ] int 
  1961 ;;  i               2   19[BANK0 ] unsigned int 
  1962 ;;  readData        3   16[BANK0 ] unsigned char [3]
  1963 ;;  numOfBytes      4   21[BANK0 ] unsigned long 
  1964 ;;  logsToSend      2   28[BANK0 ] unsigned int 
  1965 ;;  chk             1   27[BANK0 ] unsigned char 
  1966 ;; Return value:  Size  Location     Type
  1967 ;;		None               void
  1968 ;; Registers used:
  1969 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1970 ;; Tracked objects:
  1971 ;;		On entry : 160/140
  1972 ;;		On exit  : 40/0
  1973 ;;		Unchanged: 0/0
  1974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1975 ;;      Params:         0       0       0       0
  1976 ;;      Locals:         0      17       0       0
  1977 ;;      Temps:          0       1       0       0
  1978 ;;      Totals:         0      18       0       0
  1979 ;;Total ram usage:       18 bytes
  1980 ;; Hardware stack levels used:    1
  1981 ;; Hardware stack levels required when called:    8
  1982 ;; This function calls:
  1983 ;;		_checksumVerify
  1984 ;;		_memcpy
  1985 ;;		_getClockCmd
  1986 ;;		_setTimerCmd
  1987 ;;		_getTimerCmd
  1988 ;;		_startLogCmd
  1989 ;;		_stopLogCmd
  1990 ;;		_readLogStatus
  1991 ;;		___wmul
  1992 ;;		_resposta
  1993 ;;		_eepromReadLog
  1994 ;;		_checksumCalc
  1995 ;;		_eepromReadLogPage
  1996 ;;		_UART_send_char
  1997 ;; This function is called by:
  1998 ;;		_main
  1999 ;; This function uses a non-reentrant model
  2000 ;;
  2001  0824                     _comandoRx:	
  2002                           
  2003                           ;Main.c: 190: unsigned int logsToSend = 0;
  2004                           
  2005 ;; hardware stack exceeded
  2006                           ; Regs used in _comandoRx: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2007  0824  1303               	bcf	3,6	;RP1=0, select bank0
  2008  0825  01BC               	clrf	comandoRx@logsToSend
  2009  0826  01BD               	clrf	comandoRx@logsToSend+1
  2010                           
  2011                           ;Main.c: 191: if (checksumVerify()){
  2012  0827  27B8  158A         	fcall	_checksumVerify
  2013  0829  1C03               	btfss	3,0
  2014  082A  29A9               	goto	l8338
  2015                           
  2016                           ;Main.c: 192: memcpy(cmd, rxBuffer, rxBufferLength);
  2017  082B  303E               	movlw	_rxBuffer& (0+255)
  2018  082C  00A0               	movwf	?_memcpy
  2019  082D  087B               	movf	_rxBufferLength,w
  2020  082E  00A1               	movwf	?_memcpy+1
  2021  082F  30C8               	movlw	_cmd& (0+255)
  2022  0830  01A2               	clrf	?_memcpy+2
  2023  0831  27E3  158A         	fcall	_memcpy
  2024                           
  2025                           ;Main.c: 193: switch (cmd[1]){
  2026  0833  2995               	goto	l8332
  2027  0834                     l8162:	
  2028                           
  2029                           ;Main.c: 195: getClockCmd();
  2030  0834  118A  223A  158A   	fcall	_getClockCmd
  2031  0837                     l8164:	
  2032                           
  2033                           ;Main.c: 196: flagRespostaBLE = 1;
  2034  0837  14FA               	bsf	_flagRespostaBLE/(0+8),_flagRespostaBLE& (0+7)
  2035                           
  2036                           ;Main.c: 197: break;
  2037  0838  29A5               	goto	l4887
  2038  0839                     l8166:	
  2039                           
  2040                           ;Main.c: 200: setTimerCmd();
  2041  0839  118A  229E  158A   	fcall	_setTimerCmd
  2042  083C  2837               	goto	l8164
  2043  083D                     l8170:	
  2044                           
  2045                           ;Main.c: 205: getTimerCmd();
  2046  083D  118A  22BF  158A   	fcall	_getTimerCmd
  2047  0840  2837               	goto	l8164
  2048  0841                     l8174:	
  2049                           
  2050                           ;Main.c: 210: startLogCmd();
  2051  0841  223C  158A         	fcall	_startLogCmd
  2052  0843  2837               	goto	l8164
  2053  0844                     l8178:	
  2054                           
  2055                           ;Main.c: 215: stopLogCmd();
  2056  0844  118A  2310  158A   	fcall	_stopLogCmd
  2057  0847  2837               	goto	l8164
  2058  0848                     l8182:	
  2059                           
  2060                           ;Main.c: 220: readLogStatus();
  2061  0848  118A  21CB  158A   	fcall	_readLogStatus
  2062  084B  2837               	goto	l8164
  2063  084C                     l8186:	
  2064                           
  2065                           ;Main.c: 225: chk = 0;
  2066  084C  1283               	bcf	3,5	;RP0=0, select bank0
  2067  084D  300E               	movlw	14
  2068  084E  01BB               	clrf	comandoRx@chk
  2069                           
  2070                           ;Main.c: 226: bufferTxLen = 14;
  2071  084F  00E0               	movwf	_bufferTxLen
  2072                           
  2073                           ;Main.c: 227: bufferTx[0] = 0x55;
  2074  0850  3055               	movlw	85
  2075  0851  1683               	bsf	3,5	;RP0=1, select bank1
  2076  0852  00A0               	movwf	_bufferTx^(0+128)
  2077                           
  2078                           ;Main.c: 228: bufferTx[1] = 0x37;
  2079  0853  3037               	movlw	55
  2080  0854  00A1               	movwf	(_bufferTx^(0+128)+1)
  2081                           
  2082                           ;Main.c: 229: chk ^= bufferTx[1];
  2083  0855  1283               	bcf	3,5	;RP0=0, select bank0
  2084  0856  06BB               	xorwf	comandoRx@chk,f
  2085                           
  2086                           ;Main.c: 230: logsToSend = numOfLogs;
  2087  0857  085F               	movf	_numOfLogs+1,w
  2088  0858  00BD               	movwf	comandoRx@logsToSend+1
  2089  0859  085E               	movf	_numOfLogs,w
  2090  085A  00BC               	movwf	comandoRx@logsToSend
  2091                           
  2092                           ;Main.c: 231: numOfBytes = logsToSend*3;
  2093  085B  083D               	movf	comandoRx@logsToSend+1,w
  2094  085C  00A1               	movwf	?___wmul+1
  2095  085D  083C               	movf	comandoRx@logsToSend,w
  2096  085E  00A0               	movwf	?___wmul
  2097  085F  3003               	movlw	3
  2098  0860  00A2               	movwf	?___wmul+2
  2099  0861  01A3               	clrf	?___wmul+3
  2100  0862  2342  158A         	fcall	___wmul
  2101  0864  0820               	movf	?___wmul,w
  2102  0865  00B5               	movwf	comandoRx@numOfBytes
  2103  0866  0821               	movf	?___wmul+1,w
  2104  0867  00B6               	movwf	comandoRx@numOfBytes+1
  2105  0868  3009               	movlw	9
  2106  0869  01B7               	clrf	comandoRx@numOfBytes+2
  2107  086A  01B8               	clrf	comandoRx@numOfBytes+3
  2108                           
  2109                           ;Main.c: 232: numOfBytes+= 9;
  2110  086B  07B5               	addwf	comandoRx@numOfBytes,f
  2111  086C  3001               	movlw	1
  2112  086D  1803               	skipnc
  2113  086E  07B6               	addwf	comandoRx@numOfBytes+1,f
  2114  086F  1803               	skipnc
  2115  0870  07B7               	addwf	comandoRx@numOfBytes+2,f
  2116  0871  1803               	skipnc
  2117  0872  07B8               	addwf	comandoRx@numOfBytes+3,f
  2118                           
  2119                           ;Main.c: 233: bufferTx[2] = (numOfBytes>>16)&0xFF;
  2120  0873  0837               	movf	comandoRx@numOfBytes+2,w
  2121  0874  1683               	bsf	3,5	;RP0=1, select bank1
  2122  0875  00A2               	movwf	(_bufferTx^(0+128)+2)
  2123                           
  2124                           ;Main.c: 234: chk ^= bufferTx[2];
  2125  0876  1283               	bcf	3,5	;RP0=0, select bank0
  2126  0877  06BB               	xorwf	comandoRx@chk,f
  2127                           
  2128                           ;Main.c: 235: bufferTx[3] = (numOfBytes>>8)&0xFF;
  2129  0878  0836               	movf	comandoRx@numOfBytes+1,w
  2130  0879  1683               	bsf	3,5	;RP0=1, select bank1
  2131  087A  00A3               	movwf	(_bufferTx^(0+128)+3)
  2132                           
  2133                           ;Main.c: 236: chk ^= bufferTx[3];
  2134  087B  1283               	bcf	3,5	;RP0=0, select bank0
  2135  087C  06BB               	xorwf	comandoRx@chk,f
  2136                           
  2137                           ;Main.c: 237: bufferTx[4] = (numOfBytes&0xFF);
  2138  087D  0835               	movf	comandoRx@numOfBytes,w
  2139  087E  1683               	bsf	3,5	;RP0=1, select bank1
  2140  087F  00A4               	movwf	(_bufferTx^(0+128)+4)
  2141                           
  2142                           ;Main.c: 238: chk ^= bufferTx[4];
  2143  0880  1283               	bcf	3,5	;RP0=0, select bank0
  2144  0881  06BB               	xorwf	comandoRx@chk,f
  2145                           
  2146                           ;Main.c: 240: bufferTx[5] = startTime>>24;
  2147  0882  0853               	movf	_startTime+3,w
  2148  0883  1683               	bsf	3,5	;RP0=1, select bank1
  2149  0884  00A5               	movwf	(_bufferTx^(0+128)+5)
  2150                           
  2151                           ;Main.c: 241: chk ^= bufferTx[5];
  2152  0885  1283               	bcf	3,5	;RP0=0, select bank0
  2153  0886  06BB               	xorwf	comandoRx@chk,f
  2154                           
  2155                           ;Main.c: 242: bufferTx[6] = startTime>>16;
  2156  0887  0852               	movf	_startTime+2,w
  2157  0888  1683               	bsf	3,5	;RP0=1, select bank1
  2158  0889  00A6               	movwf	(_bufferTx^(0+128)+6)
  2159                           
  2160                           ;Main.c: 243: chk ^= bufferTx[6];
  2161  088A  1283               	bcf	3,5	;RP0=0, select bank0
  2162  088B  06BB               	xorwf	comandoRx@chk,f
  2163                           
  2164                           ;Main.c: 244: bufferTx[7] = startTime>>8;
  2165  088C  0851               	movf	_startTime+1,w
  2166  088D  1683               	bsf	3,5	;RP0=1, select bank1
  2167  088E  00A7               	movwf	(_bufferTx^(0+128)+7)
  2168                           
  2169                           ;Main.c: 245: chk ^= bufferTx[7];
  2170  088F  1283               	bcf	3,5	;RP0=0, select bank0
  2171  0890  06BB               	xorwf	comandoRx@chk,f
  2172                           
  2173                           ;Main.c: 246: bufferTx[8] = startTime;
  2174  0891  0850               	movf	_startTime,w
  2175  0892  1683               	bsf	3,5	;RP0=1, select bank1
  2176  0893  00A8               	movwf	(_bufferTx^(0+128)+8)
  2177                           
  2178                           ;Main.c: 247: chk ^= bufferTx[8];
  2179  0894  1283               	bcf	3,5	;RP0=0, select bank0
  2180  0895  06BB               	xorwf	comandoRx@chk,f
  2181                           
  2182                           ;Main.c: 248: bufferTx[9] = timer>>8;
  2183  0896  085B               	movf	_timer+1,w
  2184  0897  1683               	bsf	3,5	;RP0=1, select bank1
  2185  0898  00A9               	movwf	(_bufferTx^(0+128)+9)
  2186                           
  2187                           ;Main.c: 249: chk ^= bufferTx[9];
  2188  0899  1283               	bcf	3,5	;RP0=0, select bank0
  2189  089A  06BB               	xorwf	comandoRx@chk,f
  2190                           
  2191                           ;Main.c: 250: bufferTx[10] = timer;
  2192  089B  085A               	movf	_timer,w
  2193  089C  1683               	bsf	3,5	;RP0=1, select bank1
  2194  089D  00AA               	movwf	(_bufferTx^(0+128)+10)
  2195                           
  2196                           ;Main.c: 251: chk ^= bufferTx[10];
  2197  089E  1283               	bcf	3,5	;RP0=0, select bank0
  2198  089F  06BB               	xorwf	comandoRx@chk,f
  2199                           
  2200                           ;Main.c: 252: bufferTx[11] = logsToSend>>8;
  2201  08A0  083D               	movf	comandoRx@logsToSend+1,w
  2202  08A1  1683               	bsf	3,5	;RP0=1, select bank1
  2203  08A2  00AB               	movwf	(_bufferTx^(0+128)+11)
  2204                           
  2205                           ;Main.c: 253: chk ^= bufferTx[11];
  2206  08A3  1283               	bcf	3,5	;RP0=0, select bank0
  2207  08A4  06BB               	xorwf	comandoRx@chk,f
  2208                           
  2209                           ;Main.c: 254: bufferTx[12] = logsToSend;
  2210  08A5  083C               	movf	comandoRx@logsToSend,w
  2211  08A6  1683               	bsf	3,5	;RP0=1, select bank1
  2212  08A7  00AC               	movwf	(_bufferTx^(0+128)+12)
  2213                           
  2214                           ;Main.c: 255: chk ^= bufferTx[12];
  2215  08A8  1283               	bcf	3,5	;RP0=0, select bank0
  2216  08A9  06BB               	xorwf	comandoRx@chk,f
  2217                           
  2218                           ;Main.c: 256: bufferTx[13] = logStatus;
  2219  08AA  3000               	movlw	0
  2220  08AB  1A7A               	btfsc	_logStatus/(0+8),_logStatus& (0+7)
  2221  08AC  3001               	movlw	1
  2222  08AD  1683               	bsf	3,5	;RP0=1, select bank1
  2223  08AE  00AD               	movwf	(_bufferTx^(0+128)+13)
  2224                           
  2225                           ;Main.c: 257: chk ^= bufferTx[13];
  2226  08AF  1283               	bcf	3,5	;RP0=0, select bank0
  2227  08B0  06BB               	xorwf	comandoRx@chk,f
  2228                           
  2229                           ;Main.c: 258: resposta();
  2230  08B1  274D  158A         	fcall	_resposta
  2231                           
  2232                           ;Main.c: 260: for (unsigned int i=0; i<logsToSend; i++){
  2233  08B3  01B3               	clrf	comandoRx@i
  2234  08B4  01B4               	clrf	comandoRx@i+1
  2235  08B5                     l4894:	
  2236  08B5  083D               	movf	comandoRx@logsToSend+1,w
  2237  08B6  0234               	subwf	comandoRx@i+1,w
  2238  08B7  1D03               	skipz
  2239  08B8  28BB               	goto	u1325
  2240  08B9  083C               	movf	comandoRx@logsToSend,w
  2241  08BA  0233               	subwf	comandoRx@i,w
  2242  08BB                     u1325:	
  2243  08BB  1803               	btfsc	3,0
  2244  08BC  28F0               	goto	l8274
  2245                           
  2246                           ;Main.c: 261: unsigned char readData[3];
  2247                           ;Main.c: 262: bufferTxLen = 3;
  2248  08BD  3003               	movlw	3
  2249  08BE  00E0               	movwf	_bufferTxLen
  2250                           
  2251                           ;Main.c: 263: eepromReadLog(0x0020+(3*i),readData);
  2252  08BF  0834               	movf	comandoRx@i+1,w
  2253  08C0  00A1               	movwf	?___wmul+1
  2254  08C1  0833               	movf	comandoRx@i,w
  2255  08C2  00A0               	movwf	?___wmul
  2256  08C3  3003               	movlw	3
  2257  08C4  00A2               	movwf	?___wmul+2
  2258  08C5  01A3               	clrf	?___wmul+3
  2259  08C6  2342  158A         	fcall	___wmul
  2260  08C8  0821               	movf	?___wmul+1,w
  2261  08C9  00A7               	movwf	?_eepromReadLog+1
  2262  08CA  0820               	movf	?___wmul,w
  2263  08CB  00A6               	movwf	?_eepromReadLog
  2264  08CC  3020               	movlw	32
  2265  08CD  07A6               	addwf	?_eepromReadLog,f
  2266  08CE  1803               	skipnc
  2267  08CF  0AA7               	incf	?_eepromReadLog+1,f
  2268  08D0  302D               	movlw	comandoRx@readData& (0+255)
  2269  08D1  00A8               	movwf	?_eepromReadLog+2
  2270  08D2  246F  158A         	fcall	_eepromReadLog
  2271                           
  2272                           ;Main.c: 264: bufferTx[0] = readData[0];
  2273  08D4  082D               	movf	comandoRx@readData,w
  2274  08D5  1683               	bsf	3,5	;RP0=1, select bank1
  2275  08D6  00A0               	movwf	_bufferTx^(0+128)
  2276                           
  2277                           ;Main.c: 265: bufferTx[1] = readData[1];
  2278  08D7  1283               	bcf	3,5	;RP0=0, select bank0
  2279  08D8  082E               	movf	comandoRx@readData+1,w
  2280  08D9  1683               	bsf	3,5	;RP0=1, select bank1
  2281  08DA  00A1               	movwf	(_bufferTx^(0+128)+1)
  2282                           
  2283                           ;Main.c: 266: bufferTx[2] = readData[2];
  2284  08DB  1283               	bcf	3,5	;RP0=0, select bank0
  2285  08DC  082F               	movf	comandoRx@readData+2,w
  2286  08DD  1683               	bsf	3,5	;RP0=1, select bank1
  2287  08DE  00A2               	movwf	(_bufferTx^(0+128)+2)
  2288                           
  2289                           ;Main.c: 267: chk ^= bufferTx[0];
  2290  08DF  0820               	movf	_bufferTx^(0+128),w
  2291  08E0  1283               	bcf	3,5	;RP0=0, select bank0
  2292  08E1  06BB               	xorwf	comandoRx@chk,f
  2293                           
  2294                           ;Main.c: 268: chk ^= bufferTx[1];
  2295  08E2  1683               	bsf	3,5	;RP0=1, select bank1
  2296  08E3  0821               	movf	(_bufferTx^(0+128)+1),w
  2297  08E4  1283               	bcf	3,5	;RP0=0, select bank0
  2298  08E5  06BB               	xorwf	comandoRx@chk,f
  2299                           
  2300                           ;Main.c: 269: chk ^= bufferTx[2];
  2301  08E6  1683               	bsf	3,5	;RP0=1, select bank1
  2302  08E7  0822               	movf	(_bufferTx^(0+128)+2),w
  2303  08E8  1283               	bcf	3,5	;RP0=0, select bank0
  2304  08E9  06BB               	xorwf	comandoRx@chk,f
  2305                           
  2306                           ;Main.c: 270: resposta();
  2307  08EA  274D  158A         	fcall	_resposta
  2308  08EC  0AB3               	incf	comandoRx@i,f
  2309  08ED  1903               	skipnz
  2310  08EE  0AB4               	incf	comandoRx@i+1,f
  2311  08EF  28B5               	goto	l4894
  2312  08F0                     l8274:	
  2313                           
  2314                           ;Main.c: 271: }
  2315                           ;Main.c: 272: bufferTx[0] = chk;
  2316  08F0  083B               	movf	comandoRx@chk,w
  2317  08F1  1683               	bsf	3,5	;RP0=1, select bank1
  2318  08F2  00A0               	movwf	_bufferTx^(0+128)
  2319                           
  2320                           ;Main.c: 273: bufferTx[1] = 0x0A;
  2321  08F3  300A               	movlw	10
  2322  08F4  00A1               	movwf	(_bufferTx^(0+128)+1)
  2323                           
  2324                           ;Main.c: 274: bufferTxLen = 2;
  2325  08F5  3002               	movlw	2
  2326  08F6  1283               	bcf	3,5	;RP0=0, select bank0
  2327  08F7  00E0               	movwf	_bufferTxLen
  2328  08F8                     l8276:	
  2329                           
  2330                           ;Main.c: 275: resposta();
  2331  08F8  274D  158A         	fcall	_resposta
  2332                           
  2333                           ;Main.c: 276: break;
  2334  08FA  29A5               	goto	l4887
  2335  08FB                     l8278:	
  2336                           
  2337                           ;Main.c: 279: logsToSend = cmd[3];
  2338  08FB  084B               	movf	(_cmd^(0+128)+3),w
  2339  08FC  1283               	bcf	3,5	;RP0=0, select bank0
  2340  08FD  00BC               	movwf	comandoRx@logsToSend
  2341  08FE  01BD               	clrf	comandoRx@logsToSend+1
  2342                           
  2343                           ;Main.c: 280: logsToSend <<=8;
  2344  08FF  00BD               	movwf	comandoRx@logsToSend+1
  2345  0900  01BC               	clrf	comandoRx@logsToSend
  2346                           
  2347                           ;Main.c: 281: logsToSend += cmd[4];
  2348  0901  1683               	bsf	3,5	;RP0=1, select bank1
  2349  0902  084C               	movf	(_cmd^(0+128)+4),w
  2350  0903  1283               	bcf	3,5	;RP0=0, select bank0
  2351  0904  07BC               	addwf	comandoRx@logsToSend,f
  2352  0905  1803               	skipnc
  2353  0906  0ABD               	incf	comandoRx@logsToSend+1,f
  2354                           
  2355                           ;Main.c: 282: unsigned char readData[3];
  2356                           ;Main.c: 283: bufferTxLen = 8;
  2357  0907  3008               	movlw	8
  2358  0908  00E0               	movwf	_bufferTxLen
  2359                           
  2360                           ;Main.c: 284: eepromReadLog(0x0020+(logsToSend*3),readData);
  2361  0909  083D               	movf	comandoRx@logsToSend+1,w
  2362  090A  00A1               	movwf	?___wmul+1
  2363  090B  083C               	movf	comandoRx@logsToSend,w
  2364  090C  00A0               	movwf	?___wmul
  2365  090D  3003               	movlw	3
  2366  090E  00A2               	movwf	?___wmul+2
  2367  090F  01A3               	clrf	?___wmul+3
  2368  0910  2342  158A         	fcall	___wmul
  2369  0912  0821               	movf	?___wmul+1,w
  2370  0913  00A7               	movwf	?_eepromReadLog+1
  2371  0914  0820               	movf	?___wmul,w
  2372  0915  00A6               	movwf	?_eepromReadLog
  2373  0916  3020               	movlw	32
  2374  0917  07A6               	addwf	?_eepromReadLog,f
  2375  0918  1803               	skipnc
  2376  0919  0AA7               	incf	?_eepromReadLog+1,f
  2377  091A  3030               	movlw	comandoRx@readData_6105& (0+255)
  2378  091B  00A8               	movwf	?_eepromReadLog+2
  2379  091C  246F  158A         	fcall	_eepromReadLog
  2380                           
  2381                           ;Main.c: 286: bufferTx[0] = 0x55;
  2382  091E  3055               	movlw	85
  2383  091F  1683               	bsf	3,5	;RP0=1, select bank1
  2384  0920  00A0               	movwf	_bufferTx^(0+128)
  2385                           
  2386                           ;Main.c: 287: bufferTx[1] = 0x38;
  2387  0921  3038               	movlw	56
  2388  0922  00A1               	movwf	(_bufferTx^(0+128)+1)
  2389                           
  2390                           ;Main.c: 288: bufferTx[2] = 0x03;
  2391  0923  3003               	movlw	3
  2392  0924  00A2               	movwf	(_bufferTx^(0+128)+2)
  2393                           
  2394                           ;Main.c: 289: bufferTx[3] = readData[0];
  2395  0925  1283               	bcf	3,5	;RP0=0, select bank0
  2396  0926  0830               	movf	comandoRx@readData_6105,w
  2397  0927  1683               	bsf	3,5	;RP0=1, select bank1
  2398  0928  00A3               	movwf	(_bufferTx^(0+128)+3)
  2399                           
  2400                           ;Main.c: 290: bufferTx[4] = readData[1];
  2401  0929  1283               	bcf	3,5	;RP0=0, select bank0
  2402  092A  0831               	movf	comandoRx@readData_6105+1,w
  2403  092B  1683               	bsf	3,5	;RP0=1, select bank1
  2404  092C  00A4               	movwf	(_bufferTx^(0+128)+4)
  2405                           
  2406                           ;Main.c: 291: bufferTx[5] = readData[2];
  2407  092D  1283               	bcf	3,5	;RP0=0, select bank0
  2408  092E  0832               	movf	comandoRx@readData_6105+2,w
  2409  092F  1683               	bsf	3,5	;RP0=1, select bank1
  2410  0930  00A5               	movwf	(_bufferTx^(0+128)+5)
  2411                           
  2412                           ;Main.c: 292: bufferTx[6] = checksumCalc(bufferTx,8);
  2413  0931  3008               	movlw	8
  2414  0932  1283               	bcf	3,5	;RP0=0, select bank0
  2415  0933  00A0               	movwf	?_checksumCalc
  2416  0934  30A0               	movlw	_bufferTx& (0+255)
  2417  0935  2791  158A         	fcall	_checksumCalc
  2418  0937  1683               	bsf	3,5	;RP0=1, select bank1
  2419  0938  00A6               	movwf	(_bufferTx^(0+128)+6)
  2420                           
  2421                           ;Main.c: 293: bufferTx[7] = 0x0A;
  2422  0939  300A               	movlw	10
  2423  093A  00A7               	movwf	(_bufferTx^(0+128)+7)
  2424  093B  28F8               	goto	l8276
  2425  093C                     l8298:	
  2426                           
  2427                           ;Main.c: 298: logsToSend = cmd[3];
  2428  093C  084B               	movf	(_cmd^(0+128)+3),w
  2429  093D  1283               	bcf	3,5	;RP0=0, select bank0
  2430  093E  00BC               	movwf	comandoRx@logsToSend
  2431  093F  01BD               	clrf	comandoRx@logsToSend+1
  2432                           
  2433                           ;Main.c: 299: logsToSend <<=8;
  2434  0940  00BD               	movwf	comandoRx@logsToSend+1
  2435  0941  01BC               	clrf	comandoRx@logsToSend
  2436                           
  2437                           ;Main.c: 300: logsToSend += cmd[4];
  2438  0942  1683               	bsf	3,5	;RP0=1, select bank1
  2439  0943  084C               	movf	(_cmd^(0+128)+4),w
  2440  0944  1283               	bcf	3,5	;RP0=0, select bank0
  2441  0945  07BC               	addwf	comandoRx@logsToSend,f
  2442  0946  1803               	skipnc
  2443  0947  0ABD               	incf	comandoRx@logsToSend+1,f
  2444                           
  2445                           ;Main.c: 302: bufferTxLen = 37;
  2446  0948  3025               	movlw	37
  2447  0949  00E0               	movwf	_bufferTxLen
  2448                           
  2449                           ;Main.c: 303: eepromReadLogPage(0x0020+(30*logsToSend),readDataBuffer);
  2450  094A  083D               	movf	comandoRx@logsToSend+1,w
  2451  094B  00A1               	movwf	?___wmul+1
  2452  094C  083C               	movf	comandoRx@logsToSend,w
  2453  094D  00A0               	movwf	?___wmul
  2454  094E  301E               	movlw	30
  2455  094F  00A2               	movwf	?___wmul+2
  2456  0950  01A3               	clrf	?___wmul+3
  2457  0951  2342  158A         	fcall	___wmul
  2458  0953  0821               	movf	?___wmul+1,w
  2459  0954  00A7               	movwf	?_eepromReadLogPage+1
  2460  0955  0820               	movf	?___wmul,w
  2461  0956  00A6               	movwf	?_eepromReadLogPage
  2462  0957  3020               	movlw	32
  2463  0958  07A6               	addwf	?_eepromReadLogPage,f
  2464  0959  1803               	skipnc
  2465  095A  0AA7               	incf	?_eepromReadLogPage+1,f
  2466  095B  3020               	movlw	_readDataBuffer& (0+255)
  2467  095C  00A8               	movwf	?_eepromReadLogPage+2
  2468  095D  2433  158A         	fcall	_eepromReadLogPage
  2469                           
  2470                           ;Main.c: 305: bufferTx[0] = 0x55;
  2471  095F  3055               	movlw	85
  2472  0960  1683               	bsf	3,5	;RP0=1, select bank1
  2473  0961  00A0               	movwf	_bufferTx^(0+128)
  2474                           
  2475                           ;Main.c: 306: bufferTx[1] = 0x39;
  2476  0962  3039               	movlw	57
  2477  0963  00A1               	movwf	(_bufferTx^(0+128)+1)
  2478                           
  2479                           ;Main.c: 307: bufferTx[2] = 0x20;
  2480  0964  3020               	movlw	32
  2481  0965  00A2               	movwf	(_bufferTx^(0+128)+2)
  2482                           
  2483                           ;Main.c: 308: bufferTx[3] = cmd[3];
  2484  0966  084B               	movf	(_cmd^(0+128)+3),w
  2485  0967  00A3               	movwf	(_bufferTx^(0+128)+3)
  2486                           
  2487                           ;Main.c: 309: bufferTx[4] = cmd[4];
  2488  0968  084C               	movf	(_cmd^(0+128)+4),w
  2489  0969  00A4               	movwf	(_bufferTx^(0+128)+4)
  2490                           
  2491                           ;Main.c: 311: for(int i=0;i<30;i++){
  2492  096A  1283               	bcf	3,5	;RP0=0, select bank0
  2493  096B  01B9               	clrf	comandoRx@i_6106
  2494  096C  01BA               	clrf	comandoRx@i_6106+1
  2495  096D                     l8318:	
  2496                           
  2497                           ;Main.c: 312: bufferTx[i+5] = readDataBuffer[i];
  2498  096D  1283               	bcf	3,5	;RP0=0, select bank0
  2499  096E  1303               	bcf	3,6	;RP1=0, select bank0
  2500  096F  0839               	movf	comandoRx@i_6106,w
  2501  0970  3E20               	addlw	_readDataBuffer& (0+255)
  2502  0971  0084               	movwf	4
  2503  0972  1783               	bsf	3,7	;select IRP bank2
  2504  0973  0800               	movf	0,w
  2505  0974  00AC               	movwf	??_comandoRx
  2506  0975  0839               	movf	comandoRx@i_6106,w
  2507  0976  3EA5               	addlw	(_bufferTx+5)& (0+255)
  2508  0977  0084               	movwf	4
  2509  0978  082C               	movf	??_comandoRx,w
  2510  0979  1383               	bcf	3,7	;select IRP bank1
  2511  097A  0080               	movwf	0
  2512  097B  0AB9               	incf	comandoRx@i_6106,f
  2513  097C  1903               	skipnz
  2514  097D  0ABA               	incf	comandoRx@i_6106+1,f
  2515  097E  083A               	movf	comandoRx@i_6106+1,w
  2516  097F  3A80               	xorlw	128
  2517  0980  00FF               	movwf	127
  2518  0981  3080               	movlw	128
  2519  0982  027F               	subwf	127,w
  2520  0983  1D03               	skipz
  2521  0984  2987               	goto	u1335
  2522  0985  301E               	movlw	30
  2523  0986  0239               	subwf	comandoRx@i_6106,w
  2524  0987                     u1335:	
  2525  0987  1C03               	skipc
  2526  0988  296D               	goto	l8318
  2527                           
  2528                           ;Main.c: 313: }
  2529                           ;Main.c: 314: bufferTx[35] = checksumCalc(bufferTx,37);
  2530  0989  3025               	movlw	37
  2531  098A  1283               	bcf	3,5	;RP0=0, select bank0
  2532  098B  1303               	bcf	3,6	;RP1=0, select bank0
  2533  098C  00A0               	movwf	?_checksumCalc
  2534  098D  30A0               	movlw	_bufferTx& (0+255)
  2535  098E  2791  158A         	fcall	_checksumCalc
  2536  0990  1683               	bsf	3,5	;RP0=1, select bank1
  2537  0991  00C3               	movwf	(_bufferTx^(0+128)+35)
  2538                           
  2539                           ;Main.c: 315: bufferTx[36] = 0x0A;
  2540  0992  300A               	movlw	10
  2541  0993  00C4               	movwf	(_bufferTx^(0+128)+36)
  2542  0994  28F8               	goto	l8276
  2543  0995                     l8332:	
  2544  0995  1683               	bsf	3,5	;RP0=1, select bank1
  2545  0996  0849               	movf	(_cmd^(0+128)+1),w
  2546                           
  2547                           ; Switch size 1, requested type "space"
  2548                           ; Number of cases is 9, Range of values is 49 to 57
  2549                           ; switch strategies available:
  2550                           ; Name         Instructions Cycles
  2551                           ; direct_byte           28    10 (fixed)
  2552                           ; simple_byte           28    15 (average)
  2553                           ; jumptable            263     9 (fixed)
  2554                           ;	Chosen strategy is direct_byte
  2555  0997  3ECF               	addlw	-49
  2556  0998  1C03               	skipc
  2557  0999  29A5               	goto	l4887
  2558  099A  0084               	movwf	4
  2559  099B  3009               	movlw	9
  2560  099C  0204               	subwf	4,w
  2561  099D  1803               	skipnc
  2562  099E  29A5               	goto	l4887
  2563  099F  3003               	movlw	high S8458
  2564  09A0  008A               	movwf	10
  2565  09A1  1003               	clrc
  2566  09A2  0D04               	rlf	4,w
  2567  09A3  3E4E               	addlw	low S8458
  2568  09A4  0082               	movwf	2
  2569  09A5                     l4887:	
  2570                           
  2571                           ;Main.c: 321: if (flagRespostaBLE){
  2572  09A5  1CFA               	btfss	_flagRespostaBLE/(0+8),_flagRespostaBLE& (0+7)
  2573  09A6  0008               	return
  2574                           
  2575                           ;Main.c: 322: flagRespostaBLE = 0;
  2576  09A7  10FA               	bcf	_flagRespostaBLE/(0+8),_flagRespostaBLE& (0+7)
  2577                           
  2578                           ;Main.c: 323: resposta();
  2579  09A8  2F4D               	ljmp	l7826
  2580  09A9                     l8338:	
  2581                           
  2582                           ;Main.c: 326: else{
  2583                           ;Main.c: 327: UART_send_char(0x55);
  2584  09A9  3055               	movlw	85
  2585  09AA  2705  158A         	fcall	_UART_send_char
  2586                           
  2587                           ;Main.c: 328: UART_send_char(0x40);
  2588  09AC  3040               	movlw	64
  2589  09AD  2705  158A         	fcall	_UART_send_char
  2590                           
  2591                           ;Main.c: 329: UART_send_char(0x00);
  2592  09AF  3000               	movlw	0
  2593  09B0  2705  158A         	fcall	_UART_send_char
  2594                           
  2595                           ;Main.c: 330: UART_send_char(0x40);
  2596  09B2  3040               	movlw	64
  2597  09B3  2705  158A         	fcall	_UART_send_char
  2598                           
  2599                           ;Main.c: 331: UART_send_char(0x0A);
  2600  09B5  300A               	movlw	10
  2601  09B6  2F05               	ljmp	_UART_send_char
  2602  09B7                     __end_of_comandoRx:	
  2603  09B7                     __ptext994:	
  2604 ;; =============== function _initVars ends ============
  2605                           
  2606                           
  2607 ;; *************** function _logSave *****************
  2608 ;; Defined at:
  2609 ;;		line 154 in file "Main.c"
  2610 ;; Parameters:    Size  Location     Type
  2611 ;;		None
  2612 ;; Auto vars:     Size  Location     Type
  2613 ;;  auxAddr         2   39[BANK0 ] unsigned int 
  2614 ;; Return value:  Size  Location     Type
  2615 ;;		None               void
  2616 ;; Registers used:
  2617 ;;		wreg, status,2, status,0, pclath, cstack
  2618 ;; Tracked objects:
  2619 ;;		On entry : 60/0
  2620 ;;		On exit  : 0/0
  2621 ;;		Unchanged: 0/0
  2622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2623 ;;      Params:         0       0       0       0
  2624 ;;      Locals:         0       2       0       0
  2625 ;;      Temps:          0       2       0       0
  2626 ;;      Totals:         0       4       0       0
  2627 ;;Total ram usage:        4 bytes
  2628 ;; Hardware stack levels used:    1
  2629 ;; Hardware stack levels required when called:    7
  2630 ;; This function calls:
  2631 ;;		___wmul
  2632 ;;		_sendTriggerMeasurementCmd
  2633 ;;		_readTemp
  2634 ;;		_eepromWriteByte
  2635 ;; This function is called by:
  2636 ;;		_main
  2637 ;; This function uses a non-reentrant model
  2638 ;;
  2639  09B7                     _logSave:	
  2640                           
  2641                           ;Main.c: 155: if (numOfLogs < 10912){
  2642                           
  2643                           ; Regs used in _logSave: [wreg+status,2+status,0+pclath+cstack]
  2644  09B7  302A               	movlw	42
  2645  09B8  025F               	subwf	_numOfLogs+1,w
  2646  09B9  30A0               	movlw	160
  2647  09BA  1903               	skipnz
  2648  09BB  025E               	subwf	_numOfLogs,w
  2649  09BC  1803               	skipnc
  2650  09BD  0008               	return
  2651                           
  2652                           ;Main.c: 156: unsigned int auxAddr;
  2653                           ;Main.c: 158: auxAddr = 0x0020+(numOfLogs*3);
  2654  09BE  085F               	movf	_numOfLogs+1,w
  2655  09BF  00A1               	movwf	?___wmul+1
  2656  09C0  085E               	movf	_numOfLogs,w
  2657  09C1  00A0               	movwf	?___wmul
  2658  09C2  3003               	movlw	3
  2659  09C3  00A2               	movwf	?___wmul+2
  2660  09C4  01A3               	clrf	?___wmul+3
  2661  09C5  2342  158A         	fcall	___wmul
  2662  09C7  0821               	movf	?___wmul+1,w
  2663  09C8  00C8               	movwf	logSave@auxAddr+1
  2664  09C9  0820               	movf	?___wmul,w
  2665  09CA  00C7               	movwf	logSave@auxAddr
  2666  09CB  3020               	movlw	32
  2667  09CC  07C7               	addwf	logSave@auxAddr,f
  2668  09CD  1803               	skipnc
  2669  09CE  0AC8               	incf	logSave@auxAddr+1,f
  2670                           
  2671                           ;Main.c: 160: sendTriggerMeasurementCmd();
  2672  09CF  2006  158A         	fcall	_sendTriggerMeasurementCmd
  2673                           
  2674                           ;Main.c: 161: _delay((unsigned long)((100)*(4000000/4000.0)));
  2675  09D1  3082               	movlw	130
  2676  09D2  00C6               	movwf	??_logSave+1
  2677  09D3  30DD               	movlw	221
  2678  09D4  00C5               	movwf	??_logSave
  2679  09D5                     u1637:	
  2680  09D5  0BC5               	decfsz	??_logSave,f
  2681  09D6  29D5               	goto	u1637
  2682  09D7  0BC6               	decfsz	??_logSave+1,f
  2683  09D8  29D5               	goto	u1637
  2684  09D9  29DA               	nop2
  2685                           
  2686                           ;Main.c: 162: readTemp();
  2687  09DA  2498  158A         	fcall	_readTemp
  2688                           
  2689                           ;Main.c: 165: eepromWriteByte(auxAddr,readTemperature);
  2690  09DC  0848               	movf	logSave@auxAddr+1,w
  2691  09DD  00A7               	movwf	?_eepromWriteByte+1
  2692  09DE  0847               	movf	logSave@auxAddr,w
  2693  09DF  00A6               	movwf	?_eepromWriteByte
  2694  09E0  0862               	movf	_readTemperature,w
  2695  09E1  00A8               	movwf	?_eepromWriteByte+2
  2696  09E2  2333  158A         	fcall	_eepromWriteByte
  2697                           
  2698                           ;Main.c: 166: auxAddr++;
  2699  09E4  0AC7               	incf	logSave@auxAddr,f
  2700  09E5  1903               	skipnz
  2701  09E6  0AC8               	incf	logSave@auxAddr+1,f
  2702                           
  2703                           ;Main.c: 167: _delay((unsigned long)((5)*(4000000/4000.0)));
  2704  09E7  3007               	movlw	7
  2705  09E8  00C6               	movwf	??_logSave+1
  2706  09E9  307D               	movlw	125
  2707  09EA  00C5               	movwf	??_logSave
  2708  09EB                     u1647:	
  2709  09EB  0BC5               	decfsz	??_logSave,f
  2710  09EC  29EB               	goto	u1647
  2711  09ED  0BC6               	decfsz	??_logSave+1,f
  2712  09EE  29EB               	goto	u1647
  2713                           
  2714                           ;Main.c: 168: eepromWriteByte(auxAddr,readTemperatureDec);
  2715  09EF  1283               	bcf	3,5	;RP0=0, select bank0
  2716  09F0  1303               	bcf	3,6	;RP1=0, select bank0
  2717  09F1  0848               	movf	logSave@auxAddr+1,w
  2718  09F2  00A7               	movwf	?_eepromWriteByte+1
  2719  09F3  0847               	movf	logSave@auxAddr,w
  2720  09F4  00A6               	movwf	?_eepromWriteByte
  2721  09F5  0863               	movf	_readTemperatureDec,w
  2722  09F6  00A8               	movwf	?_eepromWriteByte+2
  2723  09F7  2333  158A         	fcall	_eepromWriteByte
  2724                           
  2725                           ;Main.c: 169: auxAddr++;
  2726  09F9  0AC7               	incf	logSave@auxAddr,f
  2727  09FA  1903               	skipnz
  2728  09FB  0AC8               	incf	logSave@auxAddr+1,f
  2729                           
  2730                           ;Main.c: 170: _delay((unsigned long)((5)*(4000000/4000.0)));
  2731  09FC  3007               	movlw	7
  2732  09FD  00C6               	movwf	??_logSave+1
  2733  09FE  307D               	movlw	125
  2734  09FF  00C5               	movwf	??_logSave
  2735  0A00                     u1657:	
  2736  0A00  0BC5               	decfsz	??_logSave,f
  2737  0A01  2A00               	goto	u1657
  2738  0A02  0BC6               	decfsz	??_logSave+1,f
  2739  0A03  2A00               	goto	u1657
  2740                           
  2741                           ;Main.c: 171: eepromWriteByte(auxAddr,readUmidity);
  2742  0A04  1283               	bcf	3,5	;RP0=0, select bank0
  2743  0A05  1303               	bcf	3,6	;RP1=0, select bank0
  2744  0A06  0848               	movf	logSave@auxAddr+1,w
  2745  0A07  00A7               	movwf	?_eepromWriteByte+1
  2746  0A08  0847               	movf	logSave@auxAddr,w
  2747  0A09  00A6               	movwf	?_eepromWriteByte
  2748  0A0A  0864               	movf	_readUmidity,w
  2749  0A0B  00A8               	movwf	?_eepromWriteByte+2
  2750  0A0C  2333  158A         	fcall	_eepromWriteByte
  2751                           
  2752                           ;Main.c: 172: _delay((unsigned long)((5)*(4000000/4000.0)));
  2753  0A0E  3007               	movlw	7
  2754  0A0F  00C6               	movwf	??_logSave+1
  2755  0A10  307D               	movlw	125
  2756  0A11  00C5               	movwf	??_logSave
  2757  0A12                     u1667:	
  2758  0A12  0BC5               	decfsz	??_logSave,f
  2759  0A13  2A12               	goto	u1667
  2760  0A14  0BC6               	decfsz	??_logSave+1,f
  2761  0A15  2A12               	goto	u1667
  2762                           
  2763                           ;Main.c: 175: numOfLogs++;
  2764  0A16  1283               	bcf	3,5	;RP0=0, select bank0
  2765  0A17  1303               	bcf	3,6	;RP1=0, select bank0
  2766  0A18  0ADE               	incf	_numOfLogs,f
  2767  0A19  1903               	skipnz
  2768  0A1A  0ADF               	incf	_numOfLogs+1,f
  2769                           
  2770                           ;Main.c: 176: eepromWriteByte(0x0006,numOfLogs>>8);
  2771  0A1B  3006               	movlw	6
  2772  0A1C  00A6               	movwf	?_eepromWriteByte
  2773  0A1D  01A7               	clrf	?_eepromWriteByte+1
  2774  0A1E  085F               	movf	_numOfLogs+1,w
  2775  0A1F  00A8               	movwf	?_eepromWriteByte+2
  2776  0A20  2333  158A         	fcall	_eepromWriteByte
  2777                           
  2778                           ;Main.c: 177: _delay((unsigned long)((5)*(4000000/4000.0)));
  2779  0A22  3007               	movlw	7
  2780  0A23  00C6               	movwf	??_logSave+1
  2781  0A24  307D               	movlw	125
  2782  0A25  00C5               	movwf	??_logSave
  2783  0A26                     u1677:	
  2784  0A26  0BC5               	decfsz	??_logSave,f
  2785  0A27  2A26               	goto	u1677
  2786  0A28  0BC6               	decfsz	??_logSave+1,f
  2787  0A29  2A26               	goto	u1677
  2788                           
  2789                           ;Main.c: 178: eepromWriteByte(0x0007,numOfLogs);
  2790  0A2A  3007               	movlw	7
  2791  0A2B  1283               	bcf	3,5	;RP0=0, select bank0
  2792  0A2C  1303               	bcf	3,6	;RP1=0, select bank0
  2793  0A2D  00A6               	movwf	?_eepromWriteByte
  2794  0A2E  01A7               	clrf	?_eepromWriteByte+1
  2795  0A2F  085E               	movf	_numOfLogs,w
  2796  0A30  00A8               	movwf	?_eepromWriteByte+2
  2797  0A31  2333  158A         	fcall	_eepromWriteByte
  2798                           
  2799                           ;Main.c: 179: _delay((unsigned long)((5)*(4000000/4000.0)));
  2800  0A33  3007               	movlw	7
  2801  0A34  00C6               	movwf	??_logSave+1
  2802  0A35  307D               	movlw	125
  2803  0A36  00C5               	movwf	??_logSave
  2804  0A37                     u1687:	
  2805  0A37  0BC5               	decfsz	??_logSave,f
  2806  0A38  2A37               	goto	u1687
  2807  0A39  0BC6               	decfsz	??_logSave+1,f
  2808  0A3A  2A37               	goto	u1687
  2809  0A3B  0008               	return
  2810  0A3C                     __end_of_logSave:	
  2811  0A3C                     __ptext998:	
  2812 ;; =============== function _eepromReadLog ends ============
  2813                           
  2814                           
  2815 ;; *************** function _startLogCmd *****************
  2816 ;; Defined at:
  2817 ;;		line 59 in file "protocolo.c"
  2818 ;; Parameters:    Size  Location     Type
  2819 ;;		None
  2820 ;; Auto vars:     Size  Location     Type
  2821 ;;		None
  2822 ;; Return value:  Size  Location     Type
  2823 ;;		None               void
  2824 ;; Registers used:
  2825 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2826 ;; Tracked objects:
  2827 ;;		On entry : 0/120
  2828 ;;		On exit  : 60/20
  2829 ;;		Unchanged: 0/0
  2830 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  2831 ;;      Params:         0       0       0       0
  2832 ;;      Locals:         0       0       0       0
  2833 ;;      Temps:          0       2       0       0
  2834 ;;      Totals:         0       2       0       0
  2835 ;;Total ram usage:        2 bytes
  2836 ;; Hardware stack levels used:    1
  2837 ;; Hardware stack levels required when called:    7
  2838 ;; This function calls:
  2839 ;;		_eepromWriteByte
  2840 ;;		_checksumCalc
  2841 ;; This function is called by:
  2842 ;;		_comandoRx
  2843 ;; This function uses a non-reentrant model
  2844 ;;
  2845  0A3C                     _startLogCmd:	
  2846                           
  2847                           ;protocolo.c: 62: TMR1ON = 0;
  2848                           
  2849 ;; hardware stack exceeded
  2850                           ; Regs used in _startLogCmd: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2851  0A3C  1283               	bcf	3,5	;RP0=0, select bank0
  2852  0A3D  1303               	bcf	3,6	;RP1=0, select bank0
  2853  0A3E  1010               	bcf	16,0
  2854                           
  2855                           ;protocolo.c: 63: TMR1L = 0x00;
  2856  0A3F  018E               	clrf	14	;volatile
  2857                           
  2858                           ;protocolo.c: 64: TMR1H = 0x60;
  2859  0A40  3060               	movlw	96
  2860  0A41  008F               	movwf	15	;volatile
  2861                           
  2862                           ;protocolo.c: 65: TMR1IF = 0;
  2863  0A42  100C               	bcf	12,0
  2864                           
  2865                           ;protocolo.c: 66: TMR1ON = 1;
  2866  0A43  1410               	bsf	16,0
  2867                           
  2868                           ;protocolo.c: 69: startTime = cmd[3];
  2869  0A44  1683               	bsf	3,5	;RP0=1, select bank1
  2870  0A45  084B               	movf	(_cmd^(0+128)+3),w
  2871  0A46  1283               	bcf	3,5	;RP0=0, select bank0
  2872  0A47  00D0               	movwf	_startTime
  2873  0A48  01D1               	clrf	_startTime+1
  2874  0A49  01D2               	clrf	_startTime+2
  2875  0A4A  01D3               	clrf	_startTime+3
  2876                           
  2877                           ;protocolo.c: 70: startTime <<= 8;
  2878  0A4B  0852               	movf	_startTime+2,w
  2879  0A4C  00D3               	movwf	_startTime+3
  2880  0A4D  0851               	movf	_startTime+1,w
  2881  0A4E  00D2               	movwf	_startTime+2
  2882  0A4F  0850               	movf	_startTime,w
  2883  0A50  00D1               	movwf	_startTime+1
  2884  0A51  01D0               	clrf	_startTime
  2885                           
  2886                           ;protocolo.c: 71: startTime +=cmd[4];
  2887  0A52  1683               	bsf	3,5	;RP0=1, select bank1
  2888  0A53  084C               	movf	(_cmd^(0+128)+4),w
  2889  0A54  1283               	bcf	3,5	;RP0=0, select bank0
  2890  0A55  07D0               	addwf	_startTime,f
  2891  0A56  3001               	movlw	1
  2892  0A57  1803               	skipnc
  2893  0A58  07D1               	addwf	_startTime+1,f
  2894  0A59  1803               	skipnc
  2895  0A5A  07D2               	addwf	_startTime+2,f
  2896  0A5B  1803               	skipnc
  2897  0A5C  07D3               	addwf	_startTime+3,f
  2898                           
  2899                           ;protocolo.c: 72: startTime <<= 8;
  2900  0A5D  0852               	movf	_startTime+2,w
  2901  0A5E  00D3               	movwf	_startTime+3
  2902  0A5F  0851               	movf	_startTime+1,w
  2903  0A60  00D2               	movwf	_startTime+2
  2904  0A61  0850               	movf	_startTime,w
  2905  0A62  00D1               	movwf	_startTime+1
  2906  0A63  01D0               	clrf	_startTime
  2907                           
  2908                           ;protocolo.c: 73: startTime +=cmd[5];
  2909  0A64  1683               	bsf	3,5	;RP0=1, select bank1
  2910  0A65  084D               	movf	(_cmd^(0+128)+5),w
  2911  0A66  1283               	bcf	3,5	;RP0=0, select bank0
  2912  0A67  07D0               	addwf	_startTime,f
  2913  0A68  3001               	movlw	1
  2914  0A69  1803               	skipnc
  2915  0A6A  07D1               	addwf	_startTime+1,f
  2916  0A6B  1803               	skipnc
  2917  0A6C  07D2               	addwf	_startTime+2,f
  2918  0A6D  1803               	skipnc
  2919  0A6E  07D3               	addwf	_startTime+3,f
  2920                           
  2921                           ;protocolo.c: 74: startTime <<= 8;
  2922  0A6F  0852               	movf	_startTime+2,w
  2923  0A70  00D3               	movwf	_startTime+3
  2924  0A71  0851               	movf	_startTime+1,w
  2925  0A72  00D2               	movwf	_startTime+2
  2926  0A73  0850               	movf	_startTime,w
  2927  0A74  00D1               	movwf	_startTime+1
  2928  0A75  01D0               	clrf	_startTime
  2929                           
  2930                           ;protocolo.c: 75: startTime +=cmd[6];
  2931  0A76  1683               	bsf	3,5	;RP0=1, select bank1
  2932  0A77  084E               	movf	(_cmd^(0+128)+6),w
  2933  0A78  1283               	bcf	3,5	;RP0=0, select bank0
  2934  0A79  07D0               	addwf	_startTime,f
  2935  0A7A  3001               	movlw	1
  2936  0A7B  1803               	skipnc
  2937  0A7C  07D1               	addwf	_startTime+1,f
  2938  0A7D  1803               	skipnc
  2939  0A7E  07D2               	addwf	_startTime+2,f
  2940  0A7F  1803               	skipnc
  2941  0A80  07D3               	addwf	_startTime+3,f
  2942                           
  2943                           ;protocolo.c: 76: timeNow = startTime;
  2944  0A81  0853               	movf	_startTime+3,w
  2945  0A82  00D7               	movwf	_timeNow+3
  2946  0A83  0852               	movf	_startTime+2,w
  2947  0A84  00D6               	movwf	_timeNow+2
  2948  0A85  0851               	movf	_startTime+1,w
  2949  0A86  00D5               	movwf	_timeNow+1
  2950  0A87  0850               	movf	_startTime,w
  2951  0A88  00D4               	movwf	_timeNow
  2952                           
  2953                           ;protocolo.c: 77: timer = newTimer;
  2954  0A89  0859               	movf	_newTimer+1,w
  2955  0A8A  00DB               	movwf	_timer+1
  2956  0A8B  0858               	movf	_newTimer,w
  2957  0A8C  00DA               	movwf	_timer
  2958                           
  2959                           ;protocolo.c: 78: contTimer = timer;
  2960  0A8D  085B               	movf	_timer+1,w
  2961  0A8E  00DD               	movwf	_contTimer+1
  2962  0A8F  085A               	movf	_timer,w
  2963  0A90  00DC               	movwf	_contTimer
  2964  0A91  3006               	movlw	6
  2965                           
  2966                           ;protocolo.c: 79: logStatus = 1;
  2967  0A92  167A               	bsf	_logStatus/(0+8),_logStatus& (0+7)
  2968                           
  2969                           ;protocolo.c: 80: numOfLogs = 0;
  2970  0A93  01DE               	clrf	_numOfLogs
  2971  0A94  01DF               	clrf	_numOfLogs+1
  2972                           
  2973                           ;protocolo.c: 83: eepromWriteByte(0x0006,0x00);
  2974  0A95  00A6               	movwf	?_eepromWriteByte
  2975  0A96  01A7               	clrf	?_eepromWriteByte+1
  2976  0A97  01A8               	clrf	?_eepromWriteByte+2
  2977  0A98  2333  158A         	fcall	_eepromWriteByte
  2978                           
  2979                           ;protocolo.c: 84: _delay((unsigned long)((5)*(4000000/4000.0)));
  2980  0A9A  3007               	movlw	7
  2981  0A9B  00AA               	movwf	??_startLogCmd+1
  2982  0A9C  307D               	movlw	125
  2983  0A9D  00A9               	movwf	??_startLogCmd
  2984  0A9E                     u1697:	
  2985  0A9E  0BA9               	decfsz	??_startLogCmd,f
  2986  0A9F  2A9E               	goto	u1697
  2987  0AA0  0BAA               	decfsz	??_startLogCmd+1,f
  2988  0AA1  2A9E               	goto	u1697
  2989                           
  2990                           ;protocolo.c: 85: eepromWriteByte(0x0007,0x00);
  2991  0AA2  3007               	movlw	7
  2992  0AA3  1283               	bcf	3,5	;RP0=0, select bank0
  2993  0AA4  1303               	bcf	3,6	;RP1=0, select bank0
  2994  0AA5  00A6               	movwf	?_eepromWriteByte
  2995  0AA6  01A7               	clrf	?_eepromWriteByte+1
  2996  0AA7  01A8               	clrf	?_eepromWriteByte+2
  2997  0AA8  2333  158A         	fcall	_eepromWriteByte
  2998                           
  2999                           ;protocolo.c: 86: _delay((unsigned long)((5)*(4000000/4000.0)));
  3000  0AAA  3007               	movlw	7
  3001  0AAB  00AA               	movwf	??_startLogCmd+1
  3002  0AAC  307D               	movlw	125
  3003  0AAD  00A9               	movwf	??_startLogCmd
  3004  0AAE                     u1707:	
  3005  0AAE  0BA9               	decfsz	??_startLogCmd,f
  3006  0AAF  2AAE               	goto	u1707
  3007  0AB0  0BAA               	decfsz	??_startLogCmd+1,f
  3008  0AB1  2AAE               	goto	u1707
  3009                           
  3010                           ;protocolo.c: 89: eepromWriteByte(0x0004,timer>>8);
  3011  0AB2  3004               	movlw	4
  3012  0AB3  1283               	bcf	3,5	;RP0=0, select bank0
  3013  0AB4  1303               	bcf	3,6	;RP1=0, select bank0
  3014  0AB5  00A6               	movwf	?_eepromWriteByte
  3015  0AB6  01A7               	clrf	?_eepromWriteByte+1
  3016  0AB7  085B               	movf	_timer+1,w
  3017  0AB8  00A8               	movwf	?_eepromWriteByte+2
  3018  0AB9  2333  158A         	fcall	_eepromWriteByte
  3019                           
  3020                           ;protocolo.c: 90: _delay((unsigned long)((5)*(4000000/4000.0)));
  3021  0ABB  3007               	movlw	7
  3022  0ABC  00AA               	movwf	??_startLogCmd+1
  3023  0ABD  307D               	movlw	125
  3024  0ABE  00A9               	movwf	??_startLogCmd
  3025  0ABF                     u1717:	
  3026  0ABF  0BA9               	decfsz	??_startLogCmd,f
  3027  0AC0  2ABF               	goto	u1717
  3028  0AC1  0BAA               	decfsz	??_startLogCmd+1,f
  3029  0AC2  2ABF               	goto	u1717
  3030                           
  3031                           ;protocolo.c: 91: eepromWriteByte(0x0005,timer);
  3032  0AC3  3005               	movlw	5
  3033  0AC4  1283               	bcf	3,5	;RP0=0, select bank0
  3034  0AC5  1303               	bcf	3,6	;RP1=0, select bank0
  3035  0AC6  00A6               	movwf	?_eepromWriteByte
  3036  0AC7  01A7               	clrf	?_eepromWriteByte+1
  3037  0AC8  085A               	movf	_timer,w
  3038  0AC9  00A8               	movwf	?_eepromWriteByte+2
  3039  0ACA  2333  158A         	fcall	_eepromWriteByte
  3040                           
  3041                           ;protocolo.c: 92: _delay((unsigned long)((5)*(4000000/4000.0)));
  3042  0ACC  3007               	movlw	7
  3043  0ACD  00AA               	movwf	??_startLogCmd+1
  3044  0ACE  307D               	movlw	125
  3045  0ACF  00A9               	movwf	??_startLogCmd
  3046  0AD0                     u1727:	
  3047  0AD0  0BA9               	decfsz	??_startLogCmd,f
  3048  0AD1  2AD0               	goto	u1727
  3049  0AD2  0BAA               	decfsz	??_startLogCmd+1,f
  3050  0AD3  2AD0               	goto	u1727
  3051                           
  3052                           ;protocolo.c: 95: eepromWriteByte(0x0000,cmd[3]);
  3053  0AD4  1283               	bcf	3,5	;RP0=0, select bank0
  3054  0AD5  1303               	bcf	3,6	;RP1=0, select bank0
  3055  0AD6  01A6               	clrf	?_eepromWriteByte
  3056  0AD7  01A7               	clrf	?_eepromWriteByte+1
  3057  0AD8  1683               	bsf	3,5	;RP0=1, select bank1
  3058  0AD9  084B               	movf	(_cmd^(0+128)+3),w
  3059  0ADA  1283               	bcf	3,5	;RP0=0, select bank0
  3060  0ADB  00A8               	movwf	?_eepromWriteByte+2
  3061  0ADC  2333  158A         	fcall	_eepromWriteByte
  3062                           
  3063                           ;protocolo.c: 96: _delay((unsigned long)((5)*(4000000/4000.0)));
  3064  0ADE  3007               	movlw	7
  3065  0ADF  00AA               	movwf	??_startLogCmd+1
  3066  0AE0  307D               	movlw	125
  3067  0AE1  00A9               	movwf	??_startLogCmd
  3068  0AE2                     u1737:	
  3069  0AE2  0BA9               	decfsz	??_startLogCmd,f
  3070  0AE3  2AE2               	goto	u1737
  3071  0AE4  0BAA               	decfsz	??_startLogCmd+1,f
  3072  0AE5  2AE2               	goto	u1737
  3073                           
  3074                           ;protocolo.c: 97: eepromWriteByte(0x0001,cmd[4]);
  3075  0AE6  1283               	bcf	3,5	;RP0=0, select bank0
  3076  0AE7  1303               	bcf	3,6	;RP1=0, select bank0
  3077  0AE8  01A6               	clrf	?_eepromWriteByte
  3078  0AE9  0AA6               	incf	?_eepromWriteByte,f
  3079  0AEA  01A7               	clrf	?_eepromWriteByte+1
  3080  0AEB  1683               	bsf	3,5	;RP0=1, select bank1
  3081  0AEC  084C               	movf	(_cmd^(0+128)+4),w
  3082  0AED  1283               	bcf	3,5	;RP0=0, select bank0
  3083  0AEE  00A8               	movwf	?_eepromWriteByte+2
  3084  0AEF  2333  158A         	fcall	_eepromWriteByte
  3085                           
  3086                           ;protocolo.c: 98: _delay((unsigned long)((5)*(4000000/4000.0)));
  3087  0AF1  3007               	movlw	7
  3088  0AF2  00AA               	movwf	??_startLogCmd+1
  3089  0AF3  307D               	movlw	125
  3090  0AF4  00A9               	movwf	??_startLogCmd
  3091  0AF5                     u1747:	
  3092  0AF5  0BA9               	decfsz	??_startLogCmd,f
  3093  0AF6  2AF5               	goto	u1747
  3094  0AF7  0BAA               	decfsz	??_startLogCmd+1,f
  3095  0AF8  2AF5               	goto	u1747
  3096                           
  3097                           ;protocolo.c: 99: eepromWriteByte(0x0002,cmd[5]);
  3098  0AF9  3002               	movlw	2
  3099  0AFA  1283               	bcf	3,5	;RP0=0, select bank0
  3100  0AFB  1303               	bcf	3,6	;RP1=0, select bank0
  3101  0AFC  00A6               	movwf	?_eepromWriteByte
  3102  0AFD  01A7               	clrf	?_eepromWriteByte+1
  3103  0AFE  1683               	bsf	3,5	;RP0=1, select bank1
  3104  0AFF  084D               	movf	(_cmd^(0+128)+5),w
  3105  0B00  1283               	bcf	3,5	;RP0=0, select bank0
  3106  0B01  00A8               	movwf	?_eepromWriteByte+2
  3107  0B02  2333  158A         	fcall	_eepromWriteByte
  3108                           
  3109                           ;protocolo.c: 100: _delay((unsigned long)((5)*(4000000/4000.0)));
  3110  0B04  3007               	movlw	7
  3111  0B05  00AA               	movwf	??_startLogCmd+1
  3112  0B06  307D               	movlw	125
  3113  0B07  00A9               	movwf	??_startLogCmd
  3114  0B08                     u1757:	
  3115  0B08  0BA9               	decfsz	??_startLogCmd,f
  3116  0B09  2B08               	goto	u1757
  3117  0B0A  0BAA               	decfsz	??_startLogCmd+1,f
  3118  0B0B  2B08               	goto	u1757
  3119                           
  3120                           ;protocolo.c: 101: eepromWriteByte(0x0003,cmd[6]);
  3121  0B0C  3003               	movlw	3
  3122  0B0D  1283               	bcf	3,5	;RP0=0, select bank0
  3123  0B0E  1303               	bcf	3,6	;RP1=0, select bank0
  3124  0B0F  00A6               	movwf	?_eepromWriteByte
  3125  0B10  01A7               	clrf	?_eepromWriteByte+1
  3126  0B11  1683               	bsf	3,5	;RP0=1, select bank1
  3127  0B12  084E               	movf	(_cmd^(0+128)+6),w
  3128  0B13  1283               	bcf	3,5	;RP0=0, select bank0
  3129  0B14  00A8               	movwf	?_eepromWriteByte+2
  3130  0B15  2333  158A         	fcall	_eepromWriteByte
  3131                           
  3132                           ;protocolo.c: 102: _delay((unsigned long)((5)*(4000000/4000.0)));
  3133  0B17  3007               	movlw	7
  3134  0B18  00AA               	movwf	??_startLogCmd+1
  3135  0B19  307D               	movlw	125
  3136  0B1A  00A9               	movwf	??_startLogCmd
  3137  0B1B                     u1767:	
  3138  0B1B  0BA9               	decfsz	??_startLogCmd,f
  3139  0B1C  2B1B               	goto	u1767
  3140  0B1D  0BAA               	decfsz	??_startLogCmd+1,f
  3141  0B1E  2B1B               	goto	u1767
  3142                           
  3143                           ;protocolo.c: 105: bufferTxLen = 5;
  3144  0B1F  3005               	movlw	5
  3145  0B20  1283               	bcf	3,5	;RP0=0, select bank0
  3146  0B21  1303               	bcf	3,6	;RP1=0, select bank0
  3147  0B22  00E0               	movwf	_bufferTxLen
  3148                           
  3149                           ;protocolo.c: 106: bufferTx[0] = 0x55;
  3150  0B23  3055               	movlw	85
  3151  0B24  1683               	bsf	3,5	;RP0=1, select bank1
  3152  0B25  00A0               	movwf	_bufferTx^(0+128)
  3153                           
  3154                           ;protocolo.c: 107: bufferTx[1] = 0x34;
  3155  0B26  3034               	movlw	52
  3156  0B27  00A1               	movwf	(_bufferTx^(0+128)+1)
  3157  0B28  3005               	movlw	5
  3158                           
  3159                           ;protocolo.c: 108: bufferTx[2] = 0x00;
  3160  0B29  01A2               	clrf	(_bufferTx^(0+128)+2)
  3161                           
  3162                           ;protocolo.c: 109: bufferTx[3] = checksumCalc(bufferTx,5);
  3163  0B2A  1283               	bcf	3,5	;RP0=0, select bank0
  3164  0B2B  00A0               	movwf	?_checksumCalc
  3165  0B2C  30A0               	movlw	_bufferTx& (0+255)
  3166  0B2D  2791               	fcall	_checksumCalc
  3167  0B2E  1683               	bsf	3,5	;RP0=1, select bank1
  3168  0B2F  00A3               	movwf	(_bufferTx^(0+128)+3)
  3169                           
  3170                           ;protocolo.c: 110: bufferTx[4] = 0x0A;
  3171  0B30  300A               	movlw	10
  3172  0B31  00A4               	movwf	(_bufferTx^(0+128)+4)
  3173  0B32  0008               	return
  3174  0B33                     __end_of_startLogCmd:	
  3175  0B33                     __ptext1003:	
  3176 ;; =============== function _i2cRestart ends ============
  3177                           
  3178                           
  3179 ;; *************** function _eepromWriteByte *****************
  3180 ;; Defined at:
  3181 ;;		line 22 in file "eepromI2c.c"
  3182 ;; Parameters:    Size  Location     Type
  3183 ;;  addr            2    6[BANK0 ] unsigned int 
  3184 ;;  data            1    8[BANK0 ] unsigned char 
  3185 ;; Auto vars:     Size  Location     Type
  3186 ;;		None
  3187 ;; Return value:  Size  Location     Type
  3188 ;;		None               void
  3189 ;; Registers used:
  3190 ;;		wreg, status,2, status,0, pclath, cstack
  3191 ;; Tracked objects:
  3192 ;;		On entry : 60/0
  3193 ;;		On exit  : 60/0
  3194 ;;		Unchanged: FFF9F/0
  3195 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3196 ;;      Params:         0       3       0       0
  3197 ;;      Locals:         0       0       0       0
  3198 ;;      Temps:          0       0       0       0
  3199 ;;      Totals:         0       3       0       0
  3200 ;;Total ram usage:        3 bytes
  3201 ;; Hardware stack levels used:    1
  3202 ;; Hardware stack levels required when called:    6
  3203 ;; This function calls:
  3204 ;;		_i2cStart
  3205 ;;		_i2cWrite
  3206 ;;		_i2cStop
  3207 ;; This function is called by:
  3208 ;;		_startLogCmd
  3209 ;;		_logSave
  3210 ;; This function uses a non-reentrant model
  3211 ;;
  3212  0B33                     _eepromWriteByte:	
  3213                           
  3214                           ;eepromI2c.c: 23: i2cStart();
  3215                           
  3216 ;; hardware stack exceeded
  3217                           ; Regs used in _eepromWriteByte: [wreg+status,2+status,0+pclath+cstack]
  3218  0B33  26F2  158A         	fcall	_i2cStart
  3219                           
  3220                           ;eepromI2c.c: 24: i2cWrite(0xA0);
  3221  0B35  30A0               	movlw	160
  3222  0B36  26AB  158A         	fcall	_i2cWrite
  3223                           
  3224                           ;eepromI2c.c: 25: i2cWrite(addr>>8);
  3225  0B38  0827               	movf	eepromWriteByte@addr+1,w
  3226  0B39  26AB  158A         	fcall	_i2cWrite
  3227                           
  3228                           ;eepromI2c.c: 26: i2cWrite((unsigned char)addr);
  3229  0B3B  0826               	movf	eepromWriteByte@addr,w
  3230  0B3C  26AB  158A         	fcall	_i2cWrite
  3231                           
  3232                           ;eepromI2c.c: 27: i2cWrite(data);
  3233  0B3E  0828               	movf	eepromWriteByte@data,w
  3234  0B3F  26AB  158A         	fcall	_i2cWrite
  3235                           
  3236                           ;eepromI2c.c: 28: i2cStop();
  3237  0B41  2EFD               	ljmp	l7836
  3238  0B42                     __end_of_eepromWriteByte:	
  3239  0B42                     __ptext1023:	
  3240 ;; =============== function ___lmul ends ============
  3241                           
  3242                           
  3243 ;; *************** function ___wmul *****************
  3244 ;; Defined at:
  3245 ;;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\wmul.c"
  3246 ;; Parameters:    Size  Location     Type
  3247 ;;  multiplier      2    0[BANK0 ] unsigned int 
  3248 ;;  multiplicand    2    2[BANK0 ] unsigned int 
  3249 ;; Auto vars:     Size  Location     Type
  3250 ;;  product         2    4[BANK0 ] unsigned int 
  3251 ;; Return value:  Size  Location     Type
  3252 ;;                  2    0[BANK0 ] unsigned int 
  3253 ;; Registers used:
  3254 ;;		wreg, status,2, status,0
  3255 ;; Tracked objects:
  3256 ;;		On entry : 60/100
  3257 ;;		On exit  : 60/100
  3258 ;;		Unchanged: FFF9F/0
  3259 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3260 ;;      Params:         0       4       0       0
  3261 ;;      Locals:         0       2       0       0
  3262 ;;      Temps:          0       0       0       0
  3263 ;;      Totals:         0       6       0       0
  3264 ;;Total ram usage:        6 bytes
  3265 ;; Hardware stack levels used:    1
  3266 ;; Hardware stack levels required when called:    3
  3267 ;; This function calls:
  3268 ;;		Nothing
  3269 ;; This function is called by:
  3270 ;;		_logSave
  3271 ;;		_comandoRx
  3272 ;; This function uses a non-reentrant model
  3273 ;;
  3274  0B42                     ___wmul:	
  3275                           
  3276                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  3277  0B42  01A4               	clrf	___wmul@product
  3278  0B43  01A5               	clrf	___wmul@product+1
  3279  0B44                     l7684:	
  3280  0B44  1C20               	btfss	___wmul@multiplier,0
  3281  0B45  2B4C               	goto	l7688
  3282  0B46  0822               	movf	___wmul@multiplicand,w
  3283  0B47  07A4               	addwf	___wmul@product,f
  3284  0B48  1803               	skipnc
  3285  0B49  0AA5               	incf	___wmul@product+1,f
  3286  0B4A  0823               	movf	___wmul@multiplicand+1,w
  3287  0B4B  07A5               	addwf	___wmul@product+1,f
  3288  0B4C                     l7688:	
  3289  0B4C  1003               	clrc
  3290  0B4D  0DA2               	rlf	___wmul@multiplicand,f
  3291  0B4E  0DA3               	rlf	___wmul@multiplicand+1,f
  3292  0B4F  1003               	clrc
  3293  0B50  0CA1               	rrf	___wmul@multiplier+1,f
  3294  0B51  0CA0               	rrf	___wmul@multiplier,f
  3295  0B52  0821               	movf	___wmul@multiplier+1,w
  3296  0B53  0420               	iorwf	___wmul@multiplier,w
  3297  0B54  1D03               	skipz
  3298  0B55  2B44               	goto	l7684
  3299  0B56  0825               	movf	___wmul@product+1,w
  3300  0B57  00A1               	movwf	?___wmul+1
  3301  0B58  0824               	movf	___wmul@product,w
  3302  0B59  00A0               	movwf	?___wmul
  3303  0B5A  0008               	return
  3304  0B5B                     __end_of___wmul:	
  3305  0B5B                     __ptext993:	
  3306 ;; =============== function _comandoRx ends ============
  3307                           
  3308                           
  3309 ;; *************** function _initVars *****************
  3310 ;; Defined at:
  3311 ;;		line 343 in file "Main.c"
  3312 ;; Parameters:    Size  Location     Type
  3313 ;;		None
  3314 ;; Auto vars:     Size  Location     Type
  3315 ;;		None
  3316 ;; Return value:  Size  Location     Type
  3317 ;;		None               void
  3318 ;; Registers used:
  3319 ;;		wreg, status,2, status,0, pclath, cstack
  3320 ;; Tracked objects:
  3321 ;;		On entry : 0/0
  3322 ;;		On exit  : 0/0
  3323 ;;		Unchanged: 0/0
  3324 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3325 ;;      Params:         0       0       0       0
  3326 ;;      Locals:         0       0       0       0
  3327 ;;      Temps:          0       2       0       0
  3328 ;;      Totals:         0       2       0       0
  3329 ;;Total ram usage:        2 bytes
  3330 ;; Hardware stack levels used:    1
  3331 ;; Hardware stack levels required when called:    8
  3332 ;; This function calls:
  3333 ;;		_eepromReadByte
  3334 ;; This function is called by:
  3335 ;;		_main
  3336 ;; This function uses a non-reentrant model
  3337 ;;
  3338  0B5B                     _initVars:	
  3339                           
  3340                           ;Main.c: 345: timer = eepromReadByte(0x0004);
  3341                           
  3342 ;; hardware stack exceeded
  3343                           ; Regs used in _initVars: [wreg+status,2+status,0+pclath+cstack]
  3344  0B5B  3004               	movlw	4
  3345  0B5C  1283               	bcf	3,5	;RP0=0, select bank0
  3346  0B5D  1303               	bcf	3,6	;RP1=0, select bank0
  3347  0B5E  00A6               	movwf	?_eepromReadByte
  3348  0B5F  01A7               	clrf	?_eepromReadByte+1
  3349  0B60  241B  158A         	fcall	_eepromReadByte
  3350  0B62  00DA               	movwf	_timer
  3351  0B63  01DB               	clrf	_timer+1
  3352                           
  3353                           ;Main.c: 346: timer<<=8;
  3354  0B64  00DB               	movwf	_timer+1
  3355  0B65  3007               	movlw	7
  3356  0B66  01DA               	clrf	_timer
  3357                           
  3358                           ;Main.c: 347: _delay((unsigned long)((5)*(4000000/4000.0)));
  3359  0B67  00AA               	movwf	??_initVars+1
  3360  0B68  307D               	movlw	125
  3361  0B69  00A9               	movwf	??_initVars
  3362  0B6A                     u1557:	
  3363  0B6A  0BA9               	decfsz	??_initVars,f
  3364  0B6B  2B6A               	goto	u1557
  3365  0B6C  0BAA               	decfsz	??_initVars+1,f
  3366  0B6D  2B6A               	goto	u1557
  3367                           
  3368                           ;Main.c: 348: timer += eepromReadByte(0x0005);
  3369  0B6E  3005               	movlw	5
  3370  0B6F  1283               	bcf	3,5	;RP0=0, select bank0
  3371  0B70  1303               	bcf	3,6	;RP1=0, select bank0
  3372  0B71  00A6               	movwf	?_eepromReadByte
  3373  0B72  01A7               	clrf	?_eepromReadByte+1
  3374  0B73  241B  158A         	fcall	_eepromReadByte
  3375  0B75  07DA               	addwf	_timer,f
  3376  0B76  1803               	skipnc
  3377  0B77  0ADB               	incf	_timer+1,f
  3378                           
  3379                           ;Main.c: 349: _delay((unsigned long)((5)*(4000000/4000.0)));
  3380  0B78  3007               	movlw	7
  3381  0B79  00AA               	movwf	??_initVars+1
  3382  0B7A  307D               	movlw	125
  3383  0B7B  00A9               	movwf	??_initVars
  3384  0B7C                     u1567:	
  3385  0B7C  0BA9               	decfsz	??_initVars,f
  3386  0B7D  2B7C               	goto	u1567
  3387  0B7E  0BAA               	decfsz	??_initVars+1,f
  3388  0B7F  2B7C               	goto	u1567
  3389                           
  3390                           ;Main.c: 351: contTimer = timer;
  3391  0B80  1283               	bcf	3,5	;RP0=0, select bank0
  3392  0B81  1303               	bcf	3,6	;RP1=0, select bank0
  3393  0B82  085B               	movf	_timer+1,w
  3394  0B83  00DD               	movwf	_contTimer+1
  3395  0B84  085A               	movf	_timer,w
  3396  0B85  00DC               	movwf	_contTimer
  3397                           
  3398                           ;Main.c: 352: newTimer = timer;
  3399  0B86  085B               	movf	_timer+1,w
  3400  0B87  00D9               	movwf	_newTimer+1
  3401  0B88  085A               	movf	_timer,w
  3402  0B89  00D8               	movwf	_newTimer
  3403                           
  3404                           ;Main.c: 355: startTime = eepromReadByte(0x0000);
  3405  0B8A  01A6               	clrf	?_eepromReadByte
  3406  0B8B  01A7               	clrf	?_eepromReadByte+1
  3407  0B8C  241B  158A         	fcall	_eepromReadByte
  3408  0B8E  00D0               	movwf	_startTime
  3409  0B8F  01D1               	clrf	_startTime+1
  3410  0B90  01D2               	clrf	_startTime+2
  3411  0B91  01D3               	clrf	_startTime+3
  3412                           
  3413                           ;Main.c: 356: startTime<<=8;
  3414  0B92  0852               	movf	_startTime+2,w
  3415  0B93  00D3               	movwf	_startTime+3
  3416  0B94  0851               	movf	_startTime+1,w
  3417  0B95  00D2               	movwf	_startTime+2
  3418  0B96  0850               	movf	_startTime,w
  3419  0B97  00D1               	movwf	_startTime+1
  3420  0B98  3007               	movlw	7
  3421  0B99  01D0               	clrf	_startTime
  3422                           
  3423                           ;Main.c: 357: _delay((unsigned long)((5)*(4000000/4000.0)));
  3424  0B9A  00AA               	movwf	??_initVars+1
  3425  0B9B  307D               	movlw	125
  3426  0B9C  00A9               	movwf	??_initVars
  3427  0B9D                     u1577:	
  3428  0B9D  0BA9               	decfsz	??_initVars,f
  3429  0B9E  2B9D               	goto	u1577
  3430  0B9F  0BAA               	decfsz	??_initVars+1,f
  3431  0BA0  2B9D               	goto	u1577
  3432                           
  3433                           ;Main.c: 358: startTime += eepromReadByte(0x0001);
  3434  0BA1  1283               	bcf	3,5	;RP0=0, select bank0
  3435  0BA2  1303               	bcf	3,6	;RP1=0, select bank0
  3436  0BA3  01A6               	clrf	?_eepromReadByte
  3437  0BA4  0AA6               	incf	?_eepromReadByte,f
  3438  0BA5  01A7               	clrf	?_eepromReadByte+1
  3439  0BA6  241B  158A         	fcall	_eepromReadByte
  3440  0BA8  07D0               	addwf	_startTime,f
  3441  0BA9  3001               	movlw	1
  3442  0BAA  1803               	skipnc
  3443  0BAB  07D1               	addwf	_startTime+1,f
  3444  0BAC  1803               	skipnc
  3445  0BAD  07D2               	addwf	_startTime+2,f
  3446  0BAE  1803               	skipnc
  3447  0BAF  07D3               	addwf	_startTime+3,f
  3448                           
  3449                           ;Main.c: 359: startTime<<=8;
  3450  0BB0  0852               	movf	_startTime+2,w
  3451  0BB1  00D3               	movwf	_startTime+3
  3452  0BB2  0851               	movf	_startTime+1,w
  3453  0BB3  00D2               	movwf	_startTime+2
  3454  0BB4  0850               	movf	_startTime,w
  3455  0BB5  00D1               	movwf	_startTime+1
  3456  0BB6  3007               	movlw	7
  3457  0BB7  01D0               	clrf	_startTime
  3458                           
  3459                           ;Main.c: 360: _delay((unsigned long)((5)*(4000000/4000.0)));
  3460  0BB8  00AA               	movwf	??_initVars+1
  3461  0BB9  307D               	movlw	125
  3462  0BBA  00A9               	movwf	??_initVars
  3463  0BBB                     u1587:	
  3464  0BBB  0BA9               	decfsz	??_initVars,f
  3465  0BBC  2BBB               	goto	u1587
  3466  0BBD  0BAA               	decfsz	??_initVars+1,f
  3467  0BBE  2BBB               	goto	u1587
  3468                           
  3469                           ;Main.c: 361: startTime += eepromReadByte(0x0002);
  3470  0BBF  3002               	movlw	2
  3471  0BC0  1283               	bcf	3,5	;RP0=0, select bank0
  3472  0BC1  1303               	bcf	3,6	;RP1=0, select bank0
  3473  0BC2  00A6               	movwf	?_eepromReadByte
  3474  0BC3  01A7               	clrf	?_eepromReadByte+1
  3475  0BC4  241B  158A         	fcall	_eepromReadByte
  3476  0BC6  07D0               	addwf	_startTime,f
  3477  0BC7  3001               	movlw	1
  3478  0BC8  1803               	skipnc
  3479  0BC9  07D1               	addwf	_startTime+1,f
  3480  0BCA  1803               	skipnc
  3481  0BCB  07D2               	addwf	_startTime+2,f
  3482  0BCC  1803               	skipnc
  3483  0BCD  07D3               	addwf	_startTime+3,f
  3484                           
  3485                           ;Main.c: 362: startTime<<=8;
  3486  0BCE  0852               	movf	_startTime+2,w
  3487  0BCF  00D3               	movwf	_startTime+3
  3488  0BD0  0851               	movf	_startTime+1,w
  3489  0BD1  00D2               	movwf	_startTime+2
  3490  0BD2  0850               	movf	_startTime,w
  3491  0BD3  00D1               	movwf	_startTime+1
  3492  0BD4  3007               	movlw	7
  3493  0BD5  01D0               	clrf	_startTime
  3494                           
  3495                           ;Main.c: 363: _delay((unsigned long)((5)*(4000000/4000.0)));
  3496  0BD6  00AA               	movwf	??_initVars+1
  3497  0BD7  307D               	movlw	125
  3498  0BD8  00A9               	movwf	??_initVars
  3499  0BD9                     u1597:	
  3500  0BD9  0BA9               	decfsz	??_initVars,f
  3501  0BDA  2BD9               	goto	u1597
  3502  0BDB  0BAA               	decfsz	??_initVars+1,f
  3503  0BDC  2BD9               	goto	u1597
  3504                           
  3505                           ;Main.c: 364: startTime += eepromReadByte(0x0003);
  3506  0BDD  3003               	movlw	3
  3507  0BDE  1283               	bcf	3,5	;RP0=0, select bank0
  3508  0BDF  1303               	bcf	3,6	;RP1=0, select bank0
  3509  0BE0  00A6               	movwf	?_eepromReadByte
  3510  0BE1  01A7               	clrf	?_eepromReadByte+1
  3511  0BE2  241B  158A         	fcall	_eepromReadByte
  3512  0BE4  07D0               	addwf	_startTime,f
  3513  0BE5  3001               	movlw	1
  3514  0BE6  1803               	skipnc
  3515  0BE7  07D1               	addwf	_startTime+1,f
  3516  0BE8  1803               	skipnc
  3517  0BE9  07D2               	addwf	_startTime+2,f
  3518  0BEA  1803               	skipnc
  3519  0BEB  07D3               	addwf	_startTime+3,f
  3520                           
  3521                           ;Main.c: 365: _delay((unsigned long)((5)*(4000000/4000.0)));
  3522  0BEC  3007               	movlw	7
  3523  0BED  00AA               	movwf	??_initVars+1
  3524  0BEE  307D               	movlw	125
  3525  0BEF  00A9               	movwf	??_initVars
  3526  0BF0                     u1607:	
  3527  0BF0  0BA9               	decfsz	??_initVars,f
  3528  0BF1  2BF0               	goto	u1607
  3529  0BF2  0BAA               	decfsz	??_initVars+1,f
  3530  0BF3  2BF0               	goto	u1607
  3531                           
  3532                           ;Main.c: 368: numOfLogs = eepromReadByte(0x0006);
  3533  0BF4  3006               	movlw	6
  3534  0BF5  1283               	bcf	3,5	;RP0=0, select bank0
  3535  0BF6  1303               	bcf	3,6	;RP1=0, select bank0
  3536  0BF7  00A6               	movwf	?_eepromReadByte
  3537  0BF8  01A7               	clrf	?_eepromReadByte+1
  3538  0BF9  241B  158A         	fcall	_eepromReadByte
  3539  0BFB  00DE               	movwf	_numOfLogs
  3540  0BFC  3007               	movlw	7
  3541  0BFD  01DF               	clrf	_numOfLogs+1
  3542                           
  3543                           ;Main.c: 369: _delay((unsigned long)((5)*(4000000/4000.0)));
  3544  0BFE  00AA               	movwf	??_initVars+1
  3545  0BFF  307D               	movlw	125
  3546  0C00  00A9               	movwf	??_initVars
  3547  0C01                     u1617:	
  3548  0C01  0BA9               	decfsz	??_initVars,f
  3549  0C02  2C01               	goto	u1617
  3550  0C03  0BAA               	decfsz	??_initVars+1,f
  3551  0C04  2C01               	goto	u1617
  3552                           
  3553                           ;Main.c: 370: numOfLogs <<= 8;
  3554  0C05  1283               	bcf	3,5	;RP0=0, select bank0
  3555  0C06  1303               	bcf	3,6	;RP1=0, select bank0
  3556  0C07  085E               	movf	_numOfLogs,w
  3557  0C08  00DF               	movwf	_numOfLogs+1
  3558  0C09  3007               	movlw	7
  3559  0C0A  01DE               	clrf	_numOfLogs
  3560                           
  3561                           ;Main.c: 371: numOfLogs += eepromReadByte(0x0007);
  3562  0C0B  00A6               	movwf	?_eepromReadByte
  3563  0C0C  01A7               	clrf	?_eepromReadByte+1
  3564  0C0D  241B  158A         	fcall	_eepromReadByte
  3565  0C0F  07DE               	addwf	_numOfLogs,f
  3566  0C10  1803               	skipnc
  3567  0C11  0ADF               	incf	_numOfLogs+1,f
  3568                           
  3569                           ;Main.c: 372: _delay((unsigned long)((5)*(4000000/4000.0)));
  3570  0C12  3007               	movlw	7
  3571  0C13  00AA               	movwf	??_initVars+1
  3572  0C14  307D               	movlw	125
  3573  0C15  00A9               	movwf	??_initVars
  3574  0C16                     u1627:	
  3575  0C16  0BA9               	decfsz	??_initVars,f
  3576  0C17  2C16               	goto	u1627
  3577  0C18  0BAA               	decfsz	??_initVars+1,f
  3578  0C19  2C16               	goto	u1627
  3579  0C1A  0008               	return
  3580  0C1B                     __end_of_initVars:	
  3581  0C1B                     __ptext996:	
  3582 ;; =============== function _eepromReadLogPage ends ============
  3583                           
  3584                           
  3585 ;; *************** function _eepromReadByte *****************
  3586 ;; Defined at:
  3587 ;;		line 7 in file "eepromI2c.c"
  3588 ;; Parameters:    Size  Location     Type
  3589 ;;  addr            2    6[BANK0 ] unsigned int 
  3590 ;; Auto vars:     Size  Location     Type
  3591 ;;  buff            1    8[BANK0 ] unsigned char 
  3592 ;; Return value:  Size  Location     Type
  3593 ;;                  1    wreg      unsigned char 
  3594 ;; Registers used:
  3595 ;;		wreg, status,2, status,0, pclath, cstack
  3596 ;; Tracked objects:
  3597 ;;		On entry : 60/0
  3598 ;;		On exit  : 60/0
  3599 ;;		Unchanged: FFF9F/0
  3600 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3601 ;;      Params:         0       2       0       0
  3602 ;;      Locals:         0       1       0       0
  3603 ;;      Temps:          0       0       0       0
  3604 ;;      Totals:         0       3       0       0
  3605 ;;Total ram usage:        3 bytes
  3606 ;; Hardware stack levels used:    1
  3607 ;; Hardware stack levels required when called:    7
  3608 ;; This function calls:
  3609 ;;		_i2cStart
  3610 ;;		_i2cWrite
  3611 ;;		_i2cRestart
  3612 ;;		_i2cRead
  3613 ;;		_i2cNack
  3614 ;;		_i2cStop
  3615 ;; This function is called by:
  3616 ;;		_initVars
  3617 ;; This function uses a non-reentrant model
  3618 ;;
  3619  0C1B                     _eepromReadByte:	
  3620                           
  3621                           ;eepromI2c.c: 8: unsigned char buff;
  3622                           ;eepromI2c.c: 9: i2cStart();
  3623                           
  3624 ;; hardware stack exceeded
  3625                           ; Regs used in _eepromReadByte: [wreg+status,2+status,0+pclath+cstack]
  3626  0C1B  26F2  158A         	fcall	_i2cStart
  3627                           
  3628                           ;eepromI2c.c: 10: i2cWrite(0xA0);
  3629  0C1D  30A0               	movlw	160
  3630  0C1E  26AB  158A         	fcall	_i2cWrite
  3631                           
  3632                           ;eepromI2c.c: 11: i2cWrite(addr>>8);
  3633  0C20  0827               	movf	eepromReadByte@addr+1,w
  3634  0C21  26AB  158A         	fcall	_i2cWrite
  3635                           
  3636                           ;eepromI2c.c: 12: i2cWrite((unsigned char)addr);
  3637  0C23  0826               	movf	eepromReadByte@addr,w
  3638  0C24  26AB  158A         	fcall	_i2cWrite
  3639                           
  3640                           ;eepromI2c.c: 13: i2cRestart();
  3641  0C26  2790  158A         	fcall	_i2cRestart
  3642                           
  3643                           ;eepromI2c.c: 14: i2cWrite(0xA1);
  3644  0C28  30A1               	movlw	161
  3645  0C29  26AB  158A         	fcall	_i2cWrite
  3646                           
  3647                           ;eepromI2c.c: 15: buff = i2cRead();
  3648  0C2B  2643  158A         	fcall	_i2cRead
  3649  0C2D  00A8               	movwf	eepromReadByte@buff
  3650                           
  3651                           ;eepromI2c.c: 16: i2cNack();
  3652  0C2E  26DC  158A         	fcall	_i2cNack
  3653                           
  3654                           ;eepromI2c.c: 17: i2cStop();
  3655  0C30  26FD               	fcall	_i2cStop
  3656                           
  3657                           ;eepromI2c.c: 19: return buff;
  3658  0C31  0828               	movf	eepromReadByte@buff,w
  3659  0C32  0008               	return
  3660  0C33                     __end_of_eepromReadByte:	
  3661  0C33                     __ptext995:	
  3662 ;; =============== function _logSave ends ============
  3663                           
  3664                           
  3665 ;; *************** function _eepromReadLogPage *****************
  3666 ;; Defined at:
  3667 ;;		line 47 in file "eepromI2c.c"
  3668 ;; Parameters:    Size  Location     Type
  3669 ;;  addr            2    6[BANK0 ] unsigned int 
  3670 ;;  buff            1    8[BANK0 ] PTR unsigned char 
  3671 ;;		 -> readDataBuffer(30), 
  3672 ;; Auto vars:     Size  Location     Type
  3673 ;;  i               2   10[BANK0 ] int 
  3674 ;; Return value:  Size  Location     Type
  3675 ;;		None               void
  3676 ;; Registers used:
  3677 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3678 ;; Tracked objects:
  3679 ;;		On entry : 60/100
  3680 ;;		On exit  : 60/0
  3681 ;;		Unchanged: FFE00/0
  3682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3683 ;;      Params:         0       3       0       0
  3684 ;;      Locals:         0       2       0       0
  3685 ;;      Temps:          0       1       0       0
  3686 ;;      Totals:         0       6       0       0
  3687 ;;Total ram usage:        6 bytes
  3688 ;; Hardware stack levels used:    1
  3689 ;; Hardware stack levels required when called:    7
  3690 ;; This function calls:
  3691 ;;		_i2cStart
  3692 ;;		_i2cWrite
  3693 ;;		_i2cRestart
  3694 ;;		_i2cRead
  3695 ;;		_i2cAck
  3696 ;;		_i2cNack
  3697 ;;		_i2cStop
  3698 ;; This function is called by:
  3699 ;;		_comandoRx
  3700 ;; This function uses a non-reentrant model
  3701 ;;
  3702  0C33                     _eepromReadLogPage:	
  3703                           
  3704                           ;eepromI2c.c: 48: i2cStart();
  3705                           
  3706 ;; hardware stack exceeded
  3707                           ; Regs used in _eepromReadLogPage: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3708  0C33  26F2  158A         	fcall	_i2cStart
  3709                           
  3710                           ;eepromI2c.c: 49: i2cWrite(0xA0);
  3711  0C35  30A0               	movlw	160
  3712  0C36  26AB  158A         	fcall	_i2cWrite
  3713                           
  3714                           ;eepromI2c.c: 50: i2cWrite(addr>>8);
  3715  0C38  0827               	movf	eepromReadLogPage@addr+1,w
  3716  0C39  26AB  158A         	fcall	_i2cWrite
  3717                           
  3718                           ;eepromI2c.c: 51: i2cWrite((unsigned char)addr);
  3719  0C3B  0826               	movf	eepromReadLogPage@addr,w
  3720  0C3C  26AB  158A         	fcall	_i2cWrite
  3721                           
  3722                           ;eepromI2c.c: 52: i2cRestart();
  3723  0C3E  2790  158A         	fcall	_i2cRestart
  3724                           
  3725                           ;eepromI2c.c: 53: i2cWrite(0xA1);
  3726  0C40  30A1               	movlw	161
  3727  0C41  26AB  158A         	fcall	_i2cWrite
  3728                           
  3729                           ;eepromI2c.c: 54: for (int i = 0; i<30 ; i++){
  3730  0C43  01AA               	clrf	eepromReadLogPage@i
  3731  0C44  01AB               	clrf	eepromReadLogPage@i+1
  3732  0C45                     l8076:	
  3733                           
  3734                           ;eepromI2c.c: 55: buff[i] = i2cRead();
  3735  0C45  1283               	bcf	3,5	;RP0=0, select bank0
  3736  0C46  1303               	bcf	3,6	;RP1=0, select bank0
  3737  0C47  082A               	movf	eepromReadLogPage@i,w
  3738  0C48  0728               	addwf	eepromReadLogPage@buff,w
  3739  0C49  00A9               	movwf	??_eepromReadLogPage
  3740  0C4A  0084               	movwf	4
  3741  0C4B  2643  158A         	fcall	_i2cRead
  3742  0C4D  1783               	bsf	3,7	;select IRP bank2
  3743  0C4E  0080               	movwf	0
  3744                           
  3745                           ;eepromI2c.c: 56: if (i<29){
  3746  0C4F  082B               	movf	eepromReadLogPage@i+1,w
  3747  0C50  3A80               	xorlw	128
  3748  0C51  00FF               	movwf	127
  3749  0C52  3080               	movlw	128
  3750  0C53  027F               	subwf	127,w
  3751  0C54  1D03               	skipz
  3752  0C55  2C58               	goto	u1285
  3753  0C56  301D               	movlw	29
  3754  0C57  022A               	subwf	eepromReadLogPage@i,w
  3755  0C58                     u1285:	
  3756  0C58  1803               	skipnc
  3757  0C59  2C5C               	goto	l8082
  3758                           
  3759                           ;eepromI2c.c: 57: i2cAck();
  3760  0C5A  26A0  158A         	fcall	_i2cAck
  3761  0C5C                     l8082:	
  3762  0C5C  1283               	bcf	3,5	;RP0=0, select bank0
  3763  0C5D  1303               	bcf	3,6	;RP1=0, select bank0
  3764  0C5E  0AAA               	incf	eepromReadLogPage@i,f
  3765  0C5F  1903               	skipnz
  3766  0C60  0AAB               	incf	eepromReadLogPage@i+1,f
  3767  0C61  082B               	movf	eepromReadLogPage@i+1,w
  3768  0C62  3A80               	xorlw	128
  3769  0C63  00FF               	movwf	127
  3770  0C64  3080               	movlw	128
  3771  0C65  027F               	subwf	127,w
  3772  0C66  1D03               	skipz
  3773  0C67  2C6A               	goto	u1295
  3774  0C68  301E               	movlw	30
  3775  0C69  022A               	subwf	eepromReadLogPage@i,w
  3776  0C6A                     u1295:	
  3777  0C6A  1C03               	skipc
  3778  0C6B  2C45               	goto	l8076
  3779                           
  3780                           ;eepromI2c.c: 58: }
  3781                           ;eepromI2c.c: 59: }
  3782                           ;eepromI2c.c: 60: i2cNack();
  3783  0C6C  26DC  158A         	fcall	_i2cNack
  3784                           
  3785                           ;eepromI2c.c: 61: i2cStop();
  3786  0C6E  2EFD               	ljmp	l7836
  3787  0C6F                     __end_of_eepromReadLogPage:	
  3788  0C6F                     __ptext997:	
  3789 ;; =============== function _eepromReadByte ends ============
  3790                           
  3791                           
  3792 ;; *************** function _eepromReadLog *****************
  3793 ;; Defined at:
  3794 ;;		line 31 in file "eepromI2c.c"
  3795 ;; Parameters:    Size  Location     Type
  3796 ;;  addr            2    6[BANK0 ] unsigned int 
  3797 ;;  buff            1    8[BANK0 ] PTR unsigned char 
  3798 ;;		 -> comandoRx@readData_6105(3), comandoRx@readData(3), readLogData@readData(3), 
  3799 ;; Auto vars:     Size  Location     Type
  3800 ;;		None
  3801 ;; Return value:  Size  Location     Type
  3802 ;;		None               void
  3803 ;; Registers used:
  3804 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3805 ;; Tracked objects:
  3806 ;;		On entry : 60/100
  3807 ;;		On exit  : 160/0
  3808 ;;		Unchanged: FFE9F/0
  3809 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3810 ;;      Params:         0       3       0       0
  3811 ;;      Locals:         0       0       0       0
  3812 ;;      Temps:          0       0       0       0
  3813 ;;      Totals:         0       3       0       0
  3814 ;;Total ram usage:        3 bytes
  3815 ;; Hardware stack levels used:    1
  3816 ;; Hardware stack levels required when called:    7
  3817 ;; This function calls:
  3818 ;;		_i2cStart
  3819 ;;		_i2cWrite
  3820 ;;		_i2cRestart
  3821 ;;		_i2cRead
  3822 ;;		_i2cAck
  3823 ;;		_i2cNack
  3824 ;;		_i2cStop
  3825 ;; This function is called by:
  3826 ;;		_comandoRx
  3827 ;; This function uses a non-reentrant model
  3828 ;;
  3829  0C6F                     _eepromReadLog:	
  3830                           
  3831                           ;eepromI2c.c: 32: i2cStart();
  3832                           
  3833 ;; hardware stack exceeded
  3834                           ; Regs used in _eepromReadLog: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3835  0C6F  26F2  158A         	fcall	_i2cStart
  3836                           
  3837                           ;eepromI2c.c: 33: i2cWrite(0xA0);
  3838  0C71  30A0               	movlw	160
  3839  0C72  26AB  158A         	fcall	_i2cWrite
  3840                           
  3841                           ;eepromI2c.c: 34: i2cWrite(addr>>8);
  3842  0C74  0827               	movf	eepromReadLog@addr+1,w
  3843  0C75  26AB  158A         	fcall	_i2cWrite
  3844                           
  3845                           ;eepromI2c.c: 35: i2cWrite((unsigned char)addr);
  3846  0C77  0826               	movf	eepromReadLog@addr,w
  3847  0C78  26AB  158A         	fcall	_i2cWrite
  3848                           
  3849                           ;eepromI2c.c: 36: i2cRestart();
  3850  0C7A  2790  158A         	fcall	_i2cRestart
  3851                           
  3852                           ;eepromI2c.c: 37: i2cWrite(0xA1);
  3853  0C7C  30A1               	movlw	161
  3854  0C7D  26AB  158A         	fcall	_i2cWrite
  3855                           
  3856                           ;eepromI2c.c: 38: buff[0] = i2cRead();
  3857  0C7F  0828               	movf	eepromReadLog@buff,w
  3858  0C80  0084               	movwf	4
  3859  0C81  2643  158A         	fcall	_i2cRead
  3860  0C83  1383               	bcf	3,7	;select IRP bank0
  3861  0C84  0080               	movwf	0
  3862                           
  3863                           ;eepromI2c.c: 39: i2cAck();
  3864  0C85  26A0  158A         	fcall	_i2cAck
  3865                           
  3866                           ;eepromI2c.c: 40: buff[1] = i2cRead();
  3867  0C87  0828               	movf	eepromReadLog@buff,w
  3868  0C88  3E01               	addlw	1
  3869  0C89  0084               	movwf	4
  3870  0C8A  2643  158A         	fcall	_i2cRead
  3871  0C8C  0080               	movwf	0
  3872                           
  3873                           ;eepromI2c.c: 41: i2cAck();
  3874  0C8D  26A0  158A         	fcall	_i2cAck
  3875                           
  3876                           ;eepromI2c.c: 42: buff[2] = i2cRead();
  3877  0C8F  0828               	movf	eepromReadLog@buff,w
  3878  0C90  3E02               	addlw	2
  3879  0C91  0084               	movwf	4
  3880  0C92  2643  158A         	fcall	_i2cRead
  3881  0C94  0080               	movwf	0
  3882                           
  3883                           ;eepromI2c.c: 43: i2cNack();
  3884  0C95  26DC  158A         	fcall	_i2cNack
  3885                           
  3886                           ;eepromI2c.c: 44: i2cStop();
  3887  0C97  2EFD               	ljmp	l7836
  3888  0C98                     __end_of_eepromReadLog:	
  3889  0C98                     __ptext999:	
  3890 ;; =============== function _startLogCmd ends ============
  3891                           
  3892                           
  3893 ;; *************** function _readTemp *****************
  3894 ;; Defined at:
  3895 ;;		line 42 in file "aht10.c"
  3896 ;; Parameters:    Size  Location     Type
  3897 ;;		None
  3898 ;; Auto vars:     Size  Location     Type
  3899 ;;  buff            6   26[BANK0 ] unsigned char [6]
  3900 ;;  aux             4   33[BANK0 ] unsigned long 
  3901 ;;  aux2            1   32[BANK0 ] unsigned char 
  3902 ;; Return value:  Size  Location     Type
  3903 ;;                  1    wreg      unsigned char 
  3904 ;; Registers used:
  3905 ;;		wreg, status,2, status,0, pclath, cstack
  3906 ;; Tracked objects:
  3907 ;;		On entry : 0/0
  3908 ;;		On exit  : 60/0
  3909 ;;		Unchanged: FFF9F/0
  3910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  3911 ;;      Params:         0       0       0       0
  3912 ;;      Locals:         0      11       0       0
  3913 ;;      Temps:          0       4       0       0
  3914 ;;      Totals:         0      15       0       0
  3915 ;;Total ram usage:       15 bytes
  3916 ;; Hardware stack levels used:    1
  3917 ;; Hardware stack levels required when called:    6
  3918 ;; This function calls:
  3919 ;;		_i2cStart
  3920 ;;		_i2cWrite
  3921 ;;		_i2cRead
  3922 ;;		_i2cNack
  3923 ;;		_i2cStop
  3924 ;;		_i2cAck
  3925 ;;		___lmul
  3926 ;;		___lldiv
  3927 ;;		___llmod
  3928 ;; This function is called by:
  3929 ;;		_logSave
  3930 ;; This function uses a non-reentrant model
  3931 ;;
  3932  0C98                     _readTemp:	
  3933                           
  3934                           ;aht10.c: 44: unsigned long aux;
  3935                           ;aht10.c: 46: unsigned char buff[6];
  3936                           ;aht10.c: 47: i2cStart();
  3937                           
  3938                           ; Regs used in _readTemp: [wreg+status,2+status,0+pclath+cstack]
  3939  0C98  26F2  158A         	fcall	_i2cStart
  3940                           
  3941                           ;aht10.c: 48: i2cWrite(0x71);
  3942  0C9A  3071               	movlw	113
  3943  0C9B  26AB  158A         	fcall	_i2cWrite
  3944                           
  3945                           ;aht10.c: 49: buff[0] = i2cRead();
  3946  0C9D  2643  158A         	fcall	_i2cRead
  3947  0C9F  00BA               	movwf	readTemp@buff
  3948                           
  3949                           ;aht10.c: 51: if( ((buff[0]&0x80)>>7 == 1) || ((buff[0]&0x08)>>3 == 0) ){
  3950  0CA0  00B6               	movwf	??_readTemp
  3951  0CA1  3007               	movlw	7
  3952  0CA2                     u1205:	
  3953  0CA2  1003               	clrc
  3954  0CA3  0CB6               	rrf	??_readTemp,f
  3955  0CA4  3EFF               	addlw	-1
  3956  0CA5  1D03               	skipz
  3957  0CA6  2CA2               	goto	u1205
  3958  0CA7  1836               	btfsc	??_readTemp,0
  3959  0CA8  2CB3               	goto	l7912
  3960  0CA9  083A               	movf	readTemp@buff,w
  3961  0CAA  00B6               	movwf	??_readTemp
  3962  0CAB  1003               	clrc
  3963  0CAC  0CB6               	rrf	??_readTemp,f
  3964  0CAD  1003               	clrc
  3965  0CAE  0CB6               	rrf	??_readTemp,f
  3966  0CAF  1003               	clrc
  3967  0CB0  0CB6               	rrf	??_readTemp,f
  3968  0CB1  1836               	btfsc	??_readTemp,0
  3969  0CB2  2CB6               	goto	l7918
  3970  0CB3                     l7912:	
  3971                           
  3972                           ;aht10.c: 52: i2cNack();
  3973  0CB3  26DC  158A         	fcall	_i2cNack
  3974                           
  3975                           ;aht10.c: 53: i2cStop();
  3976  0CB5  2EFD               	ljmp	l7836
  3977  0CB6                     l7918:	
  3978                           
  3979                           ;aht10.c: 56: else{
  3980                           ;aht10.c: 57: i2cAck();
  3981  0CB6  26A0  158A         	fcall	_i2cAck
  3982                           
  3983                           ;aht10.c: 58: }
  3984                           ;aht10.c: 60: buff[1] = i2cRead();
  3985  0CB8  2643  158A         	fcall	_i2cRead
  3986  0CBA  00BB               	movwf	readTemp@buff+1
  3987                           
  3988                           ;aht10.c: 61: i2cAck();
  3989  0CBB  26A0  158A         	fcall	_i2cAck
  3990                           
  3991                           ;aht10.c: 63: buff[2] = i2cRead();
  3992  0CBD  2643  158A         	fcall	_i2cRead
  3993  0CBF  00BC               	movwf	readTemp@buff+2
  3994                           
  3995                           ;aht10.c: 64: i2cAck();
  3996  0CC0  26A0  158A         	fcall	_i2cAck
  3997                           
  3998                           ;aht10.c: 66: buff[3] = i2cRead();
  3999  0CC2  2643  158A         	fcall	_i2cRead
  4000  0CC4  00BD               	movwf	readTemp@buff+3
  4001                           
  4002                           ;aht10.c: 67: i2cAck();
  4003  0CC5  26A0  158A         	fcall	_i2cAck
  4004                           
  4005                           ;aht10.c: 69: buff[4] = i2cRead();
  4006  0CC7  2643  158A         	fcall	_i2cRead
  4007  0CC9  00BE               	movwf	readTemp@buff+4
  4008                           
  4009                           ;aht10.c: 70: i2cAck();
  4010  0CCA  26A0  158A         	fcall	_i2cAck
  4011                           
  4012                           ;aht10.c: 72: buff[5] = i2cRead();
  4013  0CCC  2643  158A         	fcall	_i2cRead
  4014  0CCE  00BF               	movwf	readTemp@buff+5
  4015                           
  4016                           ;aht10.c: 73: i2cNack();
  4017  0CCF  26DC  158A         	fcall	_i2cNack
  4018                           
  4019                           ;aht10.c: 74: i2cStop();
  4020  0CD1  26FD  158A         	fcall	_i2cStop
  4021                           
  4022                           ;aht10.c: 77: aux = buff[1];
  4023  0CD3  083B               	movf	readTemp@buff+1,w
  4024  0CD4  00C1               	movwf	readTemp@aux
  4025  0CD5  01C2               	clrf	readTemp@aux+1
  4026  0CD6  01C3               	clrf	readTemp@aux+2
  4027  0CD7  01C4               	clrf	readTemp@aux+3
  4028                           
  4029                           ;aht10.c: 78: aux <<= 8;
  4030  0CD8  0843               	movf	readTemp@aux+2,w
  4031  0CD9  00C4               	movwf	readTemp@aux+3
  4032  0CDA  0842               	movf	readTemp@aux+1,w
  4033  0CDB  00C3               	movwf	readTemp@aux+2
  4034  0CDC  0841               	movf	readTemp@aux,w
  4035  0CDD  00C2               	movwf	readTemp@aux+1
  4036  0CDE  01C1               	clrf	readTemp@aux
  4037                           
  4038                           ;aht10.c: 79: aux += buff[2];
  4039  0CDF  083C               	movf	readTemp@buff+2,w
  4040  0CE0  07C1               	addwf	readTemp@aux,f
  4041  0CE1  3001               	movlw	1
  4042  0CE2  1803               	skipnc
  4043  0CE3  07C2               	addwf	readTemp@aux+1,f
  4044  0CE4  1803               	skipnc
  4045  0CE5  07C3               	addwf	readTemp@aux+2,f
  4046  0CE6  1803               	skipnc
  4047  0CE7  07C4               	addwf	readTemp@aux+3,f
  4048                           
  4049                           ;aht10.c: 80: aux <<= 8;
  4050  0CE8  0843               	movf	readTemp@aux+2,w
  4051  0CE9  00C4               	movwf	readTemp@aux+3
  4052  0CEA  0842               	movf	readTemp@aux+1,w
  4053  0CEB  00C3               	movwf	readTemp@aux+2
  4054  0CEC  0841               	movf	readTemp@aux,w
  4055  0CED  00C2               	movwf	readTemp@aux+1
  4056  0CEE  01C1               	clrf	readTemp@aux
  4057                           
  4058                           ;aht10.c: 81: aux += buff[3];
  4059  0CEF  083D               	movf	readTemp@buff+3,w
  4060  0CF0  07C1               	addwf	readTemp@aux,f
  4061  0CF1  3001               	movlw	1
  4062  0CF2  1803               	skipnc
  4063  0CF3  07C2               	addwf	readTemp@aux+1,f
  4064  0CF4  1803               	skipnc
  4065  0CF5  07C3               	addwf	readTemp@aux+2,f
  4066  0CF6  1803               	skipnc
  4067  0CF7  07C4               	addwf	readTemp@aux+3,f
  4068                           
  4069                           ;aht10.c: 82: aux >>= 4;
  4070  0CF8  3004               	movlw	4
  4071  0CF9                     u1235:	
  4072  0CF9  1003               	clrc
  4073  0CFA  0CC4               	rrf	readTemp@aux+3,f
  4074  0CFB  0CC3               	rrf	readTemp@aux+2,f
  4075  0CFC  0CC2               	rrf	readTemp@aux+1,f
  4076  0CFD  0CC1               	rrf	readTemp@aux,f
  4077  0CFE  3EFF               	addlw	-1
  4078  0CFF  1D03               	skipz
  4079  0D00  2CF9               	goto	u1235
  4080                           
  4081                           ;aht10.c: 84: aux *= 100;
  4082  0D01  3064               	movlw	100
  4083  0D02  00A0               	movwf	?___lmul
  4084  0D03  01A1               	clrf	?___lmul+1
  4085  0D04  01A2               	clrf	?___lmul+2
  4086  0D05  01A3               	clrf	?___lmul+3
  4087  0D06  0844               	movf	readTemp@aux+3,w
  4088  0D07  00A7               	movwf	?___lmul+7
  4089  0D08  0843               	movf	readTemp@aux+2,w
  4090  0D09  00A6               	movwf	?___lmul+6
  4091  0D0A  0842               	movf	readTemp@aux+1,w
  4092  0D0B  00A5               	movwf	?___lmul+5
  4093  0D0C  0841               	movf	readTemp@aux,w
  4094  0D0D  00A4               	movwf	?___lmul+4
  4095  0D0E  275D  158A         	fcall	___lmul
  4096  0D10  0823               	movf	?___lmul+3,w
  4097  0D11  00C4               	movwf	readTemp@aux+3
  4098  0D12  0822               	movf	?___lmul+2,w
  4099  0D13  00C3               	movwf	readTemp@aux+2
  4100  0D14  0821               	movf	?___lmul+1,w
  4101  0D15  00C2               	movwf	readTemp@aux+1
  4102  0D16  0820               	movf	?___lmul,w
  4103  0D17  00C1               	movwf	readTemp@aux
  4104                           
  4105                           ;aht10.c: 85: aux >>=20;
  4106  0D18  3014               	movlw	20
  4107  0D19                     u1245:	
  4108  0D19  1003               	clrc
  4109  0D1A  0CC4               	rrf	readTemp@aux+3,f
  4110  0D1B  0CC3               	rrf	readTemp@aux+2,f
  4111  0D1C  0CC2               	rrf	readTemp@aux+1,f
  4112  0D1D  0CC1               	rrf	readTemp@aux,f
  4113  0D1E  3EFF               	addlw	-1
  4114  0D1F  1D03               	skipz
  4115  0D20  2D19               	goto	u1245
  4116                           
  4117                           ;aht10.c: 87: readUmidity = aux/10;
  4118  0D21  300A               	movlw	10
  4119  0D22  00A0               	movwf	?___lldiv
  4120  0D23  01A1               	clrf	?___lldiv+1
  4121  0D24  01A2               	clrf	?___lldiv+2
  4122  0D25  01A3               	clrf	?___lldiv+3
  4123  0D26  0844               	movf	readTemp@aux+3,w
  4124  0D27  00A7               	movwf	?___lldiv+7
  4125  0D28  0843               	movf	readTemp@aux+2,w
  4126  0D29  00A6               	movwf	?___lldiv+6
  4127  0D2A  0842               	movf	readTemp@aux+1,w
  4128  0D2B  00A5               	movwf	?___lldiv+5
  4129  0D2C  0841               	movf	readTemp@aux,w
  4130  0D2D  00A4               	movwf	?___lldiv+4
  4131  0D2E  2658  158A         	fcall	___lldiv
  4132  0D30  0820               	movf	?___lldiv,w
  4133  0D31  00E4               	movwf	_readUmidity
  4134  0D32  30F0               	movlw	240
  4135                           
  4136                           ;aht10.c: 88: readUmidity <<= 4;
  4137  0D33  0EE4               	swapf	_readUmidity,f
  4138  0D34  05E4               	andwf	_readUmidity,f
  4139                           
  4140                           ;aht10.c: 89: aux %= 10;
  4141  0D35  300A               	movlw	10
  4142  0D36  00AD               	movwf	?___llmod
  4143  0D37  01AE               	clrf	?___llmod+1
  4144  0D38  01AF               	clrf	?___llmod+2
  4145  0D39  01B0               	clrf	?___llmod+3
  4146  0D3A  0844               	movf	readTemp@aux+3,w
  4147  0D3B  00B4               	movwf	?___llmod+7
  4148  0D3C  0843               	movf	readTemp@aux+2,w
  4149  0D3D  00B3               	movwf	?___llmod+6
  4150  0D3E  0842               	movf	readTemp@aux+1,w
  4151  0D3F  00B2               	movwf	?___llmod+5
  4152  0D40  0841               	movf	readTemp@aux,w
  4153  0D41  00B1               	movwf	?___llmod+4
  4154  0D42  270F  158A         	fcall	___llmod
  4155  0D44  0830               	movf	?___llmod+3,w
  4156  0D45  00C4               	movwf	readTemp@aux+3
  4157  0D46  082F               	movf	?___llmod+2,w
  4158  0D47  00C3               	movwf	readTemp@aux+2
  4159  0D48  082E               	movf	?___llmod+1,w
  4160  0D49  00C2               	movwf	readTemp@aux+1
  4161  0D4A  082D               	movf	?___llmod,w
  4162  0D4B  00C1               	movwf	readTemp@aux
  4163                           
  4164                           ;aht10.c: 90: readUmidity+=aux;
  4165  0D4C  07E4               	addwf	_readUmidity,f
  4166                           
  4167                           ;aht10.c: 93: aux = (buff[3] & 0x0F);
  4168  0D4D  083D               	movf	readTemp@buff+3,w
  4169  0D4E  390F               	andlw	15
  4170  0D4F  00C1               	movwf	readTemp@aux
  4171  0D50  01C2               	clrf	readTemp@aux+1
  4172  0D51  01C3               	clrf	readTemp@aux+2
  4173  0D52  01C4               	clrf	readTemp@aux+3
  4174                           
  4175                           ;aht10.c: 94: aux <<= 8;
  4176  0D53  0843               	movf	readTemp@aux+2,w
  4177  0D54  00C4               	movwf	readTemp@aux+3
  4178  0D55  0842               	movf	readTemp@aux+1,w
  4179  0D56  00C3               	movwf	readTemp@aux+2
  4180  0D57  0841               	movf	readTemp@aux,w
  4181  0D58  00C2               	movwf	readTemp@aux+1
  4182  0D59  01C1               	clrf	readTemp@aux
  4183                           
  4184                           ;aht10.c: 95: aux += buff[4];
  4185  0D5A  083E               	movf	readTemp@buff+4,w
  4186  0D5B  07C1               	addwf	readTemp@aux,f
  4187  0D5C  3001               	movlw	1
  4188  0D5D  1803               	skipnc
  4189  0D5E  07C2               	addwf	readTemp@aux+1,f
  4190  0D5F  1803               	skipnc
  4191  0D60  07C3               	addwf	readTemp@aux+2,f
  4192  0D61  1803               	skipnc
  4193  0D62  07C4               	addwf	readTemp@aux+3,f
  4194                           
  4195                           ;aht10.c: 96: aux <<= 8;
  4196  0D63  0843               	movf	readTemp@aux+2,w
  4197  0D64  00C4               	movwf	readTemp@aux+3
  4198  0D65  0842               	movf	readTemp@aux+1,w
  4199  0D66  00C3               	movwf	readTemp@aux+2
  4200  0D67  0841               	movf	readTemp@aux,w
  4201  0D68  00C2               	movwf	readTemp@aux+1
  4202  0D69  01C1               	clrf	readTemp@aux
  4203                           
  4204                           ;aht10.c: 97: aux += buff[5];
  4205  0D6A  083F               	movf	readTemp@buff+5,w
  4206  0D6B  07C1               	addwf	readTemp@aux,f
  4207  0D6C  3001               	movlw	1
  4208  0D6D  1803               	skipnc
  4209  0D6E  07C2               	addwf	readTemp@aux+1,f
  4210  0D6F  1803               	skipnc
  4211  0D70  07C3               	addwf	readTemp@aux+2,f
  4212  0D71  1803               	skipnc
  4213  0D72  07C4               	addwf	readTemp@aux+3,f
  4214                           
  4215                           ;aht10.c: 99: aux *= 1000;
  4216  0D73  3003               	movlw	3
  4217  0D74  01A3               	clrf	?___lmul+3
  4218  0D75  01A2               	clrf	?___lmul+2
  4219  0D76  00A1               	movwf	?___lmul+1
  4220  0D77  30E8               	movlw	232
  4221  0D78  00A0               	movwf	?___lmul
  4222  0D79  0844               	movf	readTemp@aux+3,w
  4223  0D7A  00A7               	movwf	?___lmul+7
  4224  0D7B  0843               	movf	readTemp@aux+2,w
  4225  0D7C  00A6               	movwf	?___lmul+6
  4226  0D7D  0842               	movf	readTemp@aux+1,w
  4227  0D7E  00A5               	movwf	?___lmul+5
  4228  0D7F  0841               	movf	readTemp@aux,w
  4229  0D80  00A4               	movwf	?___lmul+4
  4230  0D81  275D  158A         	fcall	___lmul
  4231  0D83  0823               	movf	?___lmul+3,w
  4232  0D84  00C4               	movwf	readTemp@aux+3
  4233  0D85  0822               	movf	?___lmul+2,w
  4234  0D86  00C3               	movwf	readTemp@aux+2
  4235  0D87  0821               	movf	?___lmul+1,w
  4236  0D88  00C2               	movwf	readTemp@aux+1
  4237  0D89  0820               	movf	?___lmul,w
  4238  0D8A  00C1               	movwf	readTemp@aux
  4239                           
  4240                           ;aht10.c: 100: aux >>= 10;
  4241  0D8B  300A               	movlw	10
  4242  0D8C                     u1255:	
  4243  0D8C  1003               	clrc
  4244  0D8D  0CC4               	rrf	readTemp@aux+3,f
  4245  0D8E  0CC3               	rrf	readTemp@aux+2,f
  4246  0D8F  0CC2               	rrf	readTemp@aux+1,f
  4247  0D90  0CC1               	rrf	readTemp@aux,f
  4248  0D91  3EFF               	addlw	-1
  4249  0D92  1D03               	skipz
  4250  0D93  2D8C               	goto	u1255
  4251                           
  4252                           ;aht10.c: 101: aux *= 200;
  4253  0D94  30C8               	movlw	200
  4254  0D95  00A0               	movwf	?___lmul
  4255  0D96  01A1               	clrf	?___lmul+1
  4256  0D97  01A2               	clrf	?___lmul+2
  4257  0D98  01A3               	clrf	?___lmul+3
  4258  0D99  0844               	movf	readTemp@aux+3,w
  4259  0D9A  00A7               	movwf	?___lmul+7
  4260  0D9B  0843               	movf	readTemp@aux+2,w
  4261  0D9C  00A6               	movwf	?___lmul+6
  4262  0D9D  0842               	movf	readTemp@aux+1,w
  4263  0D9E  00A5               	movwf	?___lmul+5
  4264  0D9F  0841               	movf	readTemp@aux,w
  4265  0DA0  00A4               	movwf	?___lmul+4
  4266  0DA1  275D  158A         	fcall	___lmul
  4267  0DA3  0823               	movf	?___lmul+3,w
  4268  0DA4  00C4               	movwf	readTemp@aux+3
  4269  0DA5  0822               	movf	?___lmul+2,w
  4270  0DA6  00C3               	movwf	readTemp@aux+2
  4271  0DA7  0821               	movf	?___lmul+1,w
  4272  0DA8  00C2               	movwf	readTemp@aux+1
  4273  0DA9  0820               	movf	?___lmul,w
  4274  0DAA  00C1               	movwf	readTemp@aux
  4275                           
  4276                           ;aht10.c: 102: aux >>= 10;
  4277  0DAB  300A               	movlw	10
  4278  0DAC                     u1265:	
  4279  0DAC  1003               	clrc
  4280  0DAD  0CC4               	rrf	readTemp@aux+3,f
  4281  0DAE  0CC3               	rrf	readTemp@aux+2,f
  4282  0DAF  0CC2               	rrf	readTemp@aux+1,f
  4283  0DB0  0CC1               	rrf	readTemp@aux,f
  4284  0DB1  3EFF               	addlw	-1
  4285  0DB2  1D03               	skipz
  4286  0DB3  2DAC               	goto	u1265
  4287                           
  4288                           ;aht10.c: 103: aux -= 50000;
  4289  0DB4  3050               	movlw	80
  4290  0DB5  00B6               	movwf	??_readTemp
  4291  0DB6  30C3               	movlw	195
  4292  0DB7  00B7               	movwf	??_readTemp+1
  4293  0DB8  01B8               	clrf	??_readTemp+2
  4294  0DB9  01B9               	clrf	??_readTemp+3
  4295  0DBA  0836               	movf	??_readTemp,w
  4296  0DBB  02C1               	subwf	readTemp@aux,f
  4297  0DBC  0837               	movf	??_readTemp+1,w
  4298  0DBD  1C03               	skipc
  4299  0DBE  0F37               	incfsz	??_readTemp+1,w
  4300  0DBF  02C2               	subwf	readTemp@aux+1,f
  4301  0DC0  0838               	movf	??_readTemp+2,w
  4302  0DC1  1C03               	skipc
  4303  0DC2  0F38               	incfsz	??_readTemp+2,w
  4304  0DC3  02C3               	subwf	readTemp@aux+2,f
  4305  0DC4  0839               	movf	??_readTemp+3,w
  4306  0DC5  1C03               	skipc
  4307  0DC6  0F39               	incfsz	??_readTemp+3,w
  4308  0DC7  02C4               	subwf	readTemp@aux+3,f
  4309                           
  4310                           ;aht10.c: 105: unsigned char aux2;
  4311                           ;aht10.c: 107: aux2 = aux/10000;
  4312  0DC8  3027               	movlw	39
  4313  0DC9  01A3               	clrf	?___lldiv+3
  4314  0DCA  01A2               	clrf	?___lldiv+2
  4315  0DCB  00A1               	movwf	?___lldiv+1
  4316  0DCC  3010               	movlw	16
  4317  0DCD  00A0               	movwf	?___lldiv
  4318  0DCE  0844               	movf	readTemp@aux+3,w
  4319  0DCF  00A7               	movwf	?___lldiv+7
  4320  0DD0  0843               	movf	readTemp@aux+2,w
  4321  0DD1  00A6               	movwf	?___lldiv+6
  4322  0DD2  0842               	movf	readTemp@aux+1,w
  4323  0DD3  00A5               	movwf	?___lldiv+5
  4324  0DD4  0841               	movf	readTemp@aux,w
  4325  0DD5  00A4               	movwf	?___lldiv+4
  4326  0DD6  2658  158A         	fcall	___lldiv
  4327  0DD8  0820               	movf	?___lldiv,w
  4328  0DD9  00C0               	movwf	readTemp@aux2
  4329  0DDA  30F0               	movlw	240
  4330                           
  4331                           ;aht10.c: 108: aux2 <<= 4;
  4332  0DDB  0EC0               	swapf	readTemp@aux2,f
  4333  0DDC  05C0               	andwf	readTemp@aux2,f
  4334                           
  4335                           ;aht10.c: 109: readTemperature = aux2;
  4336  0DDD  0840               	movf	readTemp@aux2,w
  4337  0DDE  00E2               	movwf	_readTemperature
  4338                           
  4339                           ;aht10.c: 110: aux2 = (aux/1000)%10;
  4340  0DDF  300A               	movlw	10
  4341  0DE0  00AD               	movwf	?___llmod
  4342  0DE1  3003               	movlw	3
  4343  0DE2  01AE               	clrf	?___llmod+1
  4344  0DE3  01AF               	clrf	?___llmod+2
  4345  0DE4  01B0               	clrf	?___llmod+3
  4346  0DE5  01A3               	clrf	?___lldiv+3
  4347  0DE6  01A2               	clrf	?___lldiv+2
  4348  0DE7  00A1               	movwf	?___lldiv+1
  4349  0DE8  30E8               	movlw	232
  4350  0DE9  00A0               	movwf	?___lldiv
  4351  0DEA  0844               	movf	readTemp@aux+3,w
  4352  0DEB  00A7               	movwf	?___lldiv+7
  4353  0DEC  0843               	movf	readTemp@aux+2,w
  4354  0DED  00A6               	movwf	?___lldiv+6
  4355  0DEE  0842               	movf	readTemp@aux+1,w
  4356  0DEF  00A5               	movwf	?___lldiv+5
  4357  0DF0  0841               	movf	readTemp@aux,w
  4358  0DF1  00A4               	movwf	?___lldiv+4
  4359  0DF2  2658  158A         	fcall	___lldiv
  4360  0DF4  0823               	movf	?___lldiv+3,w
  4361  0DF5  00B4               	movwf	?___llmod+7
  4362  0DF6  0822               	movf	?___lldiv+2,w
  4363  0DF7  00B3               	movwf	?___llmod+6
  4364  0DF8  0821               	movf	?___lldiv+1,w
  4365  0DF9  00B2               	movwf	?___llmod+5
  4366  0DFA  0820               	movf	?___lldiv,w
  4367  0DFB  00B1               	movwf	?___llmod+4
  4368  0DFC  270F  158A         	fcall	___llmod
  4369  0DFE  082D               	movf	?___llmod,w
  4370  0DFF  00C0               	movwf	readTemp@aux2
  4371                           
  4372                           ;aht10.c: 111: readTemperature += aux2;
  4373  0E00  07E2               	addwf	_readTemperature,f
  4374                           
  4375                           ;aht10.c: 113: readTemperatureDec = (aux/100)%10;
  4376  0E01  300A               	movlw	10
  4377  0E02  00AD               	movwf	?___llmod
  4378  0E03  3064               	movlw	100
  4379  0E04  01AE               	clrf	?___llmod+1
  4380  0E05  01AF               	clrf	?___llmod+2
  4381  0E06  01B0               	clrf	?___llmod+3
  4382  0E07  00A0               	movwf	?___lldiv
  4383  0E08  01A1               	clrf	?___lldiv+1
  4384  0E09  01A2               	clrf	?___lldiv+2
  4385  0E0A  01A3               	clrf	?___lldiv+3
  4386  0E0B  0844               	movf	readTemp@aux+3,w
  4387  0E0C  00A7               	movwf	?___lldiv+7
  4388  0E0D  0843               	movf	readTemp@aux+2,w
  4389  0E0E  00A6               	movwf	?___lldiv+6
  4390  0E0F  0842               	movf	readTemp@aux+1,w
  4391  0E10  00A5               	movwf	?___lldiv+5
  4392  0E11  0841               	movf	readTemp@aux,w
  4393  0E12  00A4               	movwf	?___lldiv+4
  4394  0E13  2658  158A         	fcall	___lldiv
  4395  0E15  0823               	movf	?___lldiv+3,w
  4396  0E16  00B4               	movwf	?___llmod+7
  4397  0E17  0822               	movf	?___lldiv+2,w
  4398  0E18  00B3               	movwf	?___llmod+6
  4399  0E19  0821               	movf	?___lldiv+1,w
  4400  0E1A  00B2               	movwf	?___llmod+5
  4401  0E1B  0820               	movf	?___lldiv,w
  4402  0E1C  00B1               	movwf	?___llmod+4
  4403  0E1D  270F  158A         	fcall	___llmod
  4404  0E1F  082D               	movf	?___llmod,w
  4405  0E20  00E3               	movwf	_readTemperatureDec
  4406  0E21  30F0               	movlw	240
  4407                           
  4408                           ;aht10.c: 114: readTemperatureDec <<= 4;
  4409  0E22  0EE3               	swapf	_readTemperatureDec,f
  4410  0E23  05E3               	andwf	_readTemperatureDec,f
  4411                           
  4412                           ;aht10.c: 115: readTemperatureDec += (aux/10)%10;
  4413  0E24  300A               	movlw	10
  4414  0E25  00AD               	movwf	?___llmod
  4415  0E26  01AE               	clrf	?___llmod+1
  4416  0E27  01AF               	clrf	?___llmod+2
  4417  0E28  01B0               	clrf	?___llmod+3
  4418  0E29  00A0               	movwf	?___lldiv
  4419  0E2A  01A1               	clrf	?___lldiv+1
  4420  0E2B  01A2               	clrf	?___lldiv+2
  4421  0E2C  01A3               	clrf	?___lldiv+3
  4422  0E2D  0844               	movf	readTemp@aux+3,w
  4423  0E2E  00A7               	movwf	?___lldiv+7
  4424  0E2F  0843               	movf	readTemp@aux+2,w
  4425  0E30  00A6               	movwf	?___lldiv+6
  4426  0E31  0842               	movf	readTemp@aux+1,w
  4427  0E32  00A5               	movwf	?___lldiv+5
  4428  0E33  0841               	movf	readTemp@aux,w
  4429  0E34  00A4               	movwf	?___lldiv+4
  4430  0E35  2658  158A         	fcall	___lldiv
  4431  0E37  0823               	movf	?___lldiv+3,w
  4432  0E38  00B4               	movwf	?___llmod+7
  4433  0E39  0822               	movf	?___lldiv+2,w
  4434  0E3A  00B3               	movwf	?___llmod+6
  4435  0E3B  0821               	movf	?___lldiv+1,w
  4436  0E3C  00B2               	movwf	?___llmod+5
  4437  0E3D  0820               	movf	?___lldiv,w
  4438  0E3E  00B1               	movwf	?___llmod+4
  4439  0E3F  270F               	fcall	___llmod
  4440  0E40  082D               	movf	?___llmod,w
  4441  0E41  07E3               	addwf	_readTemperatureDec,f
  4442  0E42  0008               	return
  4443  0E43                     __end_of_readTemp:	
  4444  0E43                     __ptext1007:	
  4445 ;; =============== function _i2cAck ends ============
  4446                           
  4447                           
  4448 ;; *************** function _i2cRead *****************
  4449 ;; Defined at:
  4450 ;;		line 147 in file "I2c.c"
  4451 ;; Parameters:    Size  Location     Type
  4452 ;;		None
  4453 ;; Auto vars:     Size  Location     Type
  4454 ;;  x               1    4[BANK0 ] unsigned char 
  4455 ;;  read_data       1    3[BANK0 ] unsigned char 
  4456 ;; Return value:  Size  Location     Type
  4457 ;;                  1    wreg      unsigned char 
  4458 ;; Registers used:
  4459 ;;		wreg, status,2, status,0, pclath, cstack
  4460 ;; Tracked objects:
  4461 ;;		On entry : 60/100
  4462 ;;		On exit  : 60/100
  4463 ;;		Unchanged: FFF9F/0
  4464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4465 ;;      Params:         0       0       0       0
  4466 ;;      Locals:         0       2       0       0
  4467 ;;      Temps:          0       0       0       0
  4468 ;;      Totals:         0       2       0       0
  4469 ;;Total ram usage:        2 bytes
  4470 ;; Hardware stack levels used:    1
  4471 ;; Hardware stack levels required when called:    5
  4472 ;; This function calls:
  4473 ;;		_scl_out
  4474 ;; This function is called by:
  4475 ;;		_eepromReadByte
  4476 ;;		_eepromReadLog
  4477 ;;		_eepromReadLogPage
  4478 ;;		_readTemp
  4479 ;; This function uses a non-reentrant model
  4480 ;;
  4481  0E43                     _i2cRead:	
  4482                           
  4483                           ;I2c.c: 148: unsigned char x,read_data;
  4484                           ;I2c.c: 149: read_data = 0;
  4485                           
  4486                           ; Regs used in _i2cRead: [wreg+status,2+status,0+pclath+cstack]
  4487  0E43  01A3               	clrf	i2cRead@read_data
  4488                           
  4489                           ;I2c.c: 150: for (x=0; x<=7; x++){
  4490  0E44  01A4               	clrf	i2cRead@x
  4491                           
  4492                           ;I2c.c: 151: read_data <<= 1;
  4493  0E45  1003               	clrc
  4494  0E46                     L1:	
  4495  0E46  3001               	movlw	1
  4496  0E47  0DA3               	rlf	i2cRead@read_data,f
  4497                           
  4498                           ;I2c.c: 152: scl_out(1);
  4499  0E48  26CD  158A         	fcall	_scl_out
  4500                           
  4501                           ;I2c.c: 153: read_data |= RB4;
  4502  0E4A  3000               	movlw	0
  4503  0E4B  1A06               	btfsc	6,4
  4504  0E4C  3001               	movlw	1
  4505  0E4D  04A3               	iorwf	i2cRead@read_data,f
  4506                           
  4507                           ;I2c.c: 154: scl_out(0);
  4508  0E4E  3000               	movlw	0
  4509  0E4F  26CD  158A         	fcall	_scl_out
  4510  0E51  3008               	movlw	8
  4511  0E52  0AA4               	incf	i2cRead@x,f
  4512  0E53  0224               	subwf	i2cRead@x,w
  4513  0E54  1C03               	skipc
  4514  0E55  2E46               	goto	L1
  4515                           
  4516                           ;I2c.c: 155: }
  4517                           ;I2c.c: 157: return(read_data);
  4518  0E56  0823               	movf	i2cRead@read_data,w
  4519  0E57  0008               	return
  4520  0E58                     __end_of_i2cRead:	
  4521  0E58                     __ptext1020:	
  4522 ;; =============== function _UART_send_String ends ============
  4523                           
  4524                           
  4525 ;; *************** function ___lldiv *****************
  4526 ;; Defined at:
  4527 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\lldiv.c"
  4528 ;; Parameters:    Size  Location     Type
  4529 ;;  divisor         4    0[BANK0 ] unsigned long 
  4530 ;;  dividend        4    4[BANK0 ] unsigned long 
  4531 ;; Auto vars:     Size  Location     Type
  4532 ;;  quotient        4    8[BANK0 ] unsigned long 
  4533 ;;  counter         1   12[BANK0 ] unsigned char 
  4534 ;; Return value:  Size  Location     Type
  4535 ;;                  4    0[BANK0 ] unsigned long 
  4536 ;; Registers used:
  4537 ;;		wreg, status,2, status,0
  4538 ;; Tracked objects:
  4539 ;;		On entry : 60/0
  4540 ;;		On exit  : 60/0
  4541 ;;		Unchanged: FFF9F/0
  4542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4543 ;;      Params:         0       8       0       0
  4544 ;;      Locals:         0       5       0       0
  4545 ;;      Temps:          0       0       0       0
  4546 ;;      Totals:         0      13       0       0
  4547 ;;Total ram usage:       13 bytes
  4548 ;; Hardware stack levels used:    1
  4549 ;; Hardware stack levels required when called:    3
  4550 ;; This function calls:
  4551 ;;		Nothing
  4552 ;; This function is called by:
  4553 ;;		_readTemp
  4554 ;; This function uses a non-reentrant model
  4555 ;;
  4556  0E58                     ___lldiv:	
  4557                           
  4558                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  4559  0E58  01A8               	clrf	___lldiv@quotient
  4560  0E59  01A9               	clrf	___lldiv@quotient+1
  4561  0E5A  01AA               	clrf	___lldiv@quotient+2
  4562  0E5B  01AB               	clrf	___lldiv@quotient+3
  4563  0E5C  0823               	movf	___lldiv@divisor+3,w
  4564  0E5D  0422               	iorwf	___lldiv@divisor+2,w
  4565  0E5E  0421               	iorwf	___lldiv@divisor+1,w
  4566  0E5F  0420               	iorwf	___lldiv@divisor,w
  4567  0E60  1903               	skipnz
  4568  0E61  2E97               	goto	l7752
  4569  0E62  01AC               	clrf	___lldiv@counter
  4570  0E63                     L2:	
  4571  0E63  0AAC               	incf	___lldiv@counter,f
  4572  0E64  1BA3               	btfsc	___lldiv@divisor+3,7
  4573  0E65  2E6C               	goto	l7740
  4574  0E66  1003               	clrc
  4575  0E67  0DA0               	rlf	___lldiv@divisor,f
  4576  0E68  0DA1               	rlf	___lldiv@divisor+1,f
  4577  0E69  0DA2               	rlf	___lldiv@divisor+2,f
  4578  0E6A  0DA3               	rlf	___lldiv@divisor+3,f
  4579  0E6B  2E63               	goto	L2
  4580  0E6C                     l7740:	
  4581  0E6C  1003               	clrc
  4582  0E6D  0DA8               	rlf	___lldiv@quotient,f
  4583  0E6E  0DA9               	rlf	___lldiv@quotient+1,f
  4584  0E6F  0DAA               	rlf	___lldiv@quotient+2,f
  4585  0E70  0DAB               	rlf	___lldiv@quotient+3,f
  4586  0E71  0823               	movf	___lldiv@divisor+3,w
  4587  0E72  0227               	subwf	___lldiv@dividend+3,w
  4588  0E73  1D03               	skipz
  4589  0E74  2E7F               	goto	u1095
  4590  0E75  0822               	movf	___lldiv@divisor+2,w
  4591  0E76  0226               	subwf	___lldiv@dividend+2,w
  4592  0E77  1D03               	skipz
  4593  0E78  2E7F               	goto	u1095
  4594  0E79  0821               	movf	___lldiv@divisor+1,w
  4595  0E7A  0225               	subwf	___lldiv@dividend+1,w
  4596  0E7B  1D03               	skipz
  4597  0E7C  2E7F               	goto	u1095
  4598  0E7D  0820               	movf	___lldiv@divisor,w
  4599  0E7E  0224               	subwf	___lldiv@dividend,w
  4600  0E7F                     u1095:	
  4601  0E7F  1C03               	skipc
  4602  0E80  2E91               	goto	L3
  4603  0E81  0820               	movf	___lldiv@divisor,w
  4604  0E82  02A4               	subwf	___lldiv@dividend,f
  4605  0E83  0821               	movf	___lldiv@divisor+1,w
  4606  0E84  1C03               	skipc
  4607  0E85  0F21               	incfsz	___lldiv@divisor+1,w
  4608  0E86  02A5               	subwf	___lldiv@dividend+1,f
  4609  0E87  0822               	movf	___lldiv@divisor+2,w
  4610  0E88  1C03               	skipc
  4611  0E89  0F22               	incfsz	___lldiv@divisor+2,w
  4612  0E8A  02A6               	subwf	___lldiv@dividend+2,f
  4613  0E8B  0823               	movf	___lldiv@divisor+3,w
  4614  0E8C  1C03               	skipc
  4615  0E8D  0F23               	incfsz	___lldiv@divisor+3,w
  4616  0E8E  02A7               	subwf	___lldiv@dividend+3,f
  4617  0E8F  1428               	bsf	___lldiv@quotient,0
  4618  0E90  1003               	clrc
  4619  0E91                     L3:	
  4620  0E91  0CA3               	rrf	___lldiv@divisor+3,f
  4621  0E92  0CA2               	rrf	___lldiv@divisor+2,f
  4622  0E93  0CA1               	rrf	___lldiv@divisor+1,f
  4623  0E94  0CA0               	rrf	___lldiv@divisor,f
  4624  0E95  0BAC               	decfsz	___lldiv@counter,f
  4625  0E96  2E6C               	goto	l7740
  4626  0E97                     l7752:	
  4627  0E97  082B               	movf	___lldiv@quotient+3,w
  4628  0E98  00A3               	movwf	?___lldiv+3
  4629  0E99  082A               	movf	___lldiv@quotient+2,w
  4630  0E9A  00A2               	movwf	?___lldiv+2
  4631  0E9B  0829               	movf	___lldiv@quotient+1,w
  4632  0E9C  00A1               	movwf	?___lldiv+1
  4633  0E9D  0828               	movf	___lldiv@quotient,w
  4634  0E9E  00A0               	movwf	?___lldiv
  4635  0E9F  0008               	return
  4636  0EA0                     __end_of___lldiv:	
  4637  0EA0                     __ptext1006:	
  4638 ;; =============== function _i2cNack ends ============
  4639                           
  4640                           
  4641 ;; *************** function _i2cAck *****************
  4642 ;; Defined at:
  4643 ;;		line 161 in file "I2c.c"
  4644 ;; Parameters:    Size  Location     Type
  4645 ;;		None
  4646 ;; Auto vars:     Size  Location     Type
  4647 ;;		None
  4648 ;; Return value:  Size  Location     Type
  4649 ;;		None               void
  4650 ;; Registers used:
  4651 ;;		wreg, status,2, status,0, pclath, cstack
  4652 ;; Tracked objects:
  4653 ;;		On entry : 0/100
  4654 ;;		On exit  : 60/100
  4655 ;;		Unchanged: FFF9F/0
  4656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4657 ;;      Params:         0       0       0       0
  4658 ;;      Locals:         0       0       0       0
  4659 ;;      Temps:          0       0       0       0
  4660 ;;      Totals:         0       0       0       0
  4661 ;;Total ram usage:        0 bytes
  4662 ;; Hardware stack levels used:    1
  4663 ;; Hardware stack levels required when called:    5
  4664 ;; This function calls:
  4665 ;;		_sda_out
  4666 ;;		_scl_out
  4667 ;; This function is called by:
  4668 ;;		_eepromReadLog
  4669 ;;		_eepromReadLogPage
  4670 ;;		_readTemp
  4671 ;; This function uses a non-reentrant model
  4672 ;;
  4673  0EA0                     _i2cAck:	
  4674                           
  4675                           ;I2c.c: 162: sda_out(0);
  4676                           
  4677                           ; Regs used in _i2cAck: [wreg+status,2+status,0+pclath+cstack]
  4678  0EA0  3000               	movlw	0
  4679  0EA1  26E7  158A         	fcall	_sda_out
  4680                           
  4681                           ;I2c.c: 163: scl_out(1);
  4682  0EA3  3001               	movlw	1
  4683  0EA4  26CD  158A         	fcall	_scl_out
  4684                           
  4685                           ;I2c.c: 164: scl_out(0);
  4686  0EA6  3000               	movlw	0
  4687  0EA7  26CD  158A         	fcall	_scl_out
  4688                           
  4689                           ;I2c.c: 165: sda_out(1);
  4690  0EA9  3001               	movlw	1
  4691  0EAA  2EE7               	ljmp	_sda_out
  4692  0EAB                     __end_of_i2cAck:	
  4693  0EAB                     __ptext1008:	
  4694 ;; =============== function _i2cRead ends ============
  4695                           
  4696                           
  4697 ;; *************** function _i2cWrite *****************
  4698 ;; Defined at:
  4699 ;;		line 131 in file "I2c.c"
  4700 ;; Parameters:    Size  Location     Type
  4701 ;;  data            1    wreg     unsigned char 
  4702 ;; Auto vars:     Size  Location     Type
  4703 ;;  data            1    3[BANK0 ] unsigned char 
  4704 ;;  x               1    5[BANK0 ] unsigned char 
  4705 ;;  ack             1    4[BANK0 ] unsigned char 
  4706 ;; Return value:  Size  Location     Type
  4707 ;;                  1    wreg      unsigned char 
  4708 ;; Registers used:
  4709 ;;		wreg, status,2, status,0, pclath, cstack
  4710 ;; Tracked objects:
  4711 ;;		On entry : 60/100
  4712 ;;		On exit  : 60/100
  4713 ;;		Unchanged: FFF9F/0
  4714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4715 ;;      Params:         0       0       0       0
  4716 ;;      Locals:         0       3       0       0
  4717 ;;      Temps:          0       0       0       0
  4718 ;;      Totals:         0       3       0       0
  4719 ;;Total ram usage:        3 bytes
  4720 ;; Hardware stack levels used:    1
  4721 ;; Hardware stack levels required when called:    5
  4722 ;; This function calls:
  4723 ;;		_sda_out
  4724 ;;		_scl_out
  4725 ;; This function is called by:
  4726 ;;		_eepromReadByte
  4727 ;;		_eepromWriteByte
  4728 ;;		_eepromReadLog
  4729 ;;		_eepromReadLogPage
  4730 ;;		_initAht10
  4731 ;;		_sendTriggerMeasurementCmd
  4732 ;;		_readTemp
  4733 ;; This function uses a non-reentrant model
  4734 ;;
  4735  0EAB                     _i2cWrite:	
  4736                           
  4737                           ; Regs used in _i2cWrite: [wreg+status,2+status,0+pclath+cstack]
  4738                           ;i2cWrite@data stored from wreg
  4739  0EAB  00A3               	movwf	i2cWrite@data
  4740                           
  4741                           ;I2c.c: 132: unsigned char x,ack;
  4742                           ;I2c.c: 133: for (x=0; x<=7; x++){
  4743  0EAC  01A5               	clrf	i2cWrite@x
  4744  0EAD                     l7844:	
  4745                           
  4746                           ;I2c.c: 134: sda_out((data & 0x80) != 0);
  4747  0EAD  3000               	movlw	0
  4748  0EAE  1BA3               	btfsc	i2cWrite@data,7
  4749  0EAF  3001               	movlw	1
  4750  0EB0  26E7  158A         	fcall	_sda_out
  4751                           
  4752                           ;I2c.c: 135: scl_out(1);
  4753  0EB2  3001               	movlw	1
  4754  0EB3  26CD  158A         	fcall	_scl_out
  4755                           
  4756                           ;I2c.c: 136: scl_out(0);
  4757  0EB5  3000               	movlw	0
  4758  0EB6  26CD  158A         	fcall	_scl_out
  4759  0EB8  3008               	movlw	8
  4760                           
  4761                           ;I2c.c: 137: data <<= 1;
  4762  0EB9  1003               	clrc
  4763  0EBA  0DA3               	rlf	i2cWrite@data,f
  4764  0EBB  0AA5               	incf	i2cWrite@x,f
  4765  0EBC  0225               	subwf	i2cWrite@x,w
  4766  0EBD  1C03               	skipc
  4767  0EBE  2EAD               	goto	l7844
  4768                           
  4769                           ;I2c.c: 138: }
  4770                           ;I2c.c: 139: sda_out(1);
  4771  0EBF  3001               	movlw	1
  4772  0EC0  26E7  158A         	fcall	_sda_out
  4773                           
  4774                           ;I2c.c: 140: scl_out(1);
  4775  0EC2  3001               	movlw	1
  4776  0EC3  26CD  158A         	fcall	_scl_out
  4777                           
  4778                           ;I2c.c: 141: ack = RB4;
  4779  0EC5  3000               	movlw	0
  4780  0EC6  1A06               	btfsc	6,4
  4781  0EC7  3001               	movlw	1
  4782  0EC8  00A4               	movwf	i2cWrite@ack
  4783                           
  4784                           ;I2c.c: 142: scl_out(0);
  4785  0EC9  3000               	movlw	0
  4786  0ECA  26CD               	fcall	_scl_out
  4787                           
  4788                           ;I2c.c: 143: return(ack);
  4789  0ECB  0824               	movf	i2cWrite@ack,w
  4790  0ECC  0008               	return
  4791  0ECD                     __end_of_i2cWrite:	
  4792  0ECD                     __ptext1013:	
  4793 ;; =============== function _sda_out ends ============
  4794                           
  4795                           
  4796 ;; *************** function _scl_out *****************
  4797 ;; Defined at:
  4798 ;;		line 177 in file "I2c.c"
  4799 ;; Parameters:    Size  Location     Type
  4800 ;;  value           1    wreg     unsigned char 
  4801 ;; Auto vars:     Size  Location     Type
  4802 ;;  value           1    2[BANK0 ] unsigned char 
  4803 ;; Return value:  Size  Location     Type
  4804 ;;		None               void
  4805 ;; Registers used:
  4806 ;;		wreg, status,2, status,0, pclath, cstack
  4807 ;; Tracked objects:
  4808 ;;		On entry : 0/100
  4809 ;;		On exit  : 60/100
  4810 ;;		Unchanged: FFF9F/0
  4811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4812 ;;      Params:         0       0       0       0
  4813 ;;      Locals:         0       1       0       0
  4814 ;;      Temps:          0       0       0       0
  4815 ;;      Totals:         0       1       0       0
  4816 ;;Total ram usage:        1 bytes
  4817 ;; Hardware stack levels used:    1
  4818 ;; Hardware stack levels required when called:    4
  4819 ;; This function calls:
  4820 ;;		_halfclockdelay
  4821 ;; This function is called by:
  4822 ;;		_i2cStart
  4823 ;;		_i2cStop
  4824 ;;		_i2cWrite
  4825 ;;		_i2cRead
  4826 ;;		_i2cAck
  4827 ;;		_i2cNack
  4828 ;; This function uses a non-reentrant model
  4829 ;;
  4830  0ECD                     _scl_out:	
  4831                           
  4832                           ; Regs used in _scl_out: [wreg+status,2+status,0+pclath+cstack]
  4833                           ;scl_out@value stored from wreg
  4834  0ECD  1283               	bcf	3,5	;RP0=0, select bank0
  4835  0ECE  1303               	bcf	3,6	;RP1=0, select bank0
  4836  0ECF  00A2               	movwf	scl_out@value
  4837                           
  4838                           ;I2c.c: 178: if(value==1){
  4839  0ED0  0322               	decf	scl_out@value,w
  4840  0ED1  1D03               	skipz
  4841  0ED2  2ED9               	goto	l2863
  4842                           
  4843                           ;I2c.c: 179: TRISB6=1;
  4844  0ED3  1683               	bsf	3,5	;RP0=1, select bank1
  4845  0ED4  1706               	bsf	6,6
  4846  0ED5                     l2864:	
  4847                           ;I2c.c: 181: while(RB6 == 0);
  4848                           
  4849  0ED5  1283               	bcf	3,5	;RP0=0, select bank0
  4850  0ED6  1B06               	btfsc	6,6
  4851  0ED7  2EDB               	goto	l7818
  4852  0ED8  2ED5               	goto	l2864
  4853  0ED9                     l2863:	
  4854                           
  4855                           ;I2c.c: 183: else{
  4856                           ;I2c.c: 184: TRISB6=0;
  4857  0ED9  1683               	bsf	3,5	;RP0=1, select bank1
  4858  0EDA  1306               	bcf	6,6
  4859  0EDB                     l7818:	
  4860                           
  4861                           ;I2c.c: 185: }
  4862                           ;I2c.c: 188: halfclockdelay();
  4863  0EDB  2FB2               	ljmp	l7534
  4864  0EDC                     __end_of_scl_out:	
  4865  0EDC                     __ptext1005:	
  4866 ;; =============== function _jdyConfig ends ============
  4867                           
  4868                           
  4869 ;; *************** function _i2cNack *****************
  4870 ;; Defined at:
  4871 ;;		line 169 in file "I2c.c"
  4872 ;; Parameters:    Size  Location     Type
  4873 ;;		None
  4874 ;; Auto vars:     Size  Location     Type
  4875 ;;		None
  4876 ;; Return value:  Size  Location     Type
  4877 ;;		None               void
  4878 ;; Registers used:
  4879 ;;		wreg, status,2, status,0, pclath, cstack
  4880 ;; Tracked objects:
  4881 ;;		On entry : 0/100
  4882 ;;		On exit  : 60/100
  4883 ;;		Unchanged: FFF9F/0
  4884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4885 ;;      Params:         0       0       0       0
  4886 ;;      Locals:         0       0       0       0
  4887 ;;      Temps:          0       0       0       0
  4888 ;;      Totals:         0       0       0       0
  4889 ;;Total ram usage:        0 bytes
  4890 ;; Hardware stack levels used:    1
  4891 ;; Hardware stack levels required when called:    5
  4892 ;; This function calls:
  4893 ;;		_sda_out
  4894 ;;		_scl_out
  4895 ;; This function is called by:
  4896 ;;		_eepromReadByte
  4897 ;;		_eepromReadLog
  4898 ;;		_eepromReadLogPage
  4899 ;;		_readTemp
  4900 ;; This function uses a non-reentrant model
  4901 ;;
  4902  0EDC                     _i2cNack:	
  4903                           
  4904                           ;I2c.c: 170: sda_out(1);
  4905                           
  4906                           ; Regs used in _i2cNack: [wreg+status,2+status,0+pclath+cstack]
  4907  0EDC  3001               	movlw	1
  4908  0EDD  26E7  158A         	fcall	_sda_out
  4909                           
  4910                           ;I2c.c: 171: scl_out(1);
  4911  0EDF  3001               	movlw	1
  4912  0EE0  26CD  158A         	fcall	_scl_out
  4913                           
  4914                           ;I2c.c: 172: scl_out(0);
  4915  0EE2  3000               	movlw	0
  4916  0EE3  26CD  158A         	fcall	_scl_out
  4917                           
  4918                           ;I2c.c: 173: sda_out(1);
  4919  0EE5  3001               	movlw	1
  4920  0EE6  2EE7               	ljmp	_sda_out
  4921  0EE7                     __end_of_i2cNack:	
  4922  0EE7                     __ptext1012:	
  4923 ;; =============== function _resposta ends ============
  4924                           
  4925                           
  4926 ;; *************** function _sda_out *****************
  4927 ;; Defined at:
  4928 ;;		line 192 in file "I2c.c"
  4929 ;; Parameters:    Size  Location     Type
  4930 ;;  value           1    wreg     unsigned char 
  4931 ;; Auto vars:     Size  Location     Type
  4932 ;;  value           1    2[BANK0 ] unsigned char 
  4933 ;; Return value:  Size  Location     Type
  4934 ;;		None               void
  4935 ;; Registers used:
  4936 ;;		wreg, status,2, status,0, pclath, cstack
  4937 ;; Tracked objects:
  4938 ;;		On entry : 0/100
  4939 ;;		On exit  : 60/100
  4940 ;;		Unchanged: FFF9F/0
  4941 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  4942 ;;      Params:         0       0       0       0
  4943 ;;      Locals:         0       1       0       0
  4944 ;;      Temps:          0       0       0       0
  4945 ;;      Totals:         0       1       0       0
  4946 ;;Total ram usage:        1 bytes
  4947 ;; Hardware stack levels used:    1
  4948 ;; Hardware stack levels required when called:    4
  4949 ;; This function calls:
  4950 ;;		_halfclockdelay
  4951 ;; This function is called by:
  4952 ;;		_i2cStart
  4953 ;;		_i2cStop
  4954 ;;		_i2cWrite
  4955 ;;		_i2cAck
  4956 ;;		_i2cNack
  4957 ;; This function uses a non-reentrant model
  4958 ;;
  4959  0EE7                     _sda_out:	
  4960                           
  4961                           ; Regs used in _sda_out: [wreg+status,2+status,0+pclath+cstack]
  4962                           ;sda_out@value stored from wreg
  4963  0EE7  1283               	bcf	3,5	;RP0=0, select bank0
  4964  0EE8  1303               	bcf	3,6	;RP1=0, select bank0
  4965  0EE9  00A2               	movwf	sda_out@value
  4966                           
  4967                           ;I2c.c: 193: if(value==1){
  4968  0EEA  0B22               	decfsz	sda_out@value,w
  4969  0EEB  2EEF               	goto	l2871
  4970                           
  4971                           ;I2c.c: 194: TRISB4=1;
  4972  0EEC  1683               	bsf	3,5	;RP0=1, select bank1
  4973  0EED  1606               	bsf	6,4
  4974                           
  4975                           ;I2c.c: 195: }
  4976  0EEE  2EF1               	goto	l7824
  4977  0EEF                     l2871:	
  4978                           
  4979                           ;I2c.c: 196: else{
  4980                           ;I2c.c: 197: TRISB4=0;
  4981  0EEF  1683               	bsf	3,5	;RP0=1, select bank1
  4982  0EF0  1206               	bcf	6,4
  4983  0EF1                     l7824:	
  4984                           
  4985                           ;I2c.c: 198: }
  4986                           ;I2c.c: 201: halfclockdelay();
  4987  0EF1  2FB2               	ljmp	l7534
  4988  0EF2                     __end_of_sda_out:	
  4989  0EF2                     __ptext1010:	
  4990 ;; =============== function _i2cStop ends ============
  4991                           
  4992                           
  4993 ;; *************** function _i2cStart *****************
  4994 ;; Defined at:
  4995 ;;		line 116 in file "I2c.c"
  4996 ;; Parameters:    Size  Location     Type
  4997 ;;		None
  4998 ;; Auto vars:     Size  Location     Type
  4999 ;;		None
  5000 ;; Return value:  Size  Location     Type
  5001 ;;		None               void
  5002 ;; Registers used:
  5003 ;;		wreg, status,2, status,0, pclath, cstack
  5004 ;; Tracked objects:
  5005 ;;		On entry : 0/100
  5006 ;;		On exit  : 60/100
  5007 ;;		Unchanged: FFF9F/0
  5008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5009 ;;      Params:         0       0       0       0
  5010 ;;      Locals:         0       0       0       0
  5011 ;;      Temps:          0       0       0       0
  5012 ;;      Totals:         0       0       0       0
  5013 ;;Total ram usage:        0 bytes
  5014 ;; Hardware stack levels used:    1
  5015 ;; Hardware stack levels required when called:    5
  5016 ;; This function calls:
  5017 ;;		_scl_out
  5018 ;;		_sda_out
  5019 ;; This function is called by:
  5020 ;;		_i2cRestart
  5021 ;;		_eepromReadByte
  5022 ;;		_eepromWriteByte
  5023 ;;		_eepromReadLog
  5024 ;;		_eepromReadLogPage
  5025 ;;		_initAht10
  5026 ;;		_sendTriggerMeasurementCmd
  5027 ;;		_readTemp
  5028 ;; This function uses a non-reentrant model
  5029 ;;
  5030  0EF2                     _i2cStart:	
  5031  0EF2                     l7834:	
  5032 ;; hardware stack exceeded
  5033                           ; Regs used in _i2cStart: [wreg+status,2+status,0+pclath+cstack]
  5034                           
  5035                           
  5036                           ;I2c.c: 117: scl_out(1);
  5037  0EF2  3001               	movlw	1
  5038  0EF3  26CD  158A         	fcall	_scl_out
  5039                           
  5040                           ;I2c.c: 118: sda_out(1);
  5041  0EF5  3001               	movlw	1
  5042  0EF6  26E7  158A         	fcall	_sda_out
  5043                           
  5044                           ;I2c.c: 119: sda_out(0);
  5045  0EF8  3000               	movlw	0
  5046  0EF9  26E7  158A         	fcall	_sda_out
  5047                           
  5048                           ;I2c.c: 120: scl_out(0);
  5049  0EFB  3000               	movlw	0
  5050  0EFC  2ECD               	ljmp	_scl_out
  5051  0EFD                     __end_of_i2cStart:	
  5052  0EFD                     __ptext1009:	
  5053 ;; =============== function _i2cWrite ends ============
  5054                           
  5055                           
  5056 ;; *************** function _i2cStop *****************
  5057 ;; Defined at:
  5058 ;;		line 124 in file "I2c.c"
  5059 ;; Parameters:    Size  Location     Type
  5060 ;;		None
  5061 ;; Auto vars:     Size  Location     Type
  5062 ;;		None
  5063 ;; Return value:  Size  Location     Type
  5064 ;;		None               void
  5065 ;; Registers used:
  5066 ;;		wreg, status,2, status,0, pclath, cstack
  5067 ;; Tracked objects:
  5068 ;;		On entry : 60/100
  5069 ;;		On exit  : 60/100
  5070 ;;		Unchanged: FFF9F/0
  5071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5072 ;;      Params:         0       0       0       0
  5073 ;;      Locals:         0       0       0       0
  5074 ;;      Temps:          0       0       0       0
  5075 ;;      Totals:         0       0       0       0
  5076 ;;Total ram usage:        0 bytes
  5077 ;; Hardware stack levels used:    1
  5078 ;; Hardware stack levels required when called:    5
  5079 ;; This function calls:
  5080 ;;		_sda_out
  5081 ;;		_scl_out
  5082 ;; This function is called by:
  5083 ;;		_eepromReadByte
  5084 ;;		_eepromWriteByte
  5085 ;;		_eepromReadLog
  5086 ;;		_eepromReadLogPage
  5087 ;;		_initAht10
  5088 ;;		_sendTriggerMeasurementCmd
  5089 ;;		_readTemp
  5090 ;; This function uses a non-reentrant model
  5091 ;;
  5092  0EFD                     _i2cStop:	
  5093  0EFD                     l7836:	
  5094                           ; Regs used in _i2cStop: [wreg+status,2+status,0+pclath+cstack]
  5095                           
  5096                           
  5097                           ;I2c.c: 125: sda_out(0);
  5098  0EFD  3000               	movlw	0
  5099  0EFE  26E7  158A         	fcall	_sda_out
  5100                           
  5101                           ;I2c.c: 126: scl_out(1);
  5102  0F00  3001               	movlw	1
  5103  0F01  26CD  158A         	fcall	_scl_out
  5104                           
  5105                           ;I2c.c: 127: sda_out(1);
  5106  0F03  3001               	movlw	1
  5107  0F04  2EE7               	ljmp	_sda_out
  5108  0F05                     __end_of_i2cStop:	
  5109  0F05                     __ptext1032:	
  5110 ;; =============== function _memset ends ============
  5111                           
  5112                           
  5113 ;; *************** function _UART_send_char *****************
  5114 ;; Defined at:
  5115 ;;		line 37 in file "uart.c"
  5116 ;; Parameters:    Size  Location     Type
  5117 ;;  ch              1    wreg     unsigned char 
  5118 ;; Auto vars:     Size  Location     Type
  5119 ;;  ch              1    0[BANK0 ] unsigned char 
  5120 ;; Return value:  Size  Location     Type
  5121 ;;		None               void
  5122 ;; Registers used:
  5123 ;;		wreg
  5124 ;; Tracked objects:
  5125 ;;		On entry : 60/100
  5126 ;;		On exit  : 60/0
  5127 ;;		Unchanged: FFE00/0
  5128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5129 ;;      Params:         0       0       0       0
  5130 ;;      Locals:         0       1       0       0
  5131 ;;      Temps:          0       0       0       0
  5132 ;;      Totals:         0       1       0       0
  5133 ;;Total ram usage:        1 bytes
  5134 ;; Hardware stack levels used:    1
  5135 ;; Hardware stack levels required when called:    3
  5136 ;; This function calls:
  5137 ;;		Nothing
  5138 ;; This function is called by:
  5139 ;;		_UART_send_String
  5140 ;;		_comandoRx
  5141 ;;		_resposta
  5142 ;; This function uses a non-reentrant model
  5143 ;;
  5144  0F05                     _UART_send_char:	
  5145                           
  5146                           ; Regs used in _UART_send_char: [wreg]
  5147                           ;UART_send_char@ch stored from wreg
  5148  0F05  00A0               	movwf	UART_send_char@ch
  5149  0F06                     l924:	
  5150                           ;uart.c: 38: while(!TXIF);
  5151                           
  5152  0F06  1E0C               	btfss	12,4
  5153  0F07  2F06               	goto	l924
  5154  0F08  0000               	nop	;#
  5155  0F09  0000               	nop	;#
  5156                           
  5157                           ;uart.c: 42: TXREG = ch;
  5158  0F0A  1283               	bcf	3,5	;RP0=0, select bank0
  5159  0F0B  1303               	bcf	3,6	;RP1=0, select bank0
  5160  0F0C  0820               	movf	UART_send_char@ch,w
  5161  0F0D  0099               	movwf	25	;volatile
  5162  0F0E  0008               	return
  5163  0F0F                     __end_of_UART_send_char:	
  5164  0F0F                     __ptext1021:	
  5165 ;; =============== function ___lldiv ends ============
  5166                           
  5167                           
  5168 ;; *************** function ___llmod *****************
  5169 ;; Defined at:
  5170 ;;		line 5 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\llmod.c"
  5171 ;; Parameters:    Size  Location     Type
  5172 ;;  divisor         4   13[BANK0 ] unsigned long 
  5173 ;;  dividend        4   17[BANK0 ] unsigned long 
  5174 ;; Auto vars:     Size  Location     Type
  5175 ;;  counter         1   21[BANK0 ] unsigned char 
  5176 ;; Return value:  Size  Location     Type
  5177 ;;                  4   13[BANK0 ] unsigned long 
  5178 ;; Registers used:
  5179 ;;		wreg, status,2, status,0
  5180 ;; Tracked objects:
  5181 ;;		On entry : 60/0
  5182 ;;		On exit  : 60/0
  5183 ;;		Unchanged: FFF9F/0
  5184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5185 ;;      Params:         0       8       0       0
  5186 ;;      Locals:         0       1       0       0
  5187 ;;      Temps:          0       0       0       0
  5188 ;;      Totals:         0       9       0       0
  5189 ;;Total ram usage:        9 bytes
  5190 ;; Hardware stack levels used:    1
  5191 ;; Hardware stack levels required when called:    3
  5192 ;; This function calls:
  5193 ;;		Nothing
  5194 ;; This function is called by:
  5195 ;;		_readTemp
  5196 ;; This function uses a non-reentrant model
  5197 ;;
  5198  0F0F                     ___llmod:	
  5199                           
  5200                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  5201  0F0F  0830               	movf	___llmod@divisor+3,w
  5202  0F10  042F               	iorwf	___llmod@divisor+2,w
  5203  0F11  042E               	iorwf	___llmod@divisor+1,w
  5204  0F12  042D               	iorwf	___llmod@divisor,w
  5205  0F13  1903               	skipnz
  5206  0F14  2F44               	goto	l7726
  5207  0F15  01B5               	clrf	___llmod@counter
  5208  0F16                     L4:	
  5209  0F16  0AB5               	incf	___llmod@counter,f
  5210  0F17  1BB0               	btfsc	___llmod@divisor+3,7
  5211  0F18  2F1F               	goto	l7718
  5212  0F19  1003               	clrc
  5213  0F1A  0DAD               	rlf	___llmod@divisor,f
  5214  0F1B  0DAE               	rlf	___llmod@divisor+1,f
  5215  0F1C  0DAF               	rlf	___llmod@divisor+2,f
  5216  0F1D  0DB0               	rlf	___llmod@divisor+3,f
  5217  0F1E  2F16               	goto	L4
  5218  0F1F                     l7718:	
  5219  0F1F  0830               	movf	___llmod@divisor+3,w
  5220  0F20  0234               	subwf	___llmod@dividend+3,w
  5221  0F21  1D03               	skipz
  5222  0F22  2F2D               	goto	u1055
  5223  0F23  082F               	movf	___llmod@divisor+2,w
  5224  0F24  0233               	subwf	___llmod@dividend+2,w
  5225  0F25  1D03               	skipz
  5226  0F26  2F2D               	goto	u1055
  5227  0F27  082E               	movf	___llmod@divisor+1,w
  5228  0F28  0232               	subwf	___llmod@dividend+1,w
  5229  0F29  1D03               	skipz
  5230  0F2A  2F2D               	goto	u1055
  5231  0F2B  082D               	movf	___llmod@divisor,w
  5232  0F2C  0231               	subwf	___llmod@dividend,w
  5233  0F2D                     u1055:	
  5234  0F2D  1C03               	skipc
  5235  0F2E  2F3E               	goto	L5
  5236  0F2F  082D               	movf	___llmod@divisor,w
  5237  0F30  02B1               	subwf	___llmod@dividend,f
  5238  0F31  082E               	movf	___llmod@divisor+1,w
  5239  0F32  1C03               	skipc
  5240  0F33  0F2E               	incfsz	___llmod@divisor+1,w
  5241  0F34  02B2               	subwf	___llmod@dividend+1,f
  5242  0F35  082F               	movf	___llmod@divisor+2,w
  5243  0F36  1C03               	skipc
  5244  0F37  0F2F               	incfsz	___llmod@divisor+2,w
  5245  0F38  02B3               	subwf	___llmod@dividend+2,f
  5246  0F39  0830               	movf	___llmod@divisor+3,w
  5247  0F3A  1C03               	skipc
  5248  0F3B  0F30               	incfsz	___llmod@divisor+3,w
  5249  0F3C  02B4               	subwf	___llmod@dividend+3,f
  5250  0F3D  1003               	clrc
  5251  0F3E                     L5:	
  5252  0F3E  0CB0               	rrf	___llmod@divisor+3,f
  5253  0F3F  0CAF               	rrf	___llmod@divisor+2,f
  5254  0F40  0CAE               	rrf	___llmod@divisor+1,f
  5255  0F41  0CAD               	rrf	___llmod@divisor,f
  5256  0F42  0BB5               	decfsz	___llmod@counter,f
  5257  0F43  2F1F               	goto	l7718
  5258  0F44                     l7726:	
  5259  0F44  0834               	movf	___llmod@dividend+3,w
  5260  0F45  00B0               	movwf	?___llmod+3
  5261  0F46  0833               	movf	___llmod@dividend+2,w
  5262  0F47  00AF               	movwf	?___llmod+2
  5263  0F48  0832               	movf	___llmod@dividend+1,w
  5264  0F49  00AE               	movwf	?___llmod+1
  5265  0F4A  0831               	movf	___llmod@dividend,w
  5266  0F4B  00AD               	movwf	?___llmod
  5267  0F4C  0008               	return
  5268  0F4D                     __end_of___llmod:	
  5269  0F4D                     __ptext1011:	
  5270 ;; =============== function _i2cStart ends ============
  5271                           
  5272                           
  5273 ;; *************** function _resposta *****************
  5274 ;; Defined at:
  5275 ;;		line 335 in file "Main.c"
  5276 ;; Parameters:    Size  Location     Type
  5277 ;;		None
  5278 ;; Auto vars:     Size  Location     Type
  5279 ;;  i               1    1[BANK0 ] unsigned char 
  5280 ;; Return value:  Size  Location     Type
  5281 ;;		None               void
  5282 ;; Registers used:
  5283 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5284 ;; Tracked objects:
  5285 ;;		On entry : 0/100
  5286 ;;		On exit  : 60/0
  5287 ;;		Unchanged: FFE00/0
  5288 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5289 ;;      Params:         0       0       0       0
  5290 ;;      Locals:         0       1       0       0
  5291 ;;      Temps:          0       0       0       0
  5292 ;;      Totals:         0       1       0       0
  5293 ;;Total ram usage:        1 bytes
  5294 ;; Hardware stack levels used:    1
  5295 ;; Hardware stack levels required when called:    4
  5296 ;; This function calls:
  5297 ;;		_UART_send_char
  5298 ;; This function is called by:
  5299 ;;		_comandoRx
  5300 ;; This function uses a non-reentrant model
  5301 ;;
  5302  0F4D                     _resposta:	
  5303  0F4D                     l7826:	
  5304                           ; Regs used in _resposta: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5305                           
  5306                           
  5307                           ;Main.c: 336: for (char i=0 ; i<bufferTxLen ; i++){
  5308  0F4D  1283               	bcf	3,5	;RP0=0, select bank0
  5309  0F4E  1303               	bcf	3,6	;RP1=0, select bank0
  5310  0F4F  01A1               	clrf	resposta@i
  5311  0F50                     l7832:	
  5312  0F50  0860               	movf	_bufferTxLen,w
  5313  0F51  0221               	subwf	resposta@i,w
  5314  0F52  1803               	btfsc	3,0
  5315  0F53  0008               	return
  5316                           
  5317                           ;Main.c: 337: UART_send_char(bufferTx[i]);
  5318  0F54  0821               	movf	resposta@i,w
  5319  0F55  3EA0               	addlw	_bufferTx& (0+255)
  5320  0F56  0084               	movwf	4
  5321  0F57  1383               	bcf	3,7	;select IRP bank1
  5322  0F58  0800               	movf	0,w
  5323  0F59  2705  158A         	fcall	_UART_send_char
  5324  0F5B  0AA1               	incf	resposta@i,f
  5325  0F5C  2F50               	goto	l7832
  5326  0F5D                     __end_of_resposta:	
  5327  0F5D                     __ptext1022:	
  5328 ;; =============== function ___llmod ends ============
  5329                           
  5330                           
  5331 ;; *************** function ___lmul *****************
  5332 ;; Defined at:
  5333 ;;		line 3 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\lmul.c"
  5334 ;; Parameters:    Size  Location     Type
  5335 ;;  multiplier      4    0[BANK0 ] unsigned long 
  5336 ;;  multiplicand    4    4[BANK0 ] unsigned long 
  5337 ;; Auto vars:     Size  Location     Type
  5338 ;;  product         4    8[BANK0 ] unsigned long 
  5339 ;; Return value:  Size  Location     Type
  5340 ;;                  4    0[BANK0 ] unsigned long 
  5341 ;; Registers used:
  5342 ;;		wreg, status,2, status,0
  5343 ;; Tracked objects:
  5344 ;;		On entry : 60/0
  5345 ;;		On exit  : 60/0
  5346 ;;		Unchanged: FFF9F/0
  5347 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5348 ;;      Params:         0       8       0       0
  5349 ;;      Locals:         0       4       0       0
  5350 ;;      Temps:          0       0       0       0
  5351 ;;      Totals:         0      12       0       0
  5352 ;;Total ram usage:       12 bytes
  5353 ;; Hardware stack levels used:    1
  5354 ;; Hardware stack levels required when called:    3
  5355 ;; This function calls:
  5356 ;;		Nothing
  5357 ;; This function is called by:
  5358 ;;		_readTemp
  5359 ;; This function uses a non-reentrant model
  5360 ;;
  5361  0F5D                     ___lmul:	
  5362                           
  5363                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  5364  0F5D  01A8               	clrf	___lmul@product
  5365  0F5E  01A9               	clrf	___lmul@product+1
  5366  0F5F  01AA               	clrf	___lmul@product+2
  5367  0F60  01AB               	clrf	___lmul@product+3
  5368  0F61                     l5891:	
  5369  0F61  1C20               	btfss	___lmul@multiplier,0
  5370  0F62  2F77               	goto	l7702
  5371  0F63  0824               	movf	___lmul@multiplicand,w
  5372  0F64  07A8               	addwf	___lmul@product,f
  5373  0F65  0825               	movf	___lmul@multiplicand+1,w
  5374  0F66  1103               	clrz
  5375  0F67  1803               	skipnc
  5376  0F68  3E01               	addlw	1
  5377  0F69  1D03               	btfss	3,2
  5378  0F6A  07A9               	addwf	___lmul@product+1,f
  5379  0F6B  0826               	movf	___lmul@multiplicand+2,w
  5380  0F6C  1103               	clrz
  5381  0F6D  1803               	skipnc
  5382  0F6E  3E01               	addlw	1
  5383  0F6F  1D03               	btfss	3,2
  5384  0F70  07AA               	addwf	___lmul@product+2,f
  5385  0F71  0827               	movf	___lmul@multiplicand+3,w
  5386  0F72  1103               	clrz
  5387  0F73  1803               	skipnc
  5388  0F74  3E01               	addlw	1
  5389  0F75  1D03               	btfss	3,2
  5390  0F76  07AB               	addwf	___lmul@product+3,f
  5391  0F77                     l7702:	
  5392  0F77  1003               	clrc
  5393  0F78  0DA4               	rlf	___lmul@multiplicand,f
  5394  0F79  0DA5               	rlf	___lmul@multiplicand+1,f
  5395  0F7A  0DA6               	rlf	___lmul@multiplicand+2,f
  5396  0F7B  0DA7               	rlf	___lmul@multiplicand+3,f
  5397  0F7C  1003               	clrc
  5398  0F7D  0CA3               	rrf	___lmul@multiplier+3,f
  5399  0F7E  0CA2               	rrf	___lmul@multiplier+2,f
  5400  0F7F  0CA1               	rrf	___lmul@multiplier+1,f
  5401  0F80  0CA0               	rrf	___lmul@multiplier,f
  5402  0F81  0823               	movf	___lmul@multiplier+3,w
  5403  0F82  0422               	iorwf	___lmul@multiplier+2,w
  5404  0F83  0421               	iorwf	___lmul@multiplier+1,w
  5405  0F84  0420               	iorwf	___lmul@multiplier,w
  5406  0F85  1D03               	skipz
  5407  0F86  2F61               	goto	l5891
  5408  0F87  082B               	movf	___lmul@product+3,w
  5409  0F88  00A3               	movwf	?___lmul+3
  5410  0F89  082A               	movf	___lmul@product+2,w
  5411  0F8A  00A2               	movwf	?___lmul+2
  5412  0F8B  0829               	movf	___lmul@product+1,w
  5413  0F8C  00A1               	movwf	?___lmul+1
  5414  0F8D  0828               	movf	___lmul@product,w
  5415  0F8E  00A0               	movwf	?___lmul
  5416  0F8F  0008               	return
  5417  0F90                     __end_of___lmul:	
  5418  0F90                     __ptext1002:	
  5419 ;; =============== function _initAht10 ends ============
  5420                           
  5421                           
  5422 ;; *************** function _i2cRestart *****************
  5423 ;; Defined at:
  5424 ;;		line 111 in file "I2c.c"
  5425 ;; Parameters:    Size  Location     Type
  5426 ;;		None
  5427 ;; Auto vars:     Size  Location     Type
  5428 ;;		None
  5429 ;; Return value:  Size  Location     Type
  5430 ;;		None               void
  5431 ;; Registers used:
  5432 ;;		wreg, status,2, status,0, pclath, cstack
  5433 ;; Tracked objects:
  5434 ;;		On entry : 60/100
  5435 ;;		On exit  : 60/100
  5436 ;;		Unchanged: FFF9F/0
  5437 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5438 ;;      Params:         0       0       0       0
  5439 ;;      Locals:         0       0       0       0
  5440 ;;      Temps:          0       0       0       0
  5441 ;;      Totals:         0       0       0       0
  5442 ;;Total ram usage:        0 bytes
  5443 ;; Hardware stack levels used:    1
  5444 ;; Hardware stack levels required when called:    6
  5445 ;; This function calls:
  5446 ;;		_i2cStart
  5447 ;; This function is called by:
  5448 ;;		_eepromReadByte
  5449 ;;		_eepromReadLog
  5450 ;;		_eepromReadLogPage
  5451 ;; This function uses a non-reentrant model
  5452 ;;
  5453  0F90                     _i2cRestart:	
  5454                           
  5455                           ;I2c.c: 112: i2cStart();
  5456                           
  5457 ;; hardware stack exceeded
  5458                           ; Regs used in _i2cRestart: [wreg+status,2+status,0+pclath+cstack]
  5459  0F90  2EF2               	ljmp	l7834
  5460  0F91                     __end_of_i2cRestart:	
  5461  0F91                     __ptext1030:	
  5462 ;; =============== function _i2cInitialize ends ============
  5463                           
  5464                           
  5465 ;; *************** function _checksumCalc *****************
  5466 ;; Defined at:
  5467 ;;		line 396 in file "Main.c"
  5468 ;; Parameters:    Size  Location     Type
  5469 ;;  buffer          1    wreg     PTR unsigned char 
  5470 ;;		 -> bufferTx(40), 
  5471 ;;  len             1    0[BANK0 ] unsigned char 
  5472 ;; Auto vars:     Size  Location     Type
  5473 ;;  buffer          1    3[BANK0 ] PTR unsigned char 
  5474 ;;		 -> bufferTx(40), 
  5475 ;;  i               1    5[BANK0 ] unsigned char 
  5476 ;;  chk             1    4[BANK0 ] unsigned char 
  5477 ;; Return value:  Size  Location     Type
  5478 ;;                  1    wreg      unsigned char 
  5479 ;; Registers used:
  5480 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5481 ;; Tracked objects:
  5482 ;;		On entry : 60/0
  5483 ;;		On exit  : 60/0
  5484 ;;		Unchanged: FFE00/0
  5485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5486 ;;      Params:         0       1       0       0
  5487 ;;      Locals:         0       3       0       0
  5488 ;;      Temps:          0       2       0       0
  5489 ;;      Totals:         0       6       0       0
  5490 ;;Total ram usage:        6 bytes
  5491 ;; Hardware stack levels used:    1
  5492 ;; Hardware stack levels required when called:    3
  5493 ;; This function calls:
  5494 ;;		Nothing
  5495 ;; This function is called by:
  5496 ;;		_getClockCmd
  5497 ;;		_setTimerCmd
  5498 ;;		_getTimerCmd
  5499 ;;		_startLogCmd
  5500 ;;		_stopLogCmd
  5501 ;;		_readLogStatus
  5502 ;;		_comandoRx
  5503 ;; This function uses a non-reentrant model
  5504 ;;
  5505  0F91                     _checksumCalc:	
  5506                           
  5507                           ; Regs used in _checksumCalc: [wreg-fsr0h+status,2+status,0]
  5508                           ;checksumCalc@buffer stored from wreg
  5509  0F91  00A3               	movwf	checksumCalc@buffer
  5510                           
  5511                           ;Main.c: 397: unsigned char chk = 0;
  5512  0F92  01A4               	clrf	checksumCalc@chk
  5513                           
  5514                           ;Main.c: 398: for (char i = 1; i< len-2; i++){
  5515  0F93  01A5               	clrf	checksumCalc@i
  5516  0F94                     l7524:	
  5517  0F94  0AA5               	incf	checksumCalc@i,f
  5518  0F95  0820               	movf	checksumCalc@len,w
  5519  0F96  3EFE               	addlw	254
  5520  0F97  00A1               	movwf	??_checksumCalc
  5521  0F98  30FF               	movlw	255
  5522  0F99  1803               	skipnc
  5523  0F9A  3000               	movlw	0
  5524  0F9B  00A2               	movwf	??_checksumCalc+1
  5525  0F9C  3A80               	xorlw	128
  5526  0F9D  3C80               	sublw	128
  5527  0F9E  1D03               	skipz
  5528  0F9F  2FA2               	goto	u805
  5529  0FA0  0821               	movf	??_checksumCalc,w
  5530  0FA1  0225               	subwf	checksumCalc@i,w
  5531  0FA2                     u805:	
  5532  0FA2  1803               	btfsc	3,0
  5533  0FA3  2FAE               	goto	l7528
  5534                           
  5535                           ;Main.c: 399: chk ^= buffer[i];
  5536  0FA4  1283               	bcf	3,5	;RP0=0, select bank0
  5537  0FA5  1303               	bcf	3,6	;RP1=0, select bank0
  5538  0FA6  0825               	movf	checksumCalc@i,w
  5539  0FA7  0723               	addwf	checksumCalc@buffer,w
  5540  0FA8  00A1               	movwf	??_checksumCalc
  5541  0FA9  0084               	movwf	4
  5542  0FAA  1383               	bcf	3,7	;select IRP bank0
  5543  0FAB  0800               	movf	0,w
  5544  0FAC  06A4               	xorwf	checksumCalc@chk,f
  5545  0FAD  2F94               	goto	l7524
  5546  0FAE                     l7528:	
  5547                           
  5548                           ;Main.c: 400: }
  5549                           ;Main.c: 401: return chk;
  5550  0FAE  1283               	bcf	3,5	;RP0=0, select bank0
  5551  0FAF  1303               	bcf	3,6	;RP1=0, select bank0
  5552  0FB0  0824               	movf	checksumCalc@chk,w
  5553  0FB1  0008               	return
  5554  0FB2                     __end_of_checksumCalc:	
  5555  0FB2                     __ptext1028:	
  5556 ;; =============== function _initGPIO ends ============
  5557                           
  5558                           
  5559 ;; *************** function _halfclockdelay *****************
  5560 ;; Defined at:
  5561 ;;		line 101 in file "I2c.c"
  5562 ;; Parameters:    Size  Location     Type
  5563 ;;		None
  5564 ;; Auto vars:     Size  Location     Type
  5565 ;;  downcount       1    1[BANK0 ] unsigned char 
  5566 ;;  delayvalue      1    0        unsigned char 
  5567 ;; Return value:  Size  Location     Type
  5568 ;;		None               void
  5569 ;; Registers used:
  5570 ;;		wreg, status,2, status,0
  5571 ;; Tracked objects:
  5572 ;;		On entry : 40/120
  5573 ;;		On exit  : 60/100
  5574 ;;		Unchanged: FFF9F/0
  5575 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5576 ;;      Params:         0       0       0       0
  5577 ;;      Locals:         0       2       0       0
  5578 ;;      Temps:          0       0       0       0
  5579 ;;      Totals:         0       2       0       0
  5580 ;;Total ram usage:        2 bytes
  5581 ;; Hardware stack levels used:    1
  5582 ;; Hardware stack levels required when called:    3
  5583 ;; This function calls:
  5584 ;;		Nothing
  5585 ;; This function is called by:
  5586 ;;		_scl_out
  5587 ;;		_sda_out
  5588 ;; This function uses a non-reentrant model
  5589 ;;
  5590  0FB2                     _halfclockdelay:	
  5591  0FB2                     l7534:	
  5592                           ; Regs used in _halfclockdelay: [wreg+status,2+status,0]
  5593                           
  5594                           
  5595                           ;I2c.c: 104: unsigned char downcount;
  5596                           ;I2c.c: 105: for (downcount = delayvalue; downcount >0; downcount--);
  5597  0FB2  3010               	movlw	16
  5598  0FB3  1283               	bcf	3,5	;RP0=0, select bank0
  5599  0FB4  00A1               	movwf	halfclockdelay@downcount
  5600  0FB5                     l7540:	
  5601  0FB5  0BA1               	decfsz	halfclockdelay@downcount,f
  5602  0FB6  2FB5               	goto	l7540
  5603  0FB7  0008               	return
  5604  0FB8                     __end_of_halfclockdelay:	
  5605  0FB8                     __ptext1025:	
  5606 ;; =============== function _memcpy ends ============
  5607                           
  5608                           
  5609 ;; *************** function _checksumVerify *****************
  5610 ;; Defined at:
  5611 ;;		line 378 in file "Main.c"
  5612 ;; Parameters:    Size  Location     Type
  5613 ;;		None
  5614 ;; Auto vars:     Size  Location     Type
  5615 ;;  i               1    4[BANK0 ] unsigned char 
  5616 ;;  len             1    3[BANK0 ] unsigned char 
  5617 ;;  checksum        1    2[BANK0 ] unsigned char 
  5618 ;; Return value:  Size  Location     Type
  5619 ;;		None               void
  5620 ;; Registers used:
  5621 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5622 ;; Tracked objects:
  5623 ;;		On entry : 160/100
  5624 ;;		On exit  : 160/100
  5625 ;;		Unchanged: FFE00/0
  5626 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5627 ;;      Params:         0       0       0       0
  5628 ;;      Locals:         0       3       0       0
  5629 ;;      Temps:          0       2       0       0
  5630 ;;      Totals:         0       5       0       0
  5631 ;;Total ram usage:        5 bytes
  5632 ;; Hardware stack levels used:    1
  5633 ;; Hardware stack levels required when called:    3
  5634 ;; This function calls:
  5635 ;;		Nothing
  5636 ;; This function is called by:
  5637 ;;		_comandoRx
  5638 ;; This function uses a non-reentrant model
  5639 ;;
  5640  0FB8                     _checksumVerify:	
  5641                           
  5642                           ;Main.c: 379: unsigned char len = rxBufferLength;
  5643                           
  5644                           ; Regs used in _checksumVerify: [wreg-fsr0h+status,2+status,0]
  5645  0FB8  087B               	movf	_rxBufferLength,w
  5646  0FB9  00A3               	movwf	checksumVerify@len
  5647                           
  5648                           ;Main.c: 380: unsigned char checksum = 0;
  5649  0FBA  01A2               	clrf	checksumVerify@checksum
  5650                           
  5651                           ;Main.c: 382: for (unsigned char i=1 ;i<len-2;i++){
  5652  0FBB  01A4               	clrf	checksumVerify@i
  5653  0FBC                     l7594:	
  5654  0FBC  0AA4               	incf	checksumVerify@i,f
  5655  0FBD  0823               	movf	checksumVerify@len,w
  5656  0FBE  3EFE               	addlw	254
  5657  0FBF  00A0               	movwf	??_checksumVerify
  5658  0FC0  30FF               	movlw	255
  5659  0FC1  1803               	skipnc
  5660  0FC2  3000               	movlw	0
  5661  0FC3  00A1               	movwf	??_checksumVerify+1
  5662  0FC4  3A80               	xorlw	128
  5663  0FC5  3C80               	sublw	128
  5664  0FC6  1D03               	skipz
  5665  0FC7  2FCA               	goto	u825
  5666  0FC8  0820               	movf	??_checksumVerify,w
  5667  0FC9  0224               	subwf	checksumVerify@i,w
  5668  0FCA                     u825:	
  5669  0FCA  1803               	btfsc	3,0
  5670  0FCB  2FD5               	goto	l7598
  5671                           
  5672                           ;Main.c: 383: checksum ^= rxBuffer[i];
  5673  0FCC  1283               	bcf	3,5	;RP0=0, select bank0
  5674  0FCD  1303               	bcf	3,6	;RP1=0, select bank0
  5675  0FCE  0824               	movf	checksumVerify@i,w
  5676  0FCF  3E3E               	addlw	_rxBuffer& (0+255)
  5677  0FD0  0084               	movwf	4
  5678  0FD1  1783               	bsf	3,7	;select IRP bank2
  5679  0FD2  0800               	movf	0,w
  5680  0FD3  06A2               	xorwf	checksumVerify@checksum,f
  5681  0FD4  2FBC               	goto	l7594
  5682  0FD5                     l7598:	
  5683                           
  5684                           ;Main.c: 384: }
  5685                           ;Main.c: 385: if(rxBuffer[len-2] == checksum){
  5686  0FD5  1283               	bcf	3,5	;RP0=0, select bank0
  5687  0FD6  1303               	bcf	3,6	;RP1=0, select bank0
  5688  0FD7  0823               	movf	checksumVerify@len,w
  5689  0FD8  3E3C               	addlw	(_rxBuffer+-2)& (0+255)
  5690  0FD9  0084               	movwf	4
  5691  0FDA  1783               	bsf	3,7	;select IRP bank2
  5692  0FDB  0800               	movf	0,w
  5693  0FDC  0622               	xorwf	checksumVerify@checksum,w
  5694  0FDD  1D03               	skipz
  5695  0FDE  2FE1               	goto	l7606
  5696                           
  5697                           ;Main.c: 387: return 1;
  5698  0FDF  1403               	setc
  5699  0FE0  0008               	return
  5700  0FE1                     l7606:	
  5701                           
  5702                           ;Main.c: 389: else
  5703                           ;Main.c: 390: return 0;
  5704  0FE1  1003               	clrc
  5705  0FE2  0008               	return
  5706  0FE3                     __end_of_checksumVerify:	
  5707  0FE3                     __ptext1024:	
  5708 ;; =============== function ___wmul ends ============
  5709                           
  5710                           
  5711 ;; *************** function _memcpy *****************
  5712 ;; Defined at:
  5713 ;;		line 10 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\memcpy.c"
  5714 ;; Parameters:    Size  Location     Type
  5715 ;;  d1              1    wreg     PTR void 
  5716 ;;		 -> cmd(30), 
  5717 ;;  s1              1    0[BANK0 ] PTR const void 
  5718 ;;		 -> rxBuffer(30), 
  5719 ;;  n               2    1[BANK0 ] unsigned int 
  5720 ;; Auto vars:     Size  Location     Type
  5721 ;;  d1              1    4[BANK0 ] PTR void 
  5722 ;;		 -> cmd(30), 
  5723 ;;  s               1    6[BANK0 ] PTR const unsigned char 
  5724 ;;		 -> rxBuffer(30), 
  5725 ;;  d               1    5[BANK0 ] PTR unsigned char 
  5726 ;;		 -> cmd(30), 
  5727 ;; Return value:  Size  Location     Type
  5728 ;;                  1    wreg      PTR void 
  5729 ;; Registers used:
  5730 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  5731 ;; Tracked objects:
  5732 ;;		On entry : 160/100
  5733 ;;		On exit  : 60/0
  5734 ;;		Unchanged: FFE9F/0
  5735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5736 ;;      Params:         0       3       0       0
  5737 ;;      Locals:         0       3       0       0
  5738 ;;      Temps:          0       1       0       0
  5739 ;;      Totals:         0       7       0       0
  5740 ;;Total ram usage:        7 bytes
  5741 ;; Hardware stack levels used:    1
  5742 ;; Hardware stack levels required when called:    3
  5743 ;; This function calls:
  5744 ;;		Nothing
  5745 ;; This function is called by:
  5746 ;;		_comandoRx
  5747 ;; This function uses a non-reentrant model
  5748 ;;
  5749  0FE3                     _memcpy:	
  5750                           
  5751                           ; Regs used in _memcpy: [wreg-fsr0h+status,2+status,0]
  5752                           ;memcpy@d1 stored from wreg
  5753  0FE3  00A4               	movwf	memcpy@d1
  5754  0FE4  0820               	movf	memcpy@s1,w
  5755  0FE5  00A6               	movwf	memcpy@s
  5756  0FE6  0824               	movf	memcpy@d1,w
  5757  0FE7  00A5               	movwf	memcpy@d
  5758  0FE8                     l7618:	
  5759  0FE8  3001               	movlw	1
  5760  0FE9  02A1               	subwf	memcpy@n,f
  5761  0FEA  3000               	movlw	0
  5762  0FEB  1C03               	skipc
  5763  0FEC  03A2               	decf	memcpy@n+1,f
  5764  0FED  02A2               	subwf	memcpy@n+1,f
  5765  0FEE  0A21               	incf	memcpy@n,w
  5766  0FEF  1903               	skipnz
  5767  0FF0  0A22               	incf	memcpy@n+1,w
  5768  0FF1  1903               	btfsc	3,2
  5769  0FF2  0008               	return
  5770  0FF3  0826               	movf	memcpy@s,w
  5771  0FF4  0084               	movwf	4
  5772  0FF5  1783               	bsf	3,7	;select IRP bank2
  5773  0FF6  0800               	movf	0,w
  5774  0FF7  00A3               	movwf	??_memcpy
  5775  0FF8  0825               	movf	memcpy@d,w
  5776  0FF9  0084               	movwf	4
  5777  0FFA  0823               	movf	??_memcpy,w
  5778  0FFB  1383               	bcf	3,7	;select IRP bank0
  5779  0FFC  0080               	movwf	0
  5780  0FFD  0AA6               	incf	memcpy@s,f
  5781  0FFE  0AA5               	incf	memcpy@d,f
  5782  0FFF  2FE8               	goto	l7618
  5783  1000                     __end_of_memcpy:	
  5784                           
  5785                           	psect	text1004
  5786  016D                     __ptext1004:	
  5787 ;; =============== function _eepromWriteByte ends ============
  5788                           
  5789                           
  5790 ;; *************** function _jdyConfig *****************
  5791 ;; Defined at:
  5792 ;;		line 139 in file "Main.c"
  5793 ;; Parameters:    Size  Location     Type
  5794 ;;		None
  5795 ;; Auto vars:     Size  Location     Type
  5796 ;;		None
  5797 ;; Return value:  Size  Location     Type
  5798 ;;		None               void
  5799 ;; Registers used:
  5800 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5801 ;; Tracked objects:
  5802 ;;		On entry : 0/0
  5803 ;;		On exit  : 60/0
  5804 ;;		Unchanged: 0/0
  5805 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5806 ;;      Params:         0       0       0       0
  5807 ;;      Locals:         0       0       0       0
  5808 ;;      Temps:          0       3       0       0
  5809 ;;      Totals:         0       3       0       0
  5810 ;;Total ram usage:        3 bytes
  5811 ;; Hardware stack levels used:    1
  5812 ;; Hardware stack levels required when called:    5
  5813 ;; This function calls:
  5814 ;;		_UART_send_String
  5815 ;; This function is called by:
  5816 ;;		_main
  5817 ;; This function uses a non-reentrant model
  5818 ;;
  5819  016D                     _jdyConfig:	
  5820                           
  5821                           ;Main.c: 140: RC4 = 0;
  5822                           
  5823                           ; Regs used in _jdyConfig: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5824  016D  1283               	bcf	3,5	;RP0=0, select bank0
  5825  016E  3082               	movlw	130
  5826  016F  1303               	bcf	3,6	;RP1=0, select bank0
  5827  0170  1207               	bcf	7,4
  5828                           
  5829                           ;Main.c: 141: _delay((unsigned long)((100)*(4000000/4000.0)));
  5830  0171  00A5               	movwf	??_jdyConfig+1
  5831  0172  30DD               	movlw	221
  5832  0173  00A4               	movwf	??_jdyConfig
  5833  0174                     u1777:	
  5834  0174  0BA4               	decfsz	??_jdyConfig,f
  5835  0175  2974               	goto	u1777
  5836  0176  0BA5               	decfsz	??_jdyConfig+1,f
  5837  0177  2974               	goto	u1777
  5838  0178  2979               	nop2
  5839                           
  5840                           ;Main.c: 142: UART_send_String("AT+ADVIN1\r\n",11);
  5841  0179  300B               	movlw	11
  5842  017A  1283               	bcf	3,5	;RP0=0, select bank0
  5843  017B  1303               	bcf	3,6	;RP1=0, select bank0
  5844  017C  00A1               	movwf	?_UART_send_String
  5845  017D  300F               	movlw	(STR_2-__stringbase)& (0+255)
  5846  017E  21BA  118A         	fcall	_UART_send_String
  5847                           
  5848                           ;Main.c: 143: _delay((unsigned long)((350)*(4000000/4000.0)));
  5849  0180  3002               	movlw	2
  5850  0181  00A6               	movwf	??_jdyConfig+2
  5851  0182  30C7               	movlw	199
  5852  0183  00A5               	movwf	??_jdyConfig+1
  5853  0184  3088               	movlw	136
  5854  0185  00A4               	movwf	??_jdyConfig
  5855  0186                     u1787:	
  5856  0186  0BA4               	decfsz	??_jdyConfig,f
  5857  0187  2986               	goto	u1787
  5858  0188  0BA5               	decfsz	??_jdyConfig+1,f
  5859  0189  2986               	goto	u1787
  5860  018A  0BA6               	decfsz	??_jdyConfig+2,f
  5861  018B  2986               	goto	u1787
  5862  018C  0064               	clrwdt
  5863                           
  5864                           ;Main.c: 144: UART_send_String("AT+STARTEN1\r\n",13);
  5865  018D  300D               	movlw	13
  5866  018E  1283               	bcf	3,5	;RP0=0, select bank0
  5867  018F  1303               	bcf	3,6	;RP1=0, select bank0
  5868  0190  00A1               	movwf	?_UART_send_String
  5869  0191  3001               	movlw	(STR_3-__stringbase)& (0+255)
  5870  0192  21BA  118A         	fcall	_UART_send_String
  5871                           
  5872                           ;Main.c: 145: _delay((unsigned long)((350)*(4000000/4000.0)));
  5873  0194  3002               	movlw	2
  5874  0195  00A6               	movwf	??_jdyConfig+2
  5875  0196  30C7               	movlw	199
  5876  0197  00A5               	movwf	??_jdyConfig+1
  5877  0198  3088               	movlw	136
  5878  0199  00A4               	movwf	??_jdyConfig
  5879  019A                     u1797:	
  5880  019A  0BA4               	decfsz	??_jdyConfig,f
  5881  019B  299A               	goto	u1797
  5882  019C  0BA5               	decfsz	??_jdyConfig+1,f
  5883  019D  299A               	goto	u1797
  5884  019E  0BA6               	decfsz	??_jdyConfig+2,f
  5885  019F  299A               	goto	u1797
  5886  01A0  0064               	clrwdt
  5887                           
  5888                           ;Main.c: 146: UART_send_String("AT+RST\r\n",8);
  5889  01A1  3008               	movlw	8
  5890  01A2  1283               	bcf	3,5	;RP0=0, select bank0
  5891  01A3  1303               	bcf	3,6	;RP1=0, select bank0
  5892  01A4  00A1               	movwf	?_UART_send_String
  5893  01A5  3027               	movlw	(STR_4-__stringbase)& (0+255)
  5894  01A6  21BA  118A         	fcall	_UART_send_String
  5895                           
  5896                           ;Main.c: 147: _delay((unsigned long)((350)*(4000000/4000.0)));
  5897  01A8  3002               	movlw	2
  5898  01A9  00A6               	movwf	??_jdyConfig+2
  5899  01AA  30C7               	movlw	199
  5900  01AB  00A5               	movwf	??_jdyConfig+1
  5901  01AC  3088               	movlw	136
  5902  01AD  00A4               	movwf	??_jdyConfig
  5903  01AE                     u1807:	
  5904  01AE  0BA4               	decfsz	??_jdyConfig,f
  5905  01AF  29AE               	goto	u1807
  5906  01B0  0BA5               	decfsz	??_jdyConfig+1,f
  5907  01B1  29AE               	goto	u1807
  5908  01B2  0BA6               	decfsz	??_jdyConfig+2,f
  5909  01B3  29AE               	goto	u1807
  5910  01B4  0064               	clrwdt
  5911                           
  5912                           ;Main.c: 148: flagTryConnect = 1;
  5913  01B5  15FA               	bsf	_flagTryConnect/(0+8),_flagTryConnect& (0+7)
  5914                           
  5915                           ;Main.c: 149: RC4 = 1;
  5916  01B6  1283               	bcf	3,5	;RP0=0, select bank0
  5917  01B7  1303               	bcf	3,6	;RP1=0, select bank0
  5918  01B8  1607               	bsf	7,4
  5919  01B9  0008               	return
  5920  01BA                     __end_of_jdyConfig:	
  5921  01BA                     __ptext1019:	
  5922 ;; =============== function _getClockCmd ends ============
  5923                           
  5924                           
  5925 ;; *************** function _UART_send_String *****************
  5926 ;; Defined at:
  5927 ;;		line 49 in file "uart.c"
  5928 ;; Parameters:    Size  Location     Type
  5929 ;;  ch              1    wreg     PTR unsigned char 
  5930 ;;		 -> STR_4(9), STR_3(14), STR_2(12), STR_1(12), 
  5931 ;;  lenth           1    1[BANK0 ] unsigned char 
  5932 ;; Auto vars:     Size  Location     Type
  5933 ;;  ch              1    2[BANK0 ] PTR unsigned char 
  5934 ;;		 -> STR_4(9), STR_3(14), STR_2(12), STR_1(12), 
  5935 ;;  i               1    3[BANK0 ] unsigned char 
  5936 ;; Return value:  Size  Location     Type
  5937 ;;		None               void
  5938 ;; Registers used:
  5939 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5940 ;; Tracked objects:
  5941 ;;		On entry : 60/0
  5942 ;;		On exit  : 60/0
  5943 ;;		Unchanged: FFE00/0
  5944 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  5945 ;;      Params:         0       1       0       0
  5946 ;;      Locals:         0       2       0       0
  5947 ;;      Temps:          0       0       0       0
  5948 ;;      Totals:         0       3       0       0
  5949 ;;Total ram usage:        3 bytes
  5950 ;; Hardware stack levels used:    1
  5951 ;; Hardware stack levels required when called:    4
  5952 ;; This function calls:
  5953 ;;		_UART_send_char
  5954 ;; This function is called by:
  5955 ;;		_main
  5956 ;;		_jdyConfig
  5957 ;; This function uses a non-reentrant model
  5958 ;;
  5959  01BA                     _UART_send_String:	
  5960                           
  5961                           ; Regs used in _UART_send_String: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  5962                           ;UART_send_String@ch stored from wreg
  5963  01BA  00A2               	movwf	UART_send_String@ch
  5964                           
  5965                           ;uart.c: 56: for(char i=0; i<lenth ; i++){
  5966  01BB  01A3               	clrf	UART_send_String@i
  5967  01BC                     l7772:	
  5968  01BC  0821               	movf	UART_send_String@lenth,w
  5969  01BD  0223               	subwf	UART_send_String@i,w
  5970  01BE  1803               	btfsc	3,0
  5971  01BF  0008               	return
  5972                           
  5973                           ;uart.c: 57: UART_send_char(*ch++);
  5974  01C0  0822               	movf	UART_send_String@ch,w
  5975  01C1  0084               	movwf	4
  5976  01C2  118A  2205  118A   	fcall	stringdir
  5977  01C5  158A  2705  118A   	fcall	_UART_send_char
  5978  01C8  0AA2               	incf	UART_send_String@ch,f
  5979  01C9  0AA3               	incf	UART_send_String@i,f
  5980  01CA  29BC               	goto	l7772
  5981  01CB                     __end_of_UART_send_String:	
  5982                           
  5983                           	psect	text1014
  5984  01CB                     __ptext1014:	
  5985 ;; =============== function _scl_out ends ============
  5986                           
  5987                           
  5988 ;; *************** function _readLogStatus *****************
  5989 ;; Defined at:
  5990 ;;		line 130 in file "protocolo.c"
  5991 ;; Parameters:    Size  Location     Type
  5992 ;;		None
  5993 ;; Auto vars:     Size  Location     Type
  5994 ;;		None
  5995 ;; Return value:  Size  Location     Type
  5996 ;;		None               void
  5997 ;; Registers used:
  5998 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  5999 ;; Tracked objects:
  6000 ;;		On entry : 0/120
  6001 ;;		On exit  : 60/20
  6002 ;;		Unchanged: FFE00/0
  6003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6004 ;;      Params:         0       0       0       0
  6005 ;;      Locals:         0       0       0       0
  6006 ;;      Temps:          0       0       0       0
  6007 ;;      Totals:         0       0       0       0
  6008 ;;Total ram usage:        0 bytes
  6009 ;; Hardware stack levels used:    1
  6010 ;; Hardware stack levels required when called:    4
  6011 ;; This function calls:
  6012 ;;		_checksumCalc
  6013 ;; This function is called by:
  6014 ;;		_comandoRx
  6015 ;; This function uses a non-reentrant model
  6016 ;;
  6017  01CB                     _readLogStatus:	
  6018                           
  6019                           ;protocolo.c: 132: bufferTxLen = 14;
  6020                           
  6021                           ; Regs used in _readLogStatus: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6022  01CB  300E               	movlw	14
  6023  01CC  1283               	bcf	3,5	;RP0=0, select bank0
  6024  01CD  1303               	bcf	3,6	;RP1=0, select bank0
  6025  01CE  00E0               	movwf	_bufferTxLen
  6026                           
  6027                           ;protocolo.c: 133: bufferTx[0] = 0x55;
  6028  01CF  3055               	movlw	85
  6029  01D0  1683               	bsf	3,5	;RP0=1, select bank1
  6030  01D1  00A0               	movwf	_bufferTx^(0+128)
  6031                           
  6032                           ;protocolo.c: 134: bufferTx[1] = 0x36;
  6033  01D2  3036               	movlw	54
  6034  01D3  00A1               	movwf	(_bufferTx^(0+128)+1)
  6035                           
  6036                           ;protocolo.c: 135: bufferTx[2] = 0x09;
  6037  01D4  3009               	movlw	9
  6038  01D5  00A2               	movwf	(_bufferTx^(0+128)+2)
  6039                           
  6040                           ;protocolo.c: 136: bufferTx[3] = startTime>>24;
  6041  01D6  1283               	bcf	3,5	;RP0=0, select bank0
  6042  01D7  0853               	movf	_startTime+3,w
  6043  01D8  1683               	bsf	3,5	;RP0=1, select bank1
  6044  01D9  00A3               	movwf	(_bufferTx^(0+128)+3)
  6045                           
  6046                           ;protocolo.c: 137: bufferTx[4] = startTime>>16;
  6047  01DA  1283               	bcf	3,5	;RP0=0, select bank0
  6048  01DB  0852               	movf	_startTime+2,w
  6049  01DC  1683               	bsf	3,5	;RP0=1, select bank1
  6050  01DD  00A4               	movwf	(_bufferTx^(0+128)+4)
  6051                           
  6052                           ;protocolo.c: 138: bufferTx[5] = startTime>>8;
  6053  01DE  1283               	bcf	3,5	;RP0=0, select bank0
  6054  01DF  0851               	movf	_startTime+1,w
  6055  01E0  1683               	bsf	3,5	;RP0=1, select bank1
  6056  01E1  00A5               	movwf	(_bufferTx^(0+128)+5)
  6057                           
  6058                           ;protocolo.c: 139: bufferTx[6] = startTime;
  6059  01E2  1283               	bcf	3,5	;RP0=0, select bank0
  6060  01E3  0850               	movf	_startTime,w
  6061  01E4  1683               	bsf	3,5	;RP0=1, select bank1
  6062  01E5  00A6               	movwf	(_bufferTx^(0+128)+6)
  6063                           
  6064                           ;protocolo.c: 140: bufferTx[7] = timer>>8;
  6065  01E6  1283               	bcf	3,5	;RP0=0, select bank0
  6066  01E7  085B               	movf	_timer+1,w
  6067  01E8  1683               	bsf	3,5	;RP0=1, select bank1
  6068  01E9  00A7               	movwf	(_bufferTx^(0+128)+7)
  6069                           
  6070                           ;protocolo.c: 141: bufferTx[8] = timer;
  6071  01EA  1283               	bcf	3,5	;RP0=0, select bank0
  6072  01EB  085A               	movf	_timer,w
  6073  01EC  1683               	bsf	3,5	;RP0=1, select bank1
  6074  01ED  00A8               	movwf	(_bufferTx^(0+128)+8)
  6075                           
  6076                           ;protocolo.c: 142: bufferTx[9] = numOfLogs>>8;
  6077  01EE  1283               	bcf	3,5	;RP0=0, select bank0
  6078  01EF  085F               	movf	_numOfLogs+1,w
  6079  01F0  1683               	bsf	3,5	;RP0=1, select bank1
  6080  01F1  00A9               	movwf	(_bufferTx^(0+128)+9)
  6081                           
  6082                           ;protocolo.c: 143: bufferTx[10] = numOfLogs;
  6083  01F2  1283               	bcf	3,5	;RP0=0, select bank0
  6084  01F3  085E               	movf	_numOfLogs,w
  6085  01F4  1683               	bsf	3,5	;RP0=1, select bank1
  6086  01F5  00AA               	movwf	(_bufferTx^(0+128)+10)
  6087                           
  6088                           ;protocolo.c: 144: bufferTx[11] = logStatus;
  6089  01F6  3000               	movlw	0
  6090  01F7  1A7A               	btfsc	_logStatus/(0+8),_logStatus& (0+7)
  6091  01F8  3001               	movlw	1
  6092  01F9  00AB               	movwf	(_bufferTx^(0+128)+11)
  6093                           
  6094                           ;protocolo.c: 145: bufferTx[12] = checksumCalc(bufferTx,14);
  6095  01FA  300E               	movlw	14
  6096  01FB  1283               	bcf	3,5	;RP0=0, select bank0
  6097  01FC  00A0               	movwf	?_checksumCalc
  6098  01FD  30A0               	movlw	_bufferTx& (0+255)
  6099  01FE  158A  2791         	fcall	_checksumCalc
  6100  0200  1683               	bsf	3,5	;RP0=1, select bank1
  6101  0201  00AC               	movwf	(_bufferTx^(0+128)+12)
  6102                           
  6103                           ;protocolo.c: 146: bufferTx[13] = 0x0A;
  6104  0202  300A               	movlw	10
  6105  0203  00AD               	movwf	(_bufferTx^(0+128)+13)
  6106  0204  0008               	return
  6107  0205                     __end_of_readLogStatus:	
  6108                           
  6109                           	psect	text1015
  6110  0310                     __ptext1015:	
  6111 ;; =============== function _readLogStatus ends ============
  6112                           
  6113                           
  6114 ;; *************** function _stopLogCmd *****************
  6115 ;; Defined at:
  6116 ;;		line 115 in file "protocolo.c"
  6117 ;; Parameters:    Size  Location     Type
  6118 ;;		None
  6119 ;; Auto vars:     Size  Location     Type
  6120 ;;		None
  6121 ;; Return value:  Size  Location     Type
  6122 ;;		None               void
  6123 ;; Registers used:
  6124 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6125 ;; Tracked objects:
  6126 ;;		On entry : 0/120
  6127 ;;		On exit  : 60/20
  6128 ;;		Unchanged: FFE00/0
  6129 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6130 ;;      Params:         0       0       0       0
  6131 ;;      Locals:         0       0       0       0
  6132 ;;      Temps:          0       0       0       0
  6133 ;;      Totals:         0       0       0       0
  6134 ;;Total ram usage:        0 bytes
  6135 ;; Hardware stack levels used:    1
  6136 ;; Hardware stack levels required when called:    4
  6137 ;; This function calls:
  6138 ;;		_checksumCalc
  6139 ;; This function is called by:
  6140 ;;		_comandoRx
  6141 ;; This function uses a non-reentrant model
  6142 ;;
  6143  0310                     _stopLogCmd:	
  6144  0310  3005               	movlw	5
  6145                           
  6146                           ;protocolo.c: 117: logStatus = 0;
  6147                           
  6148                           ; Regs used in _stopLogCmd: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6149  0311  127A               	bcf	_logStatus/(0+8),_logStatus& (0+7)
  6150                           
  6151                           ;protocolo.c: 120: bufferTxLen = 5;
  6152  0312  1283               	bcf	3,5	;RP0=0, select bank0
  6153  0313  00E0               	movwf	_bufferTxLen
  6154                           
  6155                           ;protocolo.c: 121: bufferTx[0] = 0x55;
  6156  0314  3055               	movlw	85
  6157  0315  1683               	bsf	3,5	;RP0=1, select bank1
  6158  0316  00A0               	movwf	_bufferTx^(0+128)
  6159                           
  6160                           ;protocolo.c: 122: bufferTx[1] = 0x35;
  6161  0317  3035               	movlw	53
  6162  0318  00A1               	movwf	(_bufferTx^(0+128)+1)
  6163  0319  3005               	movlw	5
  6164                           
  6165                           ;protocolo.c: 123: bufferTx[2] = 0x00;
  6166  031A  01A2               	clrf	(_bufferTx^(0+128)+2)
  6167                           
  6168                           ;protocolo.c: 124: bufferTx[3] = checksumCalc(bufferTx,5);
  6169  031B  1283               	bcf	3,5	;RP0=0, select bank0
  6170  031C  00A0               	movwf	?_checksumCalc
  6171  031D  30A0               	movlw	_bufferTx& (0+255)
  6172  031E  158A  2791         	fcall	_checksumCalc
  6173  0320  1683               	bsf	3,5	;RP0=1, select bank1
  6174  0321  00A3               	movwf	(_bufferTx^(0+128)+3)
  6175                           
  6176                           ;protocolo.c: 125: bufferTx[4] = 0x0A;
  6177  0322  300A               	movlw	10
  6178  0323  00A4               	movwf	(_bufferTx^(0+128)+4)
  6179  0324  0008               	return
  6180  0325                     __end_of_stopLogCmd:	
  6181                           
  6182                           	psect	text1016
  6183  02BF                     __ptext1016:	
  6184 ;; =============== function _stopLogCmd ends ============
  6185                           
  6186                           
  6187 ;; *************** function _getTimerCmd *****************
  6188 ;; Defined at:
  6189 ;;		line 46 in file "protocolo.c"
  6190 ;; Parameters:    Size  Location     Type
  6191 ;;		None
  6192 ;; Auto vars:     Size  Location     Type
  6193 ;;		None
  6194 ;; Return value:  Size  Location     Type
  6195 ;;		None               void
  6196 ;; Registers used:
  6197 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6198 ;; Tracked objects:
  6199 ;;		On entry : 0/120
  6200 ;;		On exit  : 60/20
  6201 ;;		Unchanged: FFE00/0
  6202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6203 ;;      Params:         0       0       0       0
  6204 ;;      Locals:         0       0       0       0
  6205 ;;      Temps:          0       0       0       0
  6206 ;;      Totals:         0       0       0       0
  6207 ;;Total ram usage:        0 bytes
  6208 ;; Hardware stack levels used:    1
  6209 ;; Hardware stack levels required when called:    4
  6210 ;; This function calls:
  6211 ;;		_checksumCalc
  6212 ;; This function is called by:
  6213 ;;		_comandoRx
  6214 ;; This function uses a non-reentrant model
  6215 ;;
  6216  02BF                     _getTimerCmd:	
  6217                           
  6218                           ;protocolo.c: 47: bufferTxLen = 7;
  6219                           
  6220                           ; Regs used in _getTimerCmd: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6221  02BF  3007               	movlw	7
  6222  02C0  1283               	bcf	3,5	;RP0=0, select bank0
  6223  02C1  1303               	bcf	3,6	;RP1=0, select bank0
  6224  02C2  00E0               	movwf	_bufferTxLen
  6225                           
  6226                           ;protocolo.c: 48: bufferTx[0] = 0x55;
  6227  02C3  3055               	movlw	85
  6228  02C4  1683               	bsf	3,5	;RP0=1, select bank1
  6229  02C5  00A0               	movwf	_bufferTx^(0+128)
  6230                           
  6231                           ;protocolo.c: 49: bufferTx[1] = 0x33;
  6232  02C6  3033               	movlw	51
  6233  02C7  00A1               	movwf	(_bufferTx^(0+128)+1)
  6234                           
  6235                           ;protocolo.c: 50: bufferTx[2] = 0x02;
  6236  02C8  3002               	movlw	2
  6237  02C9  00A2               	movwf	(_bufferTx^(0+128)+2)
  6238                           
  6239                           ;protocolo.c: 51: bufferTx[3] = timer>>8;
  6240  02CA  1283               	bcf	3,5	;RP0=0, select bank0
  6241  02CB  085B               	movf	_timer+1,w
  6242  02CC  1683               	bsf	3,5	;RP0=1, select bank1
  6243  02CD  00A3               	movwf	(_bufferTx^(0+128)+3)
  6244                           
  6245                           ;protocolo.c: 52: bufferTx[4] = timer;
  6246  02CE  1283               	bcf	3,5	;RP0=0, select bank0
  6247  02CF  085A               	movf	_timer,w
  6248  02D0  1683               	bsf	3,5	;RP0=1, select bank1
  6249  02D1  00A4               	movwf	(_bufferTx^(0+128)+4)
  6250                           
  6251                           ;protocolo.c: 53: bufferTx[5] = checksumCalc(bufferTx,7);
  6252  02D2  3007               	movlw	7
  6253  02D3  1283               	bcf	3,5	;RP0=0, select bank0
  6254  02D4  00A0               	movwf	?_checksumCalc
  6255  02D5  30A0               	movlw	_bufferTx& (0+255)
  6256  02D6  158A  2791         	fcall	_checksumCalc
  6257  02D8  1683               	bsf	3,5	;RP0=1, select bank1
  6258  02D9  00A5               	movwf	(_bufferTx^(0+128)+5)
  6259                           
  6260                           ;protocolo.c: 54: bufferTx[6] = 0x0A;
  6261  02DA  300A               	movlw	10
  6262  02DB  00A6               	movwf	(_bufferTx^(0+128)+6)
  6263  02DC  0008               	return
  6264  02DD                     __end_of_getTimerCmd:	
  6265                           
  6266                           	psect	text1017
  6267  029E                     __ptext1017:	
  6268 ;; =============== function _getTimerCmd ends ============
  6269                           
  6270                           
  6271 ;; *************** function _setTimerCmd *****************
  6272 ;; Defined at:
  6273 ;;		line 29 in file "protocolo.c"
  6274 ;; Parameters:    Size  Location     Type
  6275 ;;		None
  6276 ;; Auto vars:     Size  Location     Type
  6277 ;;		None
  6278 ;; Return value:  Size  Location     Type
  6279 ;;		None               void
  6280 ;; Registers used:
  6281 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6282 ;; Tracked objects:
  6283 ;;		On entry : 0/120
  6284 ;;		On exit  : 60/20
  6285 ;;		Unchanged: FFE00/0
  6286 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6287 ;;      Params:         0       0       0       0
  6288 ;;      Locals:         0       0       0       0
  6289 ;;      Temps:          0       0       0       0
  6290 ;;      Totals:         0       0       0       0
  6291 ;;Total ram usage:        0 bytes
  6292 ;; Hardware stack levels used:    1
  6293 ;; Hardware stack levels required when called:    4
  6294 ;; This function calls:
  6295 ;;		_checksumCalc
  6296 ;; This function is called by:
  6297 ;;		_comandoRx
  6298 ;; This function uses a non-reentrant model
  6299 ;;
  6300  029E                     _setTimerCmd:	
  6301                           
  6302                           ;protocolo.c: 31: newTimer = cmd[3];
  6303                           
  6304                           ; Regs used in _setTimerCmd: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  6305  029E  1683               	bsf	3,5	;RP0=1, select bank1
  6306  029F  1303               	bcf	3,6	;RP1=0, select bank1
  6307  02A0  084B               	movf	(_cmd^(0+128)+3),w
  6308  02A1  1283               	bcf	3,5	;RP0=0, select bank0
  6309  02A2  00D8               	movwf	_newTimer
  6310  02A3  01D9               	clrf	_newTimer+1
  6311                           
  6312                           ;protocolo.c: 32: newTimer<<=8;
  6313  02A4  00D9               	movwf	_newTimer+1
  6314  02A5  01D8               	clrf	_newTimer
  6315                           
  6316                           ;protocolo.c: 33: newTimer += cmd[4];
  6317  02A6  1683               	bsf	3,5	;RP0=1, select bank1
  6318  02A7  084C               	movf	(_cmd^(0+128)+4),w
  6319  02A8  1283               	bcf	3,5	;RP0=0, select bank0
  6320  02A9  07D8               	addwf	_newTimer,f
  6321  02AA  1803               	skipnc
  6322  02AB  0AD9               	incf	_newTimer+1,f
  6323                           
  6324                           ;protocolo.c: 36: bufferTxLen = 5;
  6325  02AC  3005               	movlw	5
  6326  02AD  00E0               	movwf	_bufferTxLen
  6327                           
  6328                           ;protocolo.c: 37: bufferTx[0] = 0x55;
  6329  02AE  3055               	movlw	85
  6330  02AF  1683               	bsf	3,5	;RP0=1, select bank1
  6331  02B0  00A0               	movwf	_bufferTx^(0+128)
  6332                           
  6333                           ;protocolo.c: 38: bufferTx[1] = 0x32;
  6334  02B1  3032               	movlw	50
  6335  02B2  00A1               	movwf	(_bufferTx^(0+128)+1)
  6336  02B3  3005               	movlw	5
  6337                           
  6338                           ;protocolo.c: 39: bufferTx[2] = 0x00;
  6339  02B4  01A2               	clrf	(_bufferTx^(0+128)+2)
  6340                           
  6341                           ;protocolo.c: 40: bufferTx[3] = checksumCalc(bufferTx,5);
  6342  02B5  1283               	bcf	3,5	;RP0=0, select bank0
  6343  02B6  00A0               	movwf	?_checksumCalc
  6344  02B7  30A0               	movlw	_bufferTx& (0+255)
  6345  02B8  158A  2791         	fcall	_checksumCalc
  6346  02BA  1683               	bsf	3,5	;RP0=1, select bank1
  6347  02BB  00A3               	movwf	(_bufferTx^(0+128)+3)
  6348                           
  6349                           ;protocolo.c: 41: bufferTx[4] = 0x0A;
  6350  02BC  300A               	movlw	10
  6351  02BD  00A4               	movwf	(_bufferTx^(0+128)+4)
  6352  02BE  0008               	return
  6353  02BF                     __end_of_setTimerCmd:	
  6354                           
  6355                           	psect	text1018
  6356  023A                     __ptext1018:	
  6357 ;; =============== function _setTimerCmd ends ============
  6358                           
  6359                           
  6360 ;; *************** function _getClockCmd *****************
  6361 ;; Defined at:
  6362 ;;		line 13 in file "protocolo.c"
  6363 ;; Parameters:    Size  Location     Type
  6364 ;;		None
  6365 ;; Auto vars:     Size  Location     Type
  6366 ;;		None
  6367 ;; Return value:  Size  Location     Type
  6368 ;;		None               void
  6369 ;; Registers used:
  6370 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  6371 ;; Tracked objects:
  6372 ;;		On entry : 0/120
  6373 ;;		On exit  : 60/0
  6374 ;;		Unchanged: FFE00/0
  6375 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6376 ;;      Params:         0       0       0       0
  6377 ;;      Locals:         0       0       0       0
  6378 ;;      Temps:          0       2       0       0
  6379 ;;      Totals:         0       2       0       0
  6380 ;;Total ram usage:        2 bytes
  6381 ;; Hardware stack levels used:    1
  6382 ;; Hardware stack levels required when called:    4
  6383 ;; This function calls:
  6384 ;;		_checksumCalc
  6385 ;; This function is called by:
  6386 ;;		_comandoRx
  6387 ;; This function uses a non-reentrant model
  6388 ;;
  6389  023A                     _getClockCmd:	
  6390                           
  6391                           ;protocolo.c: 15: bufferTx[0] = 0x55;
  6392                           
  6393                           ; Regs used in _getClockCmd: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  6394  023A  3055               	movlw	85
  6395  023B  1683               	bsf	3,5	;RP0=1, select bank1
  6396  023C  1303               	bcf	3,6	;RP1=0, select bank1
  6397  023D  00A0               	movwf	_bufferTx^(0+128)
  6398                           
  6399                           ;protocolo.c: 16: bufferTx[1] = 0x31;
  6400  023E  3031               	movlw	49
  6401  023F  00A1               	movwf	(_bufferTx^(0+128)+1)
  6402                           
  6403                           ;protocolo.c: 17: bufferTx[2] = 0x04;
  6404  0240  3004               	movlw	4
  6405  0241  00A2               	movwf	(_bufferTx^(0+128)+2)
  6406                           
  6407                           ;protocolo.c: 18: bufferTx[3] = timeNow>>24;
  6408  0242  1283               	bcf	3,5	;RP0=0, select bank0
  6409  0243  0857               	movf	_timeNow+3,w
  6410  0244  1683               	bsf	3,5	;RP0=1, select bank1
  6411  0245  00A3               	movwf	(_bufferTx^(0+128)+3)
  6412                           
  6413                           ;protocolo.c: 19: bufferTx[4] = timeNow>>16;
  6414  0246  1283               	bcf	3,5	;RP0=0, select bank0
  6415  0247  0856               	movf	_timeNow+2,w
  6416  0248  1683               	bsf	3,5	;RP0=1, select bank1
  6417  0249  00A4               	movwf	(_bufferTx^(0+128)+4)
  6418                           
  6419                           ;protocolo.c: 20: bufferTx[5] = timeNow>>8;
  6420  024A  1283               	bcf	3,5	;RP0=0, select bank0
  6421  024B  0855               	movf	_timeNow+1,w
  6422  024C  1683               	bsf	3,5	;RP0=1, select bank1
  6423  024D  00A5               	movwf	(_bufferTx^(0+128)+5)
  6424                           
  6425                           ;protocolo.c: 21: bufferTx[6] = timeNow + (( TMR1H-0x61) >> 4);
  6426  024E  1283               	bcf	3,5	;RP0=0, select bank0
  6427  024F  080F               	movf	15,w	;volatile
  6428  0250  3E9F               	addlw	159
  6429  0251  00A6               	movwf	??_getClockCmd
  6430  0252  30FF               	movlw	255
  6431  0253  1803               	skipnc
  6432  0254  3000               	movlw	0
  6433  0255  00A7               	movwf	??_getClockCmd+1
  6434  0256  3004               	movlw	4
  6435  0257  00FF               	movwf	127
  6436  0258                     u1135:	
  6437  0258  0D27               	rlf	??_getClockCmd+1,w
  6438  0259  0CA7               	rrf	??_getClockCmd+1,f
  6439  025A  0CA6               	rrf	??_getClockCmd,f
  6440  025B  0BFF               	decfsz	127,f
  6441  025C  2A58               	goto	u1135
  6442  025D  0854               	movf	_timeNow,w
  6443  025E  0726               	addwf	??_getClockCmd,w
  6444  025F  1683               	bsf	3,5	;RP0=1, select bank1
  6445  0260  00A6               	movwf	(_bufferTx^(0+128)+6)
  6446                           
  6447                           ;protocolo.c: 22: bufferTx[7] = checksumCalc(bufferTx,9);
  6448  0261  3009               	movlw	9
  6449  0262  1283               	bcf	3,5	;RP0=0, select bank0
  6450  0263  00A0               	movwf	?_checksumCalc
  6451  0264  30A0               	movlw	_bufferTx& (0+255)
  6452  0265  158A  2791         	fcall	_checksumCalc
  6453  0267  1683               	bsf	3,5	;RP0=1, select bank1
  6454  0268  00A7               	movwf	(_bufferTx^(0+128)+7)
  6455                           
  6456                           ;protocolo.c: 23: bufferTx[8] = 0x0A;
  6457  0269  300A               	movlw	10
  6458  026A  00A8               	movwf	(_bufferTx^(0+128)+8)
  6459                           
  6460                           ;protocolo.c: 24: bufferTxLen = 9;
  6461  026B  3009               	movlw	9
  6462  026C  1283               	bcf	3,5	;RP0=0, select bank0
  6463  026D  00E0               	movwf	_bufferTxLen
  6464  026E  0008               	return
  6465  026F                     __end_of_getClockCmd:	
  6466                           
  6467                           	psect	text1026
  6468  02DD                     __ptext1026:	
  6469 ;; =============== function _checksumVerify ends ============
  6470                           
  6471                           
  6472 ;; *************** function _initInterrupt *****************
  6473 ;; Defined at:
  6474 ;;		line 474 in file "Main.c"
  6475 ;; Parameters:    Size  Location     Type
  6476 ;;		None
  6477 ;; Auto vars:     Size  Location     Type
  6478 ;;		None
  6479 ;; Return value:  Size  Location     Type
  6480 ;;		None               void
  6481 ;; Registers used:
  6482 ;;		wreg, status,2
  6483 ;; Tracked objects:
  6484 ;;		On entry : 17F/20
  6485 ;;		On exit  : 17F/0
  6486 ;;		Unchanged: FFE80/0
  6487 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6488 ;;      Params:         0       0       0       0
  6489 ;;      Locals:         0       0       0       0
  6490 ;;      Temps:          0       0       0       0
  6491 ;;      Totals:         0       0       0       0
  6492 ;;Total ram usage:        0 bytes
  6493 ;; Hardware stack levels used:    1
  6494 ;; Hardware stack levels required when called:    3
  6495 ;; This function calls:
  6496 ;;		Nothing
  6497 ;; This function is called by:
  6498 ;;		_main
  6499 ;; This function uses a non-reentrant model
  6500 ;;
  6501  02DD                     _initInterrupt:	
  6502  02DD  300C               	movlw	12
  6503                           
  6504                           ;Main.c: 475: GIE = 1;
  6505                           
  6506                           ; Regs used in _initInterrupt: [wreg+status,2]
  6507  02DE  178B               	bsf	11,7
  6508                           
  6509                           ;Main.c: 476: PEIE = 1;
  6510  02DF  170B               	bsf	11,6
  6511                           
  6512                           ;Main.c: 479: INTE = 1;
  6513  02E0  160B               	bsf	11,4
  6514                           
  6515                           ;Main.c: 480: INTF = 0;
  6516  02E1  108B               	bcf	11,1
  6517                           
  6518                           ;Main.c: 481: INTEDG = 1;
  6519  02E2  1701               	bsf	1,6
  6520                           
  6521                           ;Main.c: 485: T0CS = 0;
  6522  02E3  1281               	bcf	1,5
  6523                           
  6524                           ;Main.c: 486: PSA = 0;
  6525  02E4  1181               	bcf	1,3
  6526                           
  6527                           ;Main.c: 487: PS0 = 1;
  6528  02E5  1401               	bsf	1,0
  6529                           
  6530                           ;Main.c: 488: PS1 = 1;
  6531  02E6  1481               	bsf	1,1
  6532                           
  6533                           ;Main.c: 489: PS2 = 1;
  6534  02E7  1501               	bsf	1,2
  6535                           
  6536                           ;Main.c: 490: TMR0 = 12;
  6537  02E8  1283               	bcf	3,5	;RP0=0, select bank0
  6538  02E9  0081               	movwf	1	;volatile
  6539                           
  6540                           ;Main.c: 491: T0IF = 0;
  6541  02EA  110B               	bcf	11,2
  6542                           
  6543                           ;Main.c: 492: T0IE = 1;
  6544  02EB  168B               	bsf	11,5
  6545                           
  6546                           ;Main.c: 497: TMR1L = 0x00;
  6547  02EC  018E               	clrf	14	;volatile
  6548                           
  6549                           ;Main.c: 498: TMR1H = 0x60;
  6550  02ED  3060               	movlw	96
  6551  02EE  008F               	movwf	15	;volatile
  6552                           
  6553                           ;Main.c: 499: T1CKPS0 = 1;
  6554  02EF  1610               	bsf	16,4
  6555                           
  6556                           ;Main.c: 500: T1CKPS1 = 1;
  6557  02F0  1690               	bsf	16,5
  6558                           
  6559                           ;Main.c: 501: TMR1CS = 1;
  6560  02F1  1490               	bsf	16,1
  6561                           
  6562                           ;Main.c: 502: nT1SYNC = 1;
  6563  02F2  1510               	bsf	16,2
  6564                           
  6565                           ;Main.c: 503: T1OSCEN = 1;
  6566  02F3  1590               	bsf	16,3
  6567                           
  6568                           ;Main.c: 504: TMR1IF = 0;
  6569  02F4  100C               	bcf	12,0
  6570                           
  6571                           ;Main.c: 505: TMR1IE = 1;
  6572  02F5  1683               	bsf	3,5	;RP0=1, select bank1
  6573  02F6  140C               	bsf	12,0
  6574                           
  6575                           ;Main.c: 506: TMR1ON = 1;
  6576  02F7  1283               	bcf	3,5	;RP0=0, select bank0
  6577  02F8  1410               	bsf	16,0
  6578  02F9  0008               	return
  6579  02FA                     __end_of_initInterrupt:	
  6580                           
  6581                           	psect	text1027
  6582  02FA                     __ptext1027:	
  6583 ;; =============== function _initInterrupt ends ============
  6584                           
  6585                           
  6586 ;; *************** function _initGPIO *****************
  6587 ;; Defined at:
  6588 ;;		line 455 in file "Main.c"
  6589 ;; Parameters:    Size  Location     Type
  6590 ;;		None
  6591 ;; Auto vars:     Size  Location     Type
  6592 ;;		None
  6593 ;; Return value:  Size  Location     Type
  6594 ;;		None               void
  6595 ;; Registers used:
  6596 ;;		wreg, status,2
  6597 ;; Tracked objects:
  6598 ;;		On entry : 17F/0
  6599 ;;		On exit  : 17F/0
  6600 ;;		Unchanged: FFE80/0
  6601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6602 ;;      Params:         0       0       0       0
  6603 ;;      Locals:         0       0       0       0
  6604 ;;      Temps:          0       0       0       0
  6605 ;;      Totals:         0       0       0       0
  6606 ;;Total ram usage:        0 bytes
  6607 ;; Hardware stack levels used:    1
  6608 ;; Hardware stack levels required when called:    3
  6609 ;; This function calls:
  6610 ;;		Nothing
  6611 ;; This function is called by:
  6612 ;;		_main
  6613 ;; This function uses a non-reentrant model
  6614 ;;
  6615  02FA                     _initGPIO:	
  6616                           
  6617                           ;Main.c: 456: ANSEL = 0x00;
  6618                           
  6619                           ; Regs used in _initGPIO: [wreg+status,2]
  6620  02FA  1703               	bsf	3,6	;RP1=1, select bank2
  6621  02FB  019E               	clrf	30	;volatile
  6622                           
  6623                           ;Main.c: 457: ANSELH = 0x00;
  6624  02FC  019F               	clrf	31	;volatile
  6625                           
  6626                           ;Main.c: 458: PORTA = 0;
  6627  02FD  1303               	bcf	3,6	;RP1=0, select bank0
  6628  02FE  0185               	clrf	5	;volatile
  6629                           
  6630                           ;Main.c: 459: TRISA = 0b00000100;
  6631  02FF  3004               	movlw	4
  6632  0300  1683               	bsf	3,5	;RP0=1, select bank1
  6633  0301  0085               	movwf	5	;volatile
  6634                           
  6635                           ;Main.c: 460: PORTA = 0;
  6636  0302  1283               	bcf	3,5	;RP0=0, select bank0
  6637  0303  0185               	clrf	5	;volatile
  6638                           
  6639                           ;Main.c: 462: PORTB = 0;
  6640  0304  0186               	clrf	6	;volatile
  6641                           
  6642                           ;Main.c: 463: TRISB = 0b00000000;
  6643  0305  1683               	bsf	3,5	;RP0=1, select bank1
  6644  0306  0186               	clrf	6	;volatile
  6645                           
  6646                           ;Main.c: 464: PORTB = 0;
  6647  0307  1283               	bcf	3,5	;RP0=0, select bank0
  6648  0308  0186               	clrf	6	;volatile
  6649                           
  6650                           ;Main.c: 466: PORTC = 0;
  6651  0309  0187               	clrf	7	;volatile
  6652                           
  6653                           ;Main.c: 467: TRISC = 0b00000001;
  6654  030A  3001               	movlw	1
  6655  030B  1683               	bsf	3,5	;RP0=1, select bank1
  6656  030C  0087               	movwf	7	;volatile
  6657                           
  6658                           ;Main.c: 468: PORTC = 0;
  6659  030D  1283               	bcf	3,5	;RP0=0, select bank0
  6660  030E  0187               	clrf	7	;volatile
  6661  030F  0008               	return
  6662  0310                     __end_of_initGPIO:	
  6663                           
  6664                           	psect	text1029
  6665  0368                     __ptext1029:	
  6666 ;; =============== function _halfclockdelay ends ============
  6667                           
  6668                           
  6669 ;; *************** function _i2cInitialize *****************
  6670 ;; Defined at:
  6671 ;;		line 86 in file "I2c.c"
  6672 ;; Parameters:    Size  Location     Type
  6673 ;;  feq_K           4    0[BANK0 ] const unsigned long 
  6674 ;; Auto vars:     Size  Location     Type
  6675 ;;		None
  6676 ;; Return value:  Size  Location     Type
  6677 ;;		None               void
  6678 ;; Registers used:
  6679 ;;		None
  6680 ;; Tracked objects:
  6681 ;;		On entry : 17F/0
  6682 ;;		On exit  : 17F/20
  6683 ;;		Unchanged: FFE80/0
  6684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6685 ;;      Params:         0       4       0       0
  6686 ;;      Locals:         0       0       0       0
  6687 ;;      Temps:          0       0       0       0
  6688 ;;      Totals:         0       4       0       0
  6689 ;;Total ram usage:        4 bytes
  6690 ;; Hardware stack levels used:    1
  6691 ;; Hardware stack levels required when called:    3
  6692 ;; This function calls:
  6693 ;;		Nothing
  6694 ;; This function is called by:
  6695 ;;		_main
  6696 ;; This function uses a non-reentrant model
  6697 ;;
  6698  0368                     _i2cInitialize:	
  6699                           
  6700                           ;I2c.c: 87: TRISB4 = 1; TRISB6 = 1;
  6701                           
  6702                           ; Regs used in _i2cInitialize: []
  6703  0368  1683               	bsf	3,5	;RP0=1, select bank1
  6704  0369  1606               	bsf	6,4
  6705  036A  1706               	bsf	6,6
  6706  036B  0008               	return
  6707  036C                     __end_of_i2cInitialize:	
  6708                           
  6709                           	psect	text1031
  6710  033A                     __ptext1031:	
  6711 ;; =============== function _checksumCalc ends ============
  6712                           
  6713                           
  6714 ;; *************** function _memset *****************
  6715 ;; Defined at:
  6716 ;;		line 10 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\memset.c"
  6717 ;; Parameters:    Size  Location     Type
  6718 ;;  p1              1    wreg     PTR void 
  6719 ;;		 -> rxBuffer(30), 
  6720 ;;  c               2    0[BANK0 ] int 
  6721 ;;  n               2    2[BANK0 ] unsigned int 
  6722 ;; Auto vars:     Size  Location     Type
  6723 ;;  p1              1    4[BANK0 ] PTR void 
  6724 ;;		 -> rxBuffer(30), 
  6725 ;;  p               1    5[BANK0 ] PTR unsigned char 
  6726 ;;		 -> rxBuffer(30), 
  6727 ;; Return value:  Size  Location     Type
  6728 ;;                  1    wreg      PTR void 
  6729 ;; Registers used:
  6730 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  6731 ;; Tracked objects:
  6732 ;;		On entry : 60/0
  6733 ;;		On exit  : 60/0
  6734 ;;		Unchanged: FFE9F/0
  6735 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6736 ;;      Params:         0       4       0       0
  6737 ;;      Locals:         0       2       0       0
  6738 ;;      Temps:          0       0       0       0
  6739 ;;      Totals:         0       6       0       0
  6740 ;;Total ram usage:        6 bytes
  6741 ;; Hardware stack levels used:    1
  6742 ;; Hardware stack levels required when called:    3
  6743 ;; This function calls:
  6744 ;;		Nothing
  6745 ;; This function is called by:
  6746 ;;		_main
  6747 ;; This function uses a non-reentrant model
  6748 ;;
  6749  033A                     _memset:	
  6750                           
  6751                           ; Regs used in _memset: [wreg-fsr0h+status,2+status,0]
  6752                           ;memset@p1 stored from wreg
  6753  033A  00A4               	movwf	memset@p1
  6754  033B  00A5               	movwf	memset@p
  6755  033C                     l7500:	
  6756  033C  3001               	movlw	1
  6757  033D  02A2               	subwf	memset@n,f
  6758  033E  3000               	movlw	0
  6759  033F  1C03               	skipc
  6760  0340  03A3               	decf	memset@n+1,f
  6761  0341  02A3               	subwf	memset@n+1,f
  6762  0342  0A22               	incf	memset@n,w
  6763  0343  1903               	skipnz
  6764  0344  0A23               	incf	memset@n+1,w
  6765  0345  1903               	btfsc	3,2
  6766  0346  0008               	return
  6767  0347  0825               	movf	memset@p,w
  6768  0348  0084               	movwf	4
  6769  0349  0820               	movf	memset@c,w
  6770  034A  1783               	bsf	3,7	;select IRP bank2
  6771  034B  0080               	movwf	0
  6772  034C  0AA5               	incf	memset@p,f
  6773  034D  2B3C               	goto	l7500
  6774  034E                     __end_of_memset:	
  6775                           
  6776                           	psect	text1033
  6777  0325                     __ptext1033:	
  6778 ;; =============== function _UART_send_char ends ============
  6779                           
  6780                           
  6781 ;; *************** function _initUART *****************
  6782 ;; Defined at:
  6783 ;;		line 7 in file "uart.c"
  6784 ;; Parameters:    Size  Location     Type
  6785 ;;		None
  6786 ;; Auto vars:     Size  Location     Type
  6787 ;;		None
  6788 ;; Return value:  Size  Location     Type
  6789 ;;		None               void
  6790 ;; Registers used:
  6791 ;;		wreg, status,2
  6792 ;; Tracked objects:
  6793 ;;		On entry : 17F/0
  6794 ;;		On exit  : 17F/0
  6795 ;;		Unchanged: FFE80/0
  6796 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6797 ;;      Params:         0       0       0       0
  6798 ;;      Locals:         0       0       0       0
  6799 ;;      Temps:          0       0       0       0
  6800 ;;      Totals:         0       0       0       0
  6801 ;;Total ram usage:        0 bytes
  6802 ;; Hardware stack levels used:    1
  6803 ;; Hardware stack levels required when called:    3
  6804 ;; This function calls:
  6805 ;;		Nothing
  6806 ;; This function is called by:
  6807 ;;		_main
  6808 ;; This function uses a non-reentrant model
  6809 ;;
  6810  0325                     _initUART:	
  6811                           
  6812                           ;uart.c: 9: TRISB5 = 1;
  6813                           
  6814                           ; Regs used in _initUART: [wreg+status,2]
  6815  0325  1683               	bsf	3,5	;RP0=1, select bank1
  6816  0326  1686               	bsf	6,5
  6817                           
  6818                           ;uart.c: 10: TRISB7 = 0;
  6819  0327  1386               	bcf	6,7
  6820                           
  6821                           ;uart.c: 13: BRG16 = 0;
  6822  0328  119B               	bcf	27,3
  6823                           
  6824                           ;uart.c: 14: BRGH = 1;
  6825  0329  1518               	bsf	24,2
  6826                           
  6827                           ;uart.c: 15: SPBRGH = 0;
  6828  032A  019A               	clrf	26	;volatile
  6829                           
  6830                           ;uart.c: 16: SPBRG = 25;
  6831  032B  3019               	movlw	25
  6832  032C  0099               	movwf	25	;volatile
  6833                           
  6834                           ;uart.c: 19: SYNC = 0;
  6835  032D  1218               	bcf	24,4
  6836                           
  6837                           ;uart.c: 20: SPEN = 1;
  6838  032E  1283               	bcf	3,5	;RP0=0, select bank0
  6839  032F  1798               	bsf	24,7
  6840                           
  6841                           ;uart.c: 23: RCIE = 1;
  6842  0330  1683               	bsf	3,5	;RP0=1, select bank1
  6843  0331  168C               	bsf	12,5
  6844                           
  6845                           ;uart.c: 24: TXEN = 1;
  6846  0332  1698               	bsf	24,5
  6847                           
  6848                           ;uart.c: 25: CREN = 1;
  6849  0333  1283               	bcf	3,5	;RP0=0, select bank0
  6850  0334  1618               	bsf	24,4
  6851                           
  6852                           ;uart.c: 28: TX9 = 0;
  6853  0335  1683               	bsf	3,5	;RP0=1, select bank1
  6854  0336  1318               	bcf	24,6
  6855                           
  6856                           ;uart.c: 29: RX9 = 0;
  6857  0337  1283               	bcf	3,5	;RP0=0, select bank0
  6858  0338  1318               	bcf	24,6
  6859  0339  0008               	return
  6860  033A                     __end_of_initUART:	
  6861                           
  6862                           	psect	text1034
  6863  00D9                     __ptext1034:	
  6864 ;; =============== function _initUART ends ============
  6865                           
  6866                           
  6867 ;; *************** function _isr *****************
  6868 ;; Defined at:
  6869 ;;		line 407 in file "Main.c"
  6870 ;; Parameters:    Size  Location     Type
  6871 ;;		None
  6872 ;; Auto vars:     Size  Location     Type
  6873 ;;		None
  6874 ;; Return value:  Size  Location     Type
  6875 ;;		None               void
  6876 ;; Registers used:
  6877 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  6878 ;; Tracked objects:
  6879 ;;		On entry : 0/0
  6880 ;;		On exit  : 40/0
  6881 ;;		Unchanged: FFE9F/0
  6882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  6883 ;;      Params:         0       0       0       0
  6884 ;;      Locals:         0       0       0       0
  6885 ;;      Temps:          3       0       0       0
  6886 ;;      Totals:         3       0       0       0
  6887 ;;Total ram usage:        3 bytes
  6888 ;; Hardware stack levels used:    1
  6889 ;; Hardware stack levels required when called:    2
  6890 ;; This function calls:
  6891 ;;		_UART_get_char
  6892 ;;		_bufferCreator2
  6893 ;;		i1_memset
  6894 ;; This function is called by:
  6895 ;;		Interrupt level 1
  6896 ;; This function uses a non-reentrant model
  6897 ;;
  6898  00D9                     _isr:	
  6899                           
  6900                           ;Main.c: 408: if(RCIE == 1 && RCIF == 1){
  6901  00D9  1683               	bsf	3,5	;RP0=1, select bank1
  6902  00DA  1303               	bcf	3,6	;RP1=0, select bank1
  6903  00DB  1E8C               	btfss	12,5
  6904  00DC  28E5               	goto	i1l7628
  6905  00DD  1283               	bcf	3,5	;RP0=0, select bank0
  6906  00DE  1E8C               	btfss	12,5
  6907  00DF  28E5               	goto	i1l7628
  6908                           
  6909                           ;Main.c: 409: dataRX = UART_get_char();
  6910  00E0  2138  118A         	fcall	_UART_get_char
  6911  00E2  00E1               	movwf	_dataRX
  6912                           
  6913                           ;Main.c: 410: bufferCreator2(dataRX);
  6914  00E3  2152  118A         	fcall	_bufferCreator2
  6915  00E5                     i1l7628:	
  6916                           
  6917                           ;Main.c: 411: }
  6918                           ;Main.c: 412: if (INTE == 1 && INTF == 1){
  6919  00E5  1A0B               	btfsc	11,4
  6920  00E6  1C8B               	btfss	11,1
  6921  00E7  28F0               	goto	i1l7638
  6922  00E8  30C8               	movlw	200
  6923                           
  6924                           ;Main.c: 413: INTF = 0;
  6925  00E9  108B               	bcf	11,1
  6926                           
  6927                           ;Main.c: 415: flagTryConnect = 1;
  6928  00EA  15FA               	bsf	_flagTryConnect/(0+8),_flagTryConnect& (0+7)
  6929                           
  6930                           ;Main.c: 416: timeToConnect = 200;
  6931  00EB  1283               	bcf	3,5	;RP0=0, select bank0
  6932  00EC  00E6               	movwf	_timeToConnect
  6933                           
  6934                           ;Main.c: 417: timeBlinkLed = 5;
  6935  00ED  3005               	movlw	5
  6936  00EE  00E5               	movwf	_timeBlinkLed
  6937                           
  6938                           ;Main.c: 418: RC4 = 0;
  6939  00EF  1207               	bcf	7,4
  6940  00F0                     i1l7638:	
  6941                           
  6942                           ;Main.c: 419: }
  6943                           ;Main.c: 420: if (T0IE == 1 && T0IF == 1){
  6944  00F0  1A8B               	btfsc	11,5
  6945  00F1  1D0B               	btfss	11,2
  6946  00F2  2910               	goto	i1l7664
  6947  00F3  303C               	movlw	60
  6948                           
  6949                           ;Main.c: 421: T0IE = 1;
  6950  00F4  168B               	bsf	11,5
  6951                           
  6952                           ;Main.c: 422: T0IF = 0;
  6953  00F5  110B               	bcf	11,2
  6954                           
  6955                           ;Main.c: 423: TMR0 = 60;
  6956  00F6  1283               	bcf	3,5	;RP0=0, select bank0
  6957  00F7  0081               	movwf	1	;volatile
  6958                           
  6959                           ;Main.c: 424: if (serialTimeOut > 0){serialTimeOut--;}
  6960  00F8  087D               	movf	_serialTimeOut,w
  6961  00F9  1D03               	skipz
  6962  00FA  03FD               	decf	_serialTimeOut,f
  6963                           
  6964                           ;Main.c: 425: if (serialTimeOut == 0){
  6965  00FB  08FD               	movf	_serialTimeOut,f
  6966  00FC  1D03               	skipz
  6967  00FD  290A               	goto	i1l7656
  6968                           
  6969                           ;Main.c: 426: serialTimeOut = 10;
  6970  00FE  300A               	movlw	10
  6971  00FF  00FD               	movwf	_serialTimeOut
  6972                           
  6973                           ;Main.c: 427: rxBufferPos = 0;
  6974  0100  01FC               	clrf	_rxBufferPos
  6975                           
  6976                           ;Main.c: 428: rxBufferLength = 0;
  6977  0101  01FB               	clrf	_rxBufferLength
  6978                           
  6979                           ;Main.c: 429: memset(rxBuffer,0,rxBufferLength);
  6980  0102  01F0               	clrf	?i1_memset
  6981  0103  01F1               	clrf	?i1_memset+1
  6982  0104  087B               	movf	_rxBufferLength,w
  6983  0105  00F2               	movwf	?i1_memset+2
  6984  0106  303E               	movlw	_rxBuffer& (0+255)
  6985  0107  01F3               	clrf	?i1_memset+3
  6986  0108  213E  118A         	fcall	i1_memset
  6987  010A                     i1l7656:	
  6988                           
  6989                           ;Main.c: 430: }
  6990                           ;Main.c: 431: if (timeToConnect>0){
  6991  010A  0866               	movf	_timeToConnect,w
  6992  010B  1D03               	skipz
  6993                           
  6994                           ;Main.c: 432: timeToConnect--;
  6995  010C  03E6               	decf	_timeToConnect,f
  6996                           
  6997                           ;Main.c: 433: }
  6998                           ;Main.c: 435: if (timeBlinkLed>0){
  6999  010D  0865               	movf	_timeBlinkLed,w
  7000  010E  1D03               	skipz
  7001                           
  7002                           ;Main.c: 436: timeBlinkLed--;
  7003  010F  03E5               	decf	_timeBlinkLed,f
  7004  0110                     i1l7664:	
  7005                           
  7006                           ;Main.c: 437: }
  7007                           ;Main.c: 438: }
  7008                           ;Main.c: 439: if (TMR1IE == 1 && TMR1IF == 1){
  7009  0110  1683               	bsf	3,5	;RP0=1, select bank1
  7010  0111  1C0C               	btfss	12,0
  7011  0112  292F               	goto	i1l4939
  7012  0113  1283               	bcf	3,5	;RP0=0, select bank0
  7013  0114  1C0C               	btfss	12,0
  7014  0115  292F               	goto	i1l4939
  7015                           
  7016                           ;Main.c: 440: TMR1IF = 0;
  7017  0116  100C               	bcf	12,0
  7018                           
  7019                           ;Main.c: 441: TMR1ON = 0;
  7020  0117  1010               	bcf	16,0
  7021                           
  7022                           ;Main.c: 442: TMR1L = 0x00;
  7023  0118  018E               	clrf	14	;volatile
  7024                           
  7025                           ;Main.c: 443: TMR1H = 0x60;
  7026  0119  3060               	movlw	96
  7027  011A  008F               	movwf	15	;volatile
  7028  011B  300A               	movlw	10
  7029                           
  7030                           ;Main.c: 444: TMR1ON = 1;
  7031  011C  1410               	bsf	16,0
  7032                           
  7033                           ;Main.c: 445: timeNow += 10;
  7034  011D  07D4               	addwf	_timeNow,f
  7035  011E  3001               	movlw	1
  7036  011F  1803               	skipnc
  7037  0120  07D5               	addwf	_timeNow+1,f
  7038  0121  1803               	skipnc
  7039  0122  07D6               	addwf	_timeNow+2,f
  7040  0123  1803               	skipnc
  7041  0124  07D7               	addwf	_timeNow+3,f
  7042                           
  7043                           ;Main.c: 446: if (contTimer > 0){
  7044  0125  085D               	movf	_contTimer+1,w
  7045  0126  045C               	iorwf	_contTimer,w
  7046  0127  1903               	skipnz
  7047  0128  292F               	goto	i1l4939
  7048                           
  7049                           ;Main.c: 447: contTimer --;
  7050  0129  3001               	movlw	1
  7051  012A  02DC               	subwf	_contTimer,f
  7052  012B  3000               	movlw	0
  7053  012C  1C03               	skipc
  7054  012D  03DD               	decf	_contTimer+1,f
  7055  012E  02DD               	subwf	_contTimer+1,f
  7056  012F                     i1l4939:	
  7057  012F  0879               	movf	??_isr+2,w
  7058  0130  008A               	movwf	10
  7059  0131  0878               	movf	??_isr+1,w
  7060  0132  0084               	movwf	4
  7061  0133  0E77               	swapf	??_isr^(0+-128),w
  7062  0134  0083               	movwf	3
  7063  0135  0EFE               	swapf	126,f
  7064  0136  0E7E               	swapf	126,w
  7065  0137  0009               	retfie
  7066  0138                     __end_of_isr:	
  7067  0138                     __ptext1037:	
  7068 ;; =============== function i1_memset ends ============
  7069                           
  7070                           
  7071 ;; *************** function _UART_get_char *****************
  7072 ;; Defined at:
  7073 ;;		line 66 in file "uart.c"
  7074 ;; Parameters:    Size  Location     Type
  7075 ;;		None
  7076 ;; Auto vars:     Size  Location     Type
  7077 ;;		None
  7078 ;; Return value:  Size  Location     Type
  7079 ;;                  1    wreg      unsigned char 
  7080 ;; Registers used:
  7081 ;;		wreg
  7082 ;; Tracked objects:
  7083 ;;		On entry : 60/0
  7084 ;;		On exit  : 60/0
  7085 ;;		Unchanged: FFF9F/0
  7086 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7087 ;;      Params:         0       0       0       0
  7088 ;;      Locals:         0       0       0       0
  7089 ;;      Temps:          0       0       0       0
  7090 ;;      Totals:         0       0       0       0
  7091 ;;Total ram usage:        0 bytes
  7092 ;; Hardware stack levels used:    1
  7093 ;; This function calls:
  7094 ;;		Nothing
  7095 ;; This function is called by:
  7096 ;;		_isr
  7097 ;; This function uses a non-reentrant model
  7098 ;;
  7099  0138                     _UART_get_char:	
  7100                           
  7101                           ;uart.c: 67: if(OERR){
  7102                           
  7103                           ; Regs used in _UART_get_char: [wreg]
  7104  0138  1C98               	btfss	24,1
  7105  0139  293C               	goto	i1l7490
  7106                           
  7107                           ;uart.c: 68: CREN = 0;
  7108  013A  1218               	bcf	24,4
  7109                           
  7110                           ;uart.c: 69: CREN = 1;
  7111  013B  1618               	bsf	24,4
  7112  013C                     i1l7490:	
  7113                           
  7114                           ;uart.c: 70: }
  7115                           ;uart.c: 71: return RCREG;
  7116  013C  081A               	movf	26,w	;volatile
  7117  013D  0008               	return
  7118  013E                     __end_of_UART_get_char:	
  7119  013E                     __ptext1036:	
  7120 ;; =============== function _bufferCreator2 ends ============
  7121                           
  7122                           
  7123 ;; *************** function i1_memset *****************
  7124 ;; Defined at:
  7125 ;;		line 10 in file "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\sources\memset.c"
  7126 ;; Parameters:    Size  Location     Type
  7127 ;;  memset          1    wreg     PTR void 
  7128 ;;		 -> rxBuffer(30), 
  7129 ;;  memset          2    0[COMMON] int 
  7130 ;;  memset          2    2[COMMON] unsigned int 
  7131 ;; Auto vars:     Size  Location     Type
  7132 ;;  memset          1    4[COMMON] PTR void 
  7133 ;;		 -> rxBuffer(30), 
  7134 ;;  memset          1    5[COMMON] PTR unsigned char 
  7135 ;; Return value:  Size  Location     Type
  7136 ;;                  1    wreg      PTR void 
  7137 ;; Registers used:
  7138 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  7139 ;; Tracked objects:
  7140 ;;		On entry : 60/0
  7141 ;;		On exit  : 60/0
  7142 ;;		Unchanged: FFE9F/0
  7143 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7144 ;;      Params:         4       0       0       0
  7145 ;;      Locals:         2       0       0       0
  7146 ;;      Temps:          0       0       0       0
  7147 ;;      Totals:         6       0       0       0
  7148 ;;Total ram usage:        6 bytes
  7149 ;; Hardware stack levels used:    1
  7150 ;; This function calls:
  7151 ;;		Nothing
  7152 ;; This function is called by:
  7153 ;;		_bufferCreator2
  7154 ;;		_isr
  7155 ;; This function uses a non-reentrant model
  7156 ;;
  7157  013E                     i1_memset:	
  7158                           
  7159                           ; Regs used in i1_memset: [wreg-fsr0h+status,2+status,0]
  7160                           ;i1memset@p1 stored from wreg
  7161  013E  00F4               	movwf	i1memset@p1
  7162  013F  00F5               	movwf	i1memset@p
  7163  0140                     i1l7762:	
  7164  0140  3001               	movlw	1
  7165  0141  02F2               	subwf	i1memset@n,f
  7166  0142  3000               	movlw	0
  7167  0143  1C03               	skipc
  7168  0144  03F3               	decf	i1memset@n+1,f
  7169  0145  02F3               	subwf	i1memset@n+1,f
  7170  0146  0A72               	incf	i1memset@n,w
  7171  0147  1903               	skipnz
  7172  0148  0A73               	incf	i1memset@n+1,w
  7173  0149  1903               	btfsc	3,2
  7174  014A  0008               	return
  7175  014B  0875               	movf	i1memset@p,w
  7176  014C  0084               	movwf	4
  7177  014D  0870               	movf	i1memset@c,w
  7178  014E  1783               	bsf	3,7	;select IRP bank2
  7179  014F  0080               	movwf	0
  7180  0150  0AF5               	incf	i1memset@p,f
  7181  0151  2940               	goto	i1l7762
  7182  0152                     __end_ofi1_memset:	
  7183  0152                     __ptext1035:	
  7184 ;; =============== function _isr ends ============
  7185                           
  7186                           
  7187 ;; *************** function _bufferCreator2 *****************
  7188 ;; Defined at:
  7189 ;;		line 107 in file "uart.c"
  7190 ;; Parameters:    Size  Location     Type
  7191 ;;  ch              1    wreg     unsigned char 
  7192 ;; Auto vars:     Size  Location     Type
  7193 ;;  ch              1    6[COMMON] unsigned char 
  7194 ;; Return value:  Size  Location     Type
  7195 ;;		None               void
  7196 ;; Registers used:
  7197 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  7198 ;; Tracked objects:
  7199 ;;		On entry : 60/0
  7200 ;;		On exit  : 60/0
  7201 ;;		Unchanged: FFE9F/0
  7202 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  7203 ;;      Params:         0       0       0       0
  7204 ;;      Locals:         1       0       0       0
  7205 ;;      Temps:          0       0       0       0
  7206 ;;      Totals:         1       0       0       0
  7207 ;;Total ram usage:        1 bytes
  7208 ;; Hardware stack levels used:    1
  7209 ;; Hardware stack levels required when called:    1
  7210 ;; This function calls:
  7211 ;;		i1_memset
  7212 ;; This function is called by:
  7213 ;;		_isr
  7214 ;; This function uses a non-reentrant model
  7215 ;;
  7216  0152                     _bufferCreator2:	
  7217                           
  7218 ;; hardware stack exceeded
  7219                           ; Regs used in _bufferCreator2: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7220                           ;bufferCreator2@ch stored from wreg
  7221  0152  00F6               	movwf	bufferCreator2@ch
  7222                           
  7223                           ;uart.c: 117: if (rxBufferPos < 30-1){
  7224  0153  301D               	movlw	29
  7225  0154  027C               	subwf	_rxBufferPos,w
  7226  0155  1803               	skipnc
  7227  0156  2964               	goto	i1l7514
  7228                           
  7229                           ;uart.c: 119: rxBuffer[rxBufferPos] = ch;
  7230  0157  087C               	movf	_rxBufferPos,w
  7231  0158  3E3E               	addlw	_rxBuffer& (0+255)
  7232  0159  0084               	movwf	4
  7233  015A  0876               	movf	bufferCreator2@ch,w
  7234  015B  1783               	bsf	3,7	;select IRP bank2
  7235  015C  0080               	movwf	0
  7236                           
  7237                           ;uart.c: 120: rxBufferPos++;
  7238  015D  0AFC               	incf	_rxBufferPos,f
  7239                           
  7240                           ;uart.c: 121: rxBufferLength = rxBufferPos;
  7241  015E  087C               	movf	_rxBufferPos,w
  7242  015F  00FB               	movwf	_rxBufferLength
  7243  0160  300A               	movlw	10
  7244                           
  7245                           ;uart.c: 122: flagRxBufferOk = 1;
  7246  0161  157A               	bsf	_flagRxBufferOk/(0+8),_flagRxBufferOk& (0+7)
  7247                           
  7248                           ;uart.c: 123: serialTimeOut = 10;
  7249  0162  00FD               	movwf	_serialTimeOut
  7250                           
  7251                           ;uart.c: 124: }
  7252  0163  0008               	return
  7253  0164                     i1l7514:	
  7254                           
  7255                           ;uart.c: 125: else{
  7256                           ;uart.c: 126: rxBufferPos = 0;
  7257  0164  01FC               	clrf	_rxBufferPos
  7258                           
  7259                           ;uart.c: 127: memset(rxBuffer,0,rxBufferLength);
  7260  0165  01F0               	clrf	?i1_memset
  7261  0166  01F1               	clrf	?i1_memset+1
  7262  0167  087B               	movf	_rxBufferLength,w
  7263  0168  00F2               	movwf	?i1_memset+2
  7264  0169  303E               	movlw	_rxBuffer& (0+255)
  7265  016A  01F3               	clrf	?i1_memset+3
  7266  016B  213E               	fcall	i1_memset
  7267  016C  0008               	return
  7268  016D                     __end_of_bufferCreator2:	
  7269                           
  7270                           	psect	intentry
  7271  0004                     __pintentry:	
  7272 ;; hardware stack exceeded
  7273                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  7274                           
  7275  0004                     interrupt_function:	
  7276  007E                     saved_w	set	btemp
  7277  0004  00FE               	movwf	btemp
  7278  0005  0E03               	swapf	3,w
  7279  0006  00F7               	movwf	??_isr
  7280  0007  0804               	movf	4,w
  7281  0008  00F8               	movwf	??_isr+1
  7282  0009  080A               	movf	10,w
  7283  000A  00F9               	movwf	??_isr+2
  7284  000B  118A  28D9         	ljmp	_isr
  7285                           
  7286                           	psect	text1038
  7287  0000                     __ptext1038:	
  7288 ;; =============== function _UART_get_char ends ============
  7289                           
  7290  007E                     btemp	set	126	;btemp
  7291  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.83 build 10920 
Symbol Table                                                                                   Sun Oct 29 19:21:58 2023

                 _eepromReadLogPage 0C33                                   pc 0002  
                ?_eepromReadLogPage 0026                         _startLogCmd 0A3C  
                                fsr 0004                 ___wmul@multiplicand 0022  
                  i2cRead@read_data 0023                        comandoRx@chk 003B  
                i2cInitialize@feq_K 0020                                 l921 0000  
                               l924 0F06                                 l933 0000  
                               l927 0000                                 _GIE 005F  
                               _RC0 0038                                 _RC1 0039  
                               _RB4 0034                                 _RC4 003C  
                               _RB6 0036                                 _PS0 0408  
                               _PS1 0409                                 _PS2 040A  
                               u805 0FA2                                 _PSA 040B  
                               u825 0FCA                                 _RX9 00C6  
                               _TX9 04C6                                 _cmd 00C8  
               ??_eepromReadLogPage 0029                                 _isr 00D9  
                               fsr0 0004                                 indf 0000  
                              S8458 034E                                l1880 0000  
                              l3800 0000                                l2841 0000  
                              l2827 0000                                l2835 0000  
                              l1883 0000                                l1892 0000  
                              l2844 0000                                l2860 0000  
                              l1877 0000                                l2854 0000  
                              l2838 0000                                l1886 0000  
                              l3806 0000                                l2863 0ED9  
                              l2871 0EEF                                l2864 0ED5  
                              l8000 0000                                l1889 0000  
                              l2873 0000                                l2849 0000  
                              l2857 0000                                l3841 0000  
                              l8010 0000                                l8002 0000  
                              l2868 0000                                l8020 0000  
                              l8012 0000                                l8004 0000  
                              l8100 0000                                l4910 0000  
                              l3854 0000                                l8030 0000  
                              l8022 0000                                l8014 0000  
                              l8006 0000                                l8110 0000  
                              l8102 0000                                l3847 0000  
                              l8040 0000                                l8032 0000  
                              l8024 0000                                l8016 0000  
                              l8008 0000                                l8120 0000  
                              l8112 0000                                l8104 0000  
                              l8200 0000                                l5801 0000  
                              l4913 0000                                l8050 0000  
                              l8042 0000                                l8034 0000  
                              l8026 0000                                l8018 0000  
                              l3794 0000                                l8114 0000  
                              l8106 0000                                l8130 0000  
                              l8122 0000                                l8210 0000  
                              l8202 0000                                l7500 033C  
                              l8044 0000                                l8036 0000  
                              l8028 0000                                l8060 0000  
                              l8052 0000                                l8116 0000  
                              l8108 0000                                l8140 0000  
                              l8132 0000                                l8124 0000  
                              l8300 0000                                l8220 0000  
                              l8212 0000                                l8204 0000  
                              l3797 0000                                l4942 0000  
                              l8046 0000                                l8038 0000  
                              l8054 0000                                l8062 0000  
                              l8070 0000                                l8118 0000  
                              l8150 0000                                l8142 0000  
                              l8134 0000                                l8126 0000  
                              l8310 0000                                l8302 0000  
                              l8230 0000                                l8222 0000  
                              l8214 0000                                l8206 0000  
                              l5807 0000                                l4927 0000  
                              l7520 0000                                l8048 0000  
                              l8056 0000                                l8064 0000  
                              l8152 0000                                l8144 0000  
                              l8136 0000                                l8128 0000  
                              l8320 0000                                l8312 0000  
                              l8304 0000                                l8240 0000  
                              l8232 0000                                l8224 0000  
                              l8216 0000                                l8208 0000  
                              l8400 009D                                l4945 0000  
                              l4865 00B3                                l7610 0000  
                              l8058 0000                                l8082 0C5C  
                              l8146 0000                                l8138 0000  
                              l8322 0000                                l8306 0000  
                              l8250 0000                                l8242 0000  
                              l8234 0000                                l8226 0000  
                              l8218 0000                                l8170 083D  
                              l8162 0834                                l8154 0000  
                              l5819 0000                                l7524 0F94  
                              l7532 0000                                l7540 0FB5  
                              l8084 0000                                l8076 0C45  
                              l8068 0000                                l8092 0000  
                              l8148 0000                                l8308 0000  
                              l8260 0000                                l8252 0000  
                              l8244 0000                                l8236 0000  
                              l8228 0000                                l8164 0837  
                              l8332 0995                                l8156 0000  
                              l8420 0000                                l8404 0000  
                              ?_isr 0070                                l4877 0000  
                              l7470 0000                                l7462 0000  
                              l7518 0000                                l7534 0FB2  
                              l7550 0000                                l7542 0000  
                              l7606 0FE1                                l7614 0000  
                              l7702 0F77                                l7710 0000  
                              l8078 0000                                l8094 0000  
                              l8326 0000                                l8318 096D  
                              l8270 0000                                l8262 0000  
                              l4894 08B5                                l8246 0000  
                              l8238 0000                                l8190 0000  
                              l8182 0848                                l8174 0841  
                              l8166 0839                                l8158 0000  
                              l8422 0000                                l8350 0000  
                              l4887 09A5                                l7480 0000  
                              l7472 0000                                l7464 0000  
                              l7528 0FAE                                l7552 0000  
                              l7544 0000                                l7560 0000  
                              l7616 0000                                l7704 0000  
                              l7800 0000                                l8096 0000  
                              l8088 0000                                l8336 0000  
                              l8280 0000                                l8272 0000  
                              l8264 0000                                l8256 0000  
                              l8248 0000                                l8192 0000  
                              l8416 0000                                l8424 00D7  
                              l8408 00A9                                l8360 0000  
                              l8352 0000                                l7474 0000  
                              l7466 0000                                l7482 0000  
                              l7554 0000                                l7546 0000  
                              l7570 0000                                l7562 0000  
                              l7618 0FE8                                l7730 0000  
                              l7802 0000                                l7810 0000  
                              l8098 0000                                l8290 0000  
                              l8282 0000                                l8274 08F0  
                              l8266 0000                                l8258 0000  
                              l8194 0000                                l8186 084C  
                              l8178 0844                                l8338 09A9  
                              l8418 0000                                l8370 0000  
                              l8362 0000                                l8354 0000  
                              l8346 0000                                l5891 0F61  
                              l7476 0000                                l7468 0000  
                              l7484 0000                                l7556 0000  
                              l7548 0000                                l7580 0000  
                              l7572 0000                                l7564 0000  
                              l7724 0000                                l7740 0E6C  
                              l7732 0000                                l7804 0000  
                              l7812 0000                                l7820 0000  
                              l7900 0000                                l8292 0000  
                              l8284 0000                                l8276 08F8  
                              l8268 0000                                l8196 0000  
                              l8188 0000                                l8372 0064  
                              l8364 0055                                l8356 0000  
                              l8348 0000                                l7478 0000  
                              l7494 0000                                l7582 0000  
                              l7574 0000                                l7566 0000  
                              l7558 0000                                l7590 0000  
                              l5894 0000                                l7718 0F1F  
                              l7726 0F44                                l7750 0000  
                              l7742 0000                                l7806 0000  
                              l7814 0000                                l7822 0000  
                              l7830 0000                                l7902 0000  
                              l8294 0000                                l8286 0000  
                              l8278 08FB                                l8198 0000  
                              l8390 0095                                l8358 0000  
                              l7584 0000                                l7576 0000  
                              l7568 0000                                l5976 0000  
                              l7752 0E97                                l7808 0000  
                              l7824 0EF1                                l7832 0F50  
                              l7904 0000                                l7920 0000  
                              l7912 0CB3                                l8288 0000  
                              l8376 0000                                l7498 0000  
                              l7578 0000                                l7594 0FBC  
                              l7586 0000                                l7690 0000  
                              l7682 0000                                l7746 0000  
                              l7770 0000                                l7818 0EDB  
                              l7826 0F4D                                l7834 0EF2  
                              l7850 0000                                l7930 0000  
                              l7922 0000                                l7906 0000  
                              l8298 093C                                l8394 0000  
                              l8386 0000                                l5995 0000  
                              l7588 0000                                l7692 0000  
                              l7684 0B44                                l7772 01BC  
                              l7764 0000                                l7780 0000  
                              l7836 0EFD                                l7844 0EAD  
                              l7860 0000                                l7940 0000  
                              l7932 0000                                l7924 0000  
                              l7908 0000                                l8396 0000  
                              l8388 0000                                l7598 0FD5  
                              l7782 0000                                l7774 0000  
                              l7790 0000                                l7854 0000  
                              l7846 0000                                l7838 0000  
                              l7870 0000                                l7950 0000  
                              l7942 0000                                l7934 0000  
                              l7926 0000                                l7918 0CB6  
                              l8398 0000                                l7688 0B4C  
                              l7768 0000                                l7776 0000  
                              l7784 0000                                l7792 0000  
                              l7856 0000                                l7848 0000  
                              l7872 0000                                l7880 0000  
                              l7960 0000                                l7952 0000  
                              l7944 0000                                l7936 0000  
                              l7928 0000                                l7698 0000  
                              l7778 0000                                l7786 0000  
                              l7794 0000                                l7866 0000  
                              l7890 0000                                l7882 0000  
                              l7970 0000                                l7962 0000  
                              l7954 0000                                l7946 0000  
                              l7938 0000                                l7788 0000  
                              l7796 0000                                l7868 0000  
                              l7892 0000                                l7884 0000  
                              l7980 0000                                l7972 0000  
                              l7964 0000                                l7956 0000  
                              l7948 0000                                l7798 0000  
                              l7878 0000                                l7894 0000  
                              l7886 0000                                l7974 0000  
                              l7966 0000                                l7958 0000  
                              l7990 0000                __end_of_checksumCalc 0FB2  
                              l7896 0000                                l7888 0000  
                              l7976 0000                                l7968 0000  
                              l7992 0000                                l7984 0000  
                              l7898 0000                                l7978 0000  
                              l7994 0000                                l7986 0000  
                              l7996 0000                                l7988 0000  
                              l7998 0000                                STR_1 0225  
                              STR_2 0219                                STR_3 020B  
                              STR_4 0231                                _BRGH 04C2  
                              _T0IE 005D                                _T0IF 005A  
                              _CREN 00C4                                _T0CS 040D  
                              u1205 0CA2                                u1055 0F2D  
                              u1135 0258                                u1235 0CF9  
                              u1245 0D19                                u1325 08BB  
                              u1095 0E7F                                u1255 0D8C  
                              u1335 0987                                u1265 0DAC  
                              u1507 0027                                u1285 0C58  
                              u1517 0036                                u1295 0C6A  
                              u1607 0BF0                                u1527 0043  
                              u1617 0C01                                u1537 00BA  
                              u1707 0AAE                                u1627 0C16  
                              u1547 00CD                                u1717 0ABF  
                              u1637 09D5                                u1557 0B6A  
                              u1807 01AE                                u1727 0AD0  
                              u1647 09EB                                u1567 0B7C  
                              u1737 0AE2                                u1657 0A00  
                              u1577 0B9D                                u1747 0AF5  
                              u1667 0A12                                u1587 0BBB  
                              u1757 0B08                                u1677 0A26  
                              u1597 0BD9                                u1767 0B1B  
                              u1687 0A37                                u1777 0174  
                              u1697 0A9E                                u1787 0186  
                              _PEIE 005E                                u1797 019A  
                              _INTE 005C                                _INTF 0059  
                              _RCIE 0465                                _RCIF 0065  
                              _OERR 00C1                                _TMR0 0001  
                              _SPEN 00C7                                _TXEN 04C5  
                              _TXIF 0064                                _SYNC 04C4  
           halfclockdelay@downcount 0021                                _main 000F  
                              btemp 007E           __size_of_UART_send_String 0011  
                              start 000D           __end_of_eepromReadLogPage 0C6F  
                   ??_eepromReadLog 0029                     __end_of_i2cNack 0EE7  
                   __end_of_i2cRead 0E58                         i2cWrite@ack 0024  
                   ??_i2cInitialize 0024                     __end_of_i2cStop 0F05  
                             ??_isr 0077                               ?_main 0049  
                             _BRG16 04DB                               _ANSEL 011E  
                   __end_of___lldiv 0EA0                     __end_of___llmod 0F4D  
                             i1l937 0000                               _RCREG 001A  
                             _TMR1H 000F                               _TMR1L 000E  
                             _SPBRG 0099                               _PORTA 0005  
                             _PORTB 0006                               _PORTC 0007  
                             _TRISA 0085                               _TRISB 0086  
                             _TRISC 0087                               _TXREG 0019  
                        i1memset@p1 0074                 ___lmul@multiplicand 0024  
                   __end_of_logSave 0A3C                     __end_of_sda_out 0EF2  
                             _timer 005A                     __end_of_scl_out 0EDC  
                    __pbitbssCOMMON 03D0                               pclath 000A  
                        _i2cRestart 0F90                               status 0003  
                             wtemp0 007E                    __end_ofi1_memset 0152  
                  ??_eepromReadByte 0028                      _checksumVerify 0FB8  
            __size_of_initInterrupt 001D                        __end_of_main 00D9  
                   comandoRx@i_6106 0039                        i2cWrite@data 0023  
                  __end_of_i2cStart 0EFD                    __end_of_i2cWrite 0ECD  
              __size_of_getClockCmd 0035                              ??_main 004D  
            __size_of_readLogStatus 003A                     _readTemperature 0062  
                  ___llmod@dividend 0031                        ?_setTimerCmd 0070  
          __size_of_eepromWriteByte 000F                              _ANSELH 011F  
                            i1l7510 0000                              i1l7502 0000  
                            i1l5807 0000                              i1l7512 0000  
              __size_of_getTimerCmd 001E                              i1l7506 0000  
                            i1l7514 0164                              i1l4939 012F  
                            _INTEDG 040E                              i1l7516 0000  
                            i1l7508 0000                              i1l7620 0000  
                            i1l7490 013C                              i1l7650 0000  
                            i1l7634 0000                              i1l7626 0000  
                            i1l7652 0000                              i1l7644 0000  
                            i1l7636 0000                              i1l7628 00E5  
                            i1l7486 0000                              i1l7670 0000  
                            i1l7662 0000                              i1l7654 0000  
                            i1l7646 0000                              i1l7638 00F0  
                            i1l7760 0000                              i1l7672 0000  
                            i1l7656 010A                              i1l7664 0110  
                            i1l7762 0140                              i1l7674 0000  
                            i1l7658 0000                              i1l7756 0000  
                            i1l7676 0000                              i1l7678 0000  
                            _TMR1IE 0460                              _TMR1IF 0060  
                            _TMR1CS 0081                              _SPBRGH 009A  
                            _TMR1ON 0080                              _TRISB4 0434  
                            _TRISB5 0435                              _TRISB6 0436  
                            _TRISB7 0437                           ??_i2cNack 0023  
            __end_of_checksumVerify 0FE3                           ??_i2cRead 0023  
                  ??_bufferCreator2 0076                           ??_i2cStop 0023  
__size_of_sendTriggerMeasurementCmd 000F                              _i2cAck 0EA0  
        __size_of_eepromReadLogPage 003C                              ___lmul 0F5D  
                            ___wmul 0B42                              _dataRX 0061  
                  __end_of_initGPIO 0310                         readTemp@aux 0041  
                         ??___lldiv 0028                    __end_of_initUART 033A  
                         ??___llmod 0035               eepromReadLogPage@addr 0026  
             eepromReadLogPage@buff 0028                    __end_of_initVars 0C1B  
                  __end_of_readTemp 0E43                              _memcpy 0FE3  
                            _memset 033A                              clrloop 0361  
                         ??_logSave 0045                           ??_sda_out 0022  
             __size_of_checksumCalc 0021                    __end_of_resposta 0F5D  
                         ??_scl_out 0022                              saved_w 007E  
                    _rxBufferLength 007B                       _initInterrupt 02DD  
                       ?_i2cRestart 0070                     ?_checksumVerify 0070  
                  _UART_send_String 01BA                       _readLogStatus 01CB  
 __end_of_sendTriggerMeasurementCmd 0815                      __pcstackCOMMON 0070  
                      __pidataBANK0 0000                        _checksumCalc 0F91  
                      ?_startLogCmd 0070               __end_of_UART_get_char 013E  
                         ?i1_memset 0070                      ?_initInterrupt 0070  
                __size_of_comandoRx 0193                  __size_of_jdyConfig 004D  
           __size_of_halfclockdelay 0006                          __pbssBANK0 005C  
                        __pbssBANK1 00A0                          __pbssBANK2 0120  
                         ?_i2cStart 0070                           ?_i2cWrite 0070  
                _readTemperatureDec 0063                  __size_of_initAht10 000F  
                 eepromReadLog@addr 0026                      ?_readLogStatus 0070  
                 eepromReadLog@buff 0028                   ??_eepromWriteByte 0029  
                           ?_i2cAck 0070                          __pmaintext 000F  
                           ?___lmul 0020                             ?___wmul 0020  
                        __pintentry 0004                          __ptext1000 0806  
                        __ptext1001 0815                          __ptext1010 0EF2  
                        __ptext1002 0F90                          __ptext1011 0F4D  
                        __ptext1003 0B33                          __ptext1020 0E58  
                        __ptext1012 0EE7                          __ptext1004 016D  
                        __ptext1021 0F0F                          __ptext1013 0ECD  
                        __ptext1005 0EDC                          __ptext1030 0F91  
                        __ptext1022 0F5D                          __ptext1014 01CB  
                        __ptext1006 0EA0                          __ptext1031 033A  
                        __ptext1023 0B42                          __ptext1015 0310  
                        __ptext1007 0E43                          __ptext1032 0F05  
                        __ptext1024 0FE3                          __ptext1016 02BF  
                        __ptext1008 0EAB                          __ptext1033 0325  
                        __ptext1025 0FB8                          __ptext1017 029E  
                        __ptext1009 0EFD                          __ptext1034 00D9  
                        __ptext1026 02DD                          __ptext1018 023A  
                        __ptext1035 0152                          __ptext1027 02FA  
                        __ptext1019 01BA                          __ptext1036 013E  
                        __ptext1028 0FB2                             ?_memcpy 0020  
                        __ptext1037 0138                          __ptext1029 0368  
                        __ptext1038 0000                             ?_memset 0020  
                    ___lmul@product 0028                             _T1CKPS0 0084  
                           _T1CKPS1 0085                   UART_send_String@i 0023  
               __size_of_i2cRestart 0001                             _T1OSCEN 0083  
                        ??i1_memset 0074                  checksumCalc@buffer 0023  
           __size_of_UART_send_char 000A                           ?_initGPIO 0070  
                        ??_i2cStart 0023                          ??_i2cWrite 0023  
                         ?_initUART 0070                __size_of_setTimerCmd 0021  
                         ?_initVars 0070                           ?_readTemp 0070  
                     checksumCalc@i 0025                             _i2cNack 0EDC  
                           _i2cRead 0E43                             _i2cStop 0EFD  
                   __size_of_i2cAck 000B                             _nT1SYNC 0082  
                 checksumVerify@len 0023                   __end_of_comandoRx 09B7  
                         ?_resposta 0070               __end_of_eepromReadLog 0C98  
                 __end_of_jdyConfig 01BA                     __size_of___lmul 0033  
                           ___lldiv 0E58                     __size_of___wmul 0019  
                           ___llmod 0F0F                      _readDataBuffer 0120  
             __end_of_i2cInitialize 036C                        readTemp@aux2 0040  
                      readTemp@buff 003A                     __size_of_memcpy 001D  
                   __size_of_memset 0014                   __end_of_initAht10 0824  
                   ??_initInterrupt 0020                             _logSave 09B7  
                      __size_of_isr 005F                             _sda_out 0EE7  
                           _scl_out 0ECD                             _timeNow 0054  
              end_of_initialization 029B                          ??_initGPIO 0020  
                        ??_initUART 0020                     ??_readLogStatus 0026  
                           memcpy@d 0025                             memcpy@n 0021  
                           memcpy@s 0026                          ??_initVars 0029  
                           memset@c 0020                             memset@n 0022  
                           memset@p 0025                          ??_readTemp 0036  
                    _flagRxBufferOk 03D2                     ___lldiv@divisor 0020  
                   ___lldiv@counter 002C                       ??_getClockCmd 0026  
                        ??_resposta 0021                      logSave@auxAddr 0047  
              __size_of_startLogCmd 00F7            __end_of_UART_send_String 01CB  
               eepromWriteByte@addr 0026                 eepromWriteByte@data 0028  
                     ??_getTimerCmd 0026                          comandoRx@i 0033  
                  ??_checksumVerify 0020                      _halfclockdelay 0FB2  
                      ??_i2cRestart 0023                           i2cWrite@x 0025  
                    _flagTryConnect 03D3                 comandoRx@logsToSend 003C  
                        _stopLogCmd 0310                      __end_of_i2cAck 0EAB  
               comandoRx@numOfBytes 0035                      __end_of___lmul 0F90  
                   checksumCalc@chk 0024                     checksumCalc@len 0020  
                    __end_of___wmul 0B5B                           i1memset@c 0070  
                         i1memset@n 0072                           i1memset@p 0075  
                      sda_out@value 0022             __size_of_eepromReadByte 0018  
                    __end_of_memcpy 1000                      __end_of_memset 034E  
               __end_of_getClockCmd 026F                  __end_of_i2cRestart 0F91  
               start_initialization 026F                      _UART_send_char 0F05  
            __end_of_halfclockdelay 0FB8                     _eepromWriteByte 0B33  
                       __end_of_isr 0138                   __size_ofi1_memset 0014  
               __end_of_getTimerCmd 02DD                     ___llmod@divisor 002D  
                 __size_of_i2cStart 000B                     ___llmod@counter 0035  
                 __size_of_i2cWrite 0022                            ??_i2cAck 0023  
                   checksumVerify@i 0024          ?_sendTriggerMeasurementCmd 0070  
                          ??___lmul 0028                            ??___wmul 0024  
                       __pdataBANK0 0050                            ??_memcpy 0023  
           __size_of_bufferCreator2 001B                            ??_memset 0024  
                 comandoRx@readData 002D              __end_of_UART_send_char 0F0F  
                       __pbssCOMMON 007B                       __pcstackBANK0 0020  
                   ?_halfclockdelay 0070                    bufferCreator2@ch 0076  
                eepromReadByte@addr 0026                  eepromReadByte@buff 0028  
                eepromReadLogPage@i 002A                         ?_stopLogCmd 0070  
                          ?_i2cNack 0070                            ?_i2cRead 0070  
                 __size_of_initGPIO 0016                            ?_i2cStop 0070  
                 __size_of_initUART 0015              __size_of_UART_get_char 0006  
                 __size_of_initVars 00C0                   __size_of_readTemp 01AB  
             UART_send_String@lenth 0021                         _getClockCmd 023A  
                         __ptext992 0824                           __ptext993 0B5B  
                         __ptext994 09B7                           __ptext995 0C33  
                         __ptext996 0C1B                           __ptext997 0C6F  
                         __ptext998 0A3C                           __ptext999 0C98  
                          ?___lldiv 0020                            ?___llmod 002D  
                 __size_of_resposta 0010                           _comandoRx 0824  
                  UART_send_char@ch 0020                           __pstrings 0205  
                         _jdyConfig 016D                       _flagConection 03D0  
                         _contTimer 005C                           __pswtext1 034E  
           __end_of_eepromWriteByte 0B42                     ?_UART_send_char 0070  
                          ?_logSave 0070                            ?_sda_out 0070  
                         _initAht10 0815                            ?_scl_out 0070  
                      scl_out@value 0022                         _getTimerCmd 02BF  
                     ??_setTimerCmd 0026                           _logStatus 03D4  
                UART_send_String@ch 0022                   interrupt_function 0004  
                    ___wmul@product 0024                           _numOfLogs 005E  
            checksumVerify@checksum 0022                       _serialTimeOut 007D  
                       _bufferTxLen 0060                          ?_comandoRx 0070  
                          i2cRead@x 0024                      _eepromReadByte 0C1B  
                     _timeToConnect 0066                          ?_jdyConfig 0070  
                       __stringbase 020A                   ___wmul@multiplier 0020  
                         _startTime 0050                 __size_of_stopLogCmd 0015  
                     _UART_get_char 0138                            i1_memset 013E  
                 ?_UART_send_String 0021                          ?_initAht10 0070  
             __end_of_initInterrupt 02FA                  ??_UART_send_String 0022  
                 ___lmul@multiplier 0020              __size_of_eepromReadLog 0029  
                          _i2cStart 0EF2                            _i2cWrite 0EAB  
            __size_of_i2cInitialize 0004               __end_of_readLogStatus 0205  
               __end_of_setTimerCmd 02BF                    __size_of_i2cNack 000B  
                  __size_of_i2cRead 0015                    __size_of_i2cStop 0008  
            __end_of_eepromReadByte 0C33                      _bufferCreator2 0152  
                     ?_checksumCalc 0020                       ??_startLogCmd 0029  
                  __size_of___lldiv 0048                    __size_of___llmod 003E  
                  ?_eepromWriteByte 0026                      ?_UART_get_char 0070  
                       _readUmidity 0064                    __size_of_logSave 0085  
                  __size_of_sda_out 000B                    __size_of_scl_out 000F  
                          _bufferTx 00A0                            _initGPIO 02FA  
                          _initUART 0325                        _timeBlinkLed 0065  
                          _initVars 0B5B                            _readTemp 0C98  
                     __size_of_main 00CA                            _newTimer 0058  
                          clear_ram 0360                            _rxBuffer 013E  
            __end_of_bufferCreator2 016D                            _resposta 0F4D  
                         resposta@i 0021         ??_sendTriggerMeasurementCmd 0026  
                    ??_checksumCalc 0021                       _eepromReadLog 0C6F  
                   ?_eepromReadByte 0026                            main@argc 0049  
                       ??_comandoRx 002C                            main@argv 004B  
                     _i2cInitialize 0368                         ??_jdyConfig 0024  
                  ??_halfclockdelay 0020                         ??_initAht10 0026  
               __end_of_startLogCmd 0B33                            memcpy@d1 0024  
                          memcpy@s1 0020                            memset@p1 0024  
                       _rxBufferPos 007C                         _setTimerCmd 029E  
                          intlevel1 0000                        ??_stopLogCmd 0026  
            comandoRx@readData_6105 0030                    ___lldiv@dividend 0024  
                         stringcode 0205             __size_of_checksumVerify 002B  
                   ?_bufferCreator2 0070                        ?_getClockCmd 0070  
                    ?_eepromReadLog 0026                    ??_UART_send_char 0020  
                    ?_i2cInitialize 0020                     ??_UART_get_char 0070  
                  ___lldiv@quotient 0028                  __end_of_stopLogCmd 0325  
                   _flagRespostaBLE 03D1                            stringdir 0205  
                          stringtab 0205           _sendTriggerMeasurementCmd 0806  
                      ?_getTimerCmd 0070  
